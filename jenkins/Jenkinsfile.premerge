#!/usr/local/env groovy
/*
 * Copyright (c) 2019-2020, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
*
* Jenkinsfile for building rapids-plugin
*
*/
@Library('shared-libs') _

def urmUrl="https://${ArtifactoryConstants.ARTIFACTORY_NAME}/artifactory/sw-spark-maven"

pipeline {
    agent { label 'vanilla' }

    options {
        ansiColor('xterm')
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'REF', defaultValue: '\${sha1}', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
        BUILD_SCRIPT = '$JENKINS_ROOT/spark-premerge-build.sh'
        MVN_URM_MIRROR='-s jenkins/settings.xml -P mirror-apache-to-urm'
        LIBCUDF_KERNEL_CACHE_PATH='/tmp/.cudf'
        ARTIFACTORY_NAME = "${ArtifactoryConstants.ARTIFACTORY_NAME}"
        URM_URL = "${urmUrl}"
    }

    stages {
        stage('Ubuntu16 CUDA10.1') {
            agent { label 'docker-gpu' }
            steps {
                script {
                    //Check if a PR has been committed using git signoff
                    if (!isSignedOff()) {
                        error "Signed-off-by check FAILED"
                    }
                    echo "Signed-off-by check PASS"
                }
            }
        }
    } // end of stages
} // end of pipeline

boolean isSignedOff() {
    def target_rev = sh(returnStdout: true,
            script: "git rev-parse refs/remotes/origin/${ghprbTargetBranch}").trim()
    def revs_arr = sh(returnStdout: true,
            script: "git log ${target_rev}..${ghprbActualCommit} --pretty=format:%h").split()

    def signed_off = false
    for( String commit : revs_arr ) {
        def signed_log = sh(returnStdout: true,
                script: "git show ${commit} --shortstat | grep 'Signed-off-by' || true")
        echo "commit: ${commit}, signed_log: ${signed_log}"
        // Find `Signed-off-by` comment in one of the commits
        if (signed_log?.trim()) {
            signed_off = true
            break;
        }
    }

    return signed_off
}
