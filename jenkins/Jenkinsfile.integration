#!/usr/local/env groovy
/*
 * Copyright (c) 2019-2020, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
*
* Jenkins file for running spark3.0 integration tests
*
*/

pipeline {
    agent none

    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        string(name: 'OVERWRITE_PARAMS', defaultValue: '',
            description: 'parameters format XXX_VER=xxx;YYY_VER=yyy;')
        string(name: 'CUDA_CLASSIFIER', defaultValue: 'cuda10-1',
            description: '-Dclassifier=\n\n cuda10-1, cuda10-2, EMPTY as cuda10-1')
        string(name: 'REF', defaultValue: 'branch-0.2', description: 'Commit to build')
    }

    environment {
        JENKINS_ROOT  = 'jenkins'
        TEST_SCRIPT = '$JENKINS_ROOT/spark-tests.sh'
        LIBCUDF_KERNEL_CACHE_PATH='/tmp'
        URM_CREDS = credentials("svcngcc_artifactory")
    }

    stages {
        stage('centos7 CUDA10.1') {
            agent { label 'docker-gpu' }
            steps {
                script {
                    def CUDA_NAME=sh(returnStdout: true,
                        script: '. jenkins/version-def.sh>&2 && echo -n $CUDA_CLASSIFIER | sed "s/-/./g"')
                    def IMAGE_NAME="urm.nvidia.com/sw-spark-docker/plugin:it-centos7-$CUDA_NAME"
                    def CUDA_VER="$CUDA_NAME" - "cuda"
                    def urmImage=docker.image(IMAGE_NAME)
                    urmImage.pull()
                    // docker inspect returns "sha256:urmImageID"
                    def urmImageID=sh(returnStdout: true, script: "docker inspect -f {{'.Id'}} $IMAGE_NAME") - "sha256:"
                    // Speed up Docker building via '--cache-from $IMAGE_NAME'
                    def buildImage=docker.build(IMAGE_NAME,
                        "-f jenkins/Dockerfile.integration.centos7 --build-arg CUDA_VER=$CUDA_VER --cache-from $IMAGE_NAME -t $IMAGE_NAME .")
                    def buildImageID=sh(returnStdout: true, script: "docker inspect -f {{'.Id'}} $IMAGE_NAME") - "sha256:"
                    if (! buildImageID.equals(urmImageID)) {
                        echo "Dockerfile updated, upload docker image to URM"
                        uploadDocker(IMAGE_NAME)
                    }

                    buildImage.inside("--runtime=nvidia -v ${HOME}/.zinc:${HOME}/.zinc:rw") {
                        echo "Running integration tests on centos7 $CUDA_NAME"
                        sh "bash $TEST_SCRIPT"
                    }
                }
            }
        }
    } // end of stages
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS") {
                    status = "success"
                    slack("#rapidsai-spark-cicd", "Success", color: "#33CC33")
                }
                else {
                    slack("#rapidsai-spark-cicd", "Failed", color: "#FF0000")
                }
            }
            echo 'Pipeline finished!'
        }
    }
} // end of pipeline

void uploadDocker(String IMAGE_NAME) {
    def DOCKER_CMD="docker --config $WORKSPACE/.docker"
    sh """
        echo $URM_CREDS_PSW | $DOCKER_CMD login https://urm.nvidia.com -u $URM_CREDS_USR --password-stdin
        $DOCKER_CMD push $IMAGE_NAME
        $DOCKER_CMD logout https://urm.nvidia.com
    """
}

void slack(Map params = [:], String channel, String message) {
    Map defaultParams = [
            color: "#000000",
            baseUrl: "https://nvidia.slack.com/services/hooks/jenkins-ci/",
            tokenCredentialId: "slack_token"
    ]

    params["channel"] = channel
    params["message"] = "${BUILD_URL}\n" + message

    slackSend(defaultParams << params)
}
