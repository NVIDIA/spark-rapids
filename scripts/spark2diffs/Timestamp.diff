2c2
<  * Copyright (c) 2022, NVIDIA CORPORATION.
---
>  * Copyright (c) 2021-2022, NVIDIA CORPORATION.
20c20,21
< import com.nvidia.spark.rapids.ExprRule
---
> import com.nvidia.spark.rapids.{ExprChecks, ExprRule, GpuExpression, GpuOverrides, TypeEnum, TypeSig}
> import com.nvidia.spark.rapids.shims.SparkShimImpl
22c23,24
< import org.apache.spark.sql.catalyst.expressions.Expression
---
> import org.apache.spark.sql.catalyst.expressions.{Expression, GetTimestamp}
> import org.apache.spark.sql.rapids.{GpuGetTimestamp, UnixTimeExprMeta}
29,30c31,50
<   def getExprs: Map[Class[_ <: Expression], ExprRule[_ <: Expression]] = Map.empty
< }
---
>   def getExprs: Map[Class[_ <: Expression], ExprRule[_ <: Expression]] = Seq(
>     GpuOverrides.expr[GetTimestamp](
>       "Gets timestamps from strings using given pattern.",
>       ExprChecks.binaryProject(TypeSig.TIMESTAMP, TypeSig.TIMESTAMP,
>         ("timeExp",
>             TypeSig.STRING + TypeSig.DATE + TypeSig.TIMESTAMP,
>             TypeSig.STRING + TypeSig.DATE + TypeSig.TIMESTAMP),
>         ("format", TypeSig.lit(TypeEnum.STRING)
>             .withPsNote(TypeEnum.STRING, "A limited number of formats are supported"),
>             TypeSig.STRING)),
>       (a, conf, p, r) => new UnixTimeExprMeta[GetTimestamp](a, conf, p, r) {
>         override def shouldFallbackOnAnsiTimestamp: Boolean =
>           SparkShimImpl.shouldFallbackOnAnsiTimestamp
> 
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuGetTimestamp(lhs, rhs, sparkFormat, strfFormat)
>         }
>       })
>   ).map(r => (r.getClassFor.asSubclass(classOf[Expression]), r)).toMap
> }
\ No newline at end of file
