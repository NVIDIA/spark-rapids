2c2
<  * Copyright (c) 2022, NVIDIA CORPORATION.
---
>  * Copyright (c) 2019-2022, NVIDIA CORPORATION.
24a25
> import ai.rapids.cudf.DType
26c27,28
< import com.nvidia.spark.rapids.shims.{DecimalArithmeticOverrides, GetMapValueMeta, GpuBroadcastHashJoinMeta, GpuShuffledHashJoinMeta, GpuSortMergeJoinMeta, GpuSpecifiedWindowFrameMeta, GpuTypeShims, GpuWindowExpressionMeta, GpuWindowSpecDefinitionMeta, OffsetWindowFunctionMeta}
---
> import com.nvidia.spark.rapids.shims.{AQEUtils, DecimalArithmeticOverrides, DeltaLakeUtils, GetMapValueMeta, GpuBatchScanExec, GpuHashPartitioning, GpuRangePartitioning, GpuSpecifiedWindowFrameMeta, GpuTypeShims, GpuWindowExpressionMeta, OffsetWindowFunctionMeta, SparkShimImpl}
> import org.apache.hadoop.fs.Path
28a31
> import org.apache.spark.rapids.shims.GpuShuffleExchangeExec
32a36,37
> import org.apache.spark.sql.catalyst.json.rapids.GpuJsonScan
> import org.apache.spark.sql.catalyst.optimizer.NormalizeNaNAndZero
34a40
> import org.apache.spark.sql.catalyst.trees.TreeNodeTag
35a42
> import org.apache.spark.sql.connector.read.Scan
37,38c44,45
< import org.apache.spark.sql.execution.ScalarSubquery
< import org.apache.spark.sql.execution.aggregate._
---
> import org.apache.spark.sql.execution.adaptive.{AdaptiveSparkPlanExec, BroadcastQueryStageExec, ShuffleQueryStageExec}
> import org.apache.spark.sql.execution.aggregate.{HashAggregateExec, ObjectHashAggregateExec, SortAggregateExec}
46c53,56
< import org.apache.spark.sql.execution.exchange.{BroadcastExchangeExec, ReusedExchangeExec, ShuffleExchangeExec}
---
> import org.apache.spark.sql.execution.datasources.v2._
> import org.apache.spark.sql.execution.datasources.v2.csv.CSVScan
> import org.apache.spark.sql.execution.datasources.v2.json.JsonScan
> import org.apache.spark.sql.execution.exchange.{BroadcastExchangeExec, ENSURE_REQUIREMENTS, ReusedExchangeExec, ShuffleExchangeExec}
52a63
> import org.apache.spark.sql.rapids.catalyst.expressions.GpuRand
53a65,68
> import org.apache.spark.sql.rapids.execution.python._
> import org.apache.spark.sql.rapids.execution.python.shims.GpuFlatMapGroupsInPandasExecMeta
> import org.apache.spark.sql.rapids.shims.GpuTimeAdd
> import org.apache.spark.sql.rapids.zorder.ZOrderRules
66c81
< abstract class ReplacementRule[INPUT <: BASE, BASE, WRAP_TYPE <: RapidsMeta[INPUT, BASE]](
---
> abstract class ReplacementRule[INPUT <: BASE, BASE, WRAP_TYPE <: RapidsMeta[INPUT, BASE, _]](
70c85
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
121c136
<       Option[RapidsMeta[_, _]],
---
>       Option[RapidsMeta[_, _, _]],
193c208
<       parent: Option[RapidsMeta[_, _]],
---
>       parent: Option[RapidsMeta[_, _, _]],
208c223
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
223d237
< /*
238c252
< */
---
> 
246c260
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
265c279
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
287c301
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
298d311
< 
302c315
<     parent: Option[RapidsMeta[_, _]],
---
>     parent: Option[RapidsMeta[_, _, _]],
306,310c319
<   // spark 2.3 doesn't have this so just code it here
<   def sparkSessionActive: SparkSession = {
<     SparkSession.getActiveSession.getOrElse(SparkSession.getDefaultSession.getOrElse(
<       throw new IllegalStateException("No active or default Spark session found")))
<   }
---
>   private var fileFormat: Option[ColumnarFileFormat] = None
317c326
<     val spark = sparkSessionActive
---
>     val spark = SparkSession.active
319c328
<     cmd.fileFormat match {
---
>     fileFormat = cmd.fileFormat match {
321a331
>         None
323a334
>         None
329a341
>         None
331a344
>         None
334d346
< }
335a348,368
>   override def convertToGpu(): GpuDataWritingCommand = {
>     val format = fileFormat.getOrElse(
>       throw new IllegalStateException("fileFormat missing, tagSelfForGpu not called?"))
> 
>     GpuInsertIntoHadoopFsRelationCommand(
>       cmd.outputPath,
>       cmd.staticPartitions,
>       cmd.ifPartitionNotExists,
>       cmd.partitionColumns,
>       cmd.bucketSpec,
>       format,
>       cmd.options,
>       cmd.query,
>       cmd.mode,
>       cmd.catalogTable,
>       cmd.fileIndex,
>       cmd.outputColumnNames,
>       conf.stableSort,
>       conf.concurrentWriterPartitionFlushSize)
>   }
> }
340c373
<     parent: Option[RapidsMeta[_, _]],
---
>     parent: Option[RapidsMeta[_, _, _]],
345,350c378
< 
<   // spark 2.3 doesn't have this so just code it here
<   def sparkSessionActive: SparkSession = {
<     SparkSession.getActiveSession.getOrElse(SparkSession.getDefaultSession.getOrElse(
<       throw new IllegalStateException("No active or default Spark session found")))
<   }
---
>   private var gpuProvider: Option[ColumnarFileFormat] = None
360c388
<     val spark = sparkSessionActive
---
>     val spark = SparkSession.active
362c390
<       GpuDataSource.lookupDataSource(cmd.table.provider.get, spark.sessionState.conf)
---
>       GpuDataSource.lookupDataSourceWithFallback(cmd.table.provider.get, spark.sessionState.conf)
365c393
<     origProvider.getConstructor().newInstance() match {
---
>     gpuProvider = origProvider.getConstructor().newInstance() match {
368d395
<         None
372d398
<         None
378a405,418
>   override def convertToGpu(): GpuDataWritingCommand = {
>     val newProvider = gpuProvider.getOrElse(
>       throw new IllegalStateException("fileFormat unexpected, tagSelfForGpu not called?"))
> 
>     GpuCreateDataSourceTableAsSelectCommand(
>       cmd.table,
>       cmd.mode,
>       cmd.query,
>       cmd.outputColumnNames,
>       origProvider,
>       newProvider,
>       conf.stableSort,
>       conf.concurrentWriterPartitionFlushSize)
>   }
380a421,423
> /**
>  * Listener trait so that tests can confirm that the expected optimizations are being applied
>  */
398d440
< 
402d443
< 
406d446
< 
419,421d458
< // copy here for 2.x
< sealed abstract class Optimization
< 
423,427d459
<   // Spark 2.x - don't pull in cudf so hardcode here
<   val DECIMAL32_MAX_PRECISION = 9
<   val DECIMAL64_MAX_PRECISION = 18
<   val DECIMAL128_MAX_PRECISION = 38
< 
480a513,575
>   private def convertPartToGpuIfPossible(part: Partitioning, conf: RapidsConf): Partitioning = {
>     part match {
>       case _: GpuPartitioning => part
>       case _ =>
>         val wrapped = wrapPart(part, conf, None)
>         wrapped.tagForGpu()
>         if (wrapped.canThisBeReplaced) {
>           wrapped.convertToGpu()
>         } else {
>           part
>         }
>     }
>   }
> 
>   /**
>    * Removes unnecessary CPU shuffles that Spark can add to the plan when it does not realize
>    * a GPU partitioning satisfies a CPU distribution because CPU and GPU expressions are not
>    * semantically equal.
>    */
>   def removeExtraneousShuffles(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     plan.transformUp {
>       case cpuShuffle: ShuffleExchangeExec =>
>         cpuShuffle.child match {
>           case sqse: ShuffleQueryStageExec =>
>             GpuTransitionOverrides.getNonQueryStagePlan(sqse) match {
>               case gpuShuffle: GpuShuffleExchangeExecBase =>
>                 val converted = convertPartToGpuIfPossible(cpuShuffle.outputPartitioning, conf)
>                 if (converted == gpuShuffle.outputPartitioning) {
>                   sqse
>                 } else {
>                   cpuShuffle
>                 }
>               case _ => cpuShuffle
>             }
>           case _ => cpuShuffle
>         }
>     }
>   }
> 
>   /**
>    * Searches the plan for ReusedExchangeExec instances containing a GPU shuffle where the
>    * output types between the two plan nodes do not match. In such a case the ReusedExchangeExec
>    * will be updated to match the GPU shuffle output types.
>    */
>   def fixupReusedExchangeExecs(plan: SparkPlan): SparkPlan = {
>     def outputTypesMatch(a: Seq[Attribute], b: Seq[Attribute]): Boolean =
>       a.corresponds(b)((x, y) => x.dataType == y.dataType)
>     plan.transformUp {
>       case sqse: ShuffleQueryStageExec =>
>         sqse.plan match {
>           case ReusedExchangeExec(output, gsee: GpuShuffleExchangeExecBase) if (
>               !outputTypesMatch(output, gsee.output)) =>
>             val newOutput = sqse.plan.output.zip(gsee.output).map { case (c, g) =>
>               assert(c.isInstanceOf[AttributeReference] && g.isInstanceOf[AttributeReference],
>                 s"Expected AttributeReference but found $c and $g")
>               AttributeReference(c.name, g.dataType, c.nullable, c.metadata)(c.exprId, c.qualifier)
>             }
>             AQEUtils.newReuseInstance(sqse, newOutput)
>           case _ => sqse
>         }
>     }
>   }
> 
573c668
<       case dt: DecimalType if allowDecimal => dt.precision <= GpuOverrides.DECIMAL64_MAX_PRECISION
---
>       case dt: DecimalType if allowDecimal => dt.precision <= DType.DECIMAL64_MAX_PRECISION
596c691
<   def checkAndTagFloatAgg(dataType: DataType, conf: RapidsConf, meta: RapidsMeta[_,_]): Unit = {
---
>   def checkAndTagFloatAgg(dataType: DataType, conf: RapidsConf, meta: RapidsMeta[_,_,_]): Unit = {
605a701,732
>   /**
>    * Helper function specific to ANSI mode for the aggregate functions that should
>    * fallback, since we don't have the same overflow checks that Spark provides in
>    * the CPU
>    * @param checkType Something other than `None` triggers logic to detect whether
>    *                  the agg should fallback in ANSI mode. Otherwise (None), it's
>    *                  an automatic fallback.
>    * @param meta agg expression meta
>    */
>   def checkAndTagAnsiAgg(checkType: Option[DataType], meta: AggExprMeta[_]): Unit = {
>     val failOnError = SQLConf.get.ansiEnabled
>     if (failOnError) {
>       if (checkType.isDefined) {
>         val typeToCheck = checkType.get
>         val failedType = typeToCheck match {
>           case _: DecimalType | LongType | IntegerType | ShortType | ByteType => true
>           case _ =>  false
>         }
>         if (failedType) {
>           meta.willNotWorkOnGpu(
>             s"ANSI mode not supported for ${meta.expr} with $typeToCheck result type")
>         }
>       } else {
>         // Average falls into this category, where it produces Doubles, but
>         // internally it uses Double and Long, and Long could overflow (technically)
>         // and failOnError given that it is based on catalyst Add.
>         meta.willNotWorkOnGpu(
>           s"ANSI mode not supported for ${meta.expr}")
>       }
>     }
>   }
> 
609c736
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
616a744,753
>   def scan[INPUT <: Scan](
>       desc: String,
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
>           => ScanMeta[INPUT])
>       (implicit tag: ClassTag[INPUT]): ScanRule[INPUT] = {
>     assert(desc != null)
>     assert(doWrap != null)
>     new ScanRule[INPUT](doWrap, desc, tag)
>   }
> 
620c757
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
638c775
<         p: Option[RapidsMeta[_, _]],
---
>         p: Option[RapidsMeta[_, _, _]],
647c784
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
657c794
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
668c805
<       parent: Option[RapidsMeta[_, _]]): BaseExprMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): BaseExprMeta[INPUT] =
728a866
>         override def convertToGpu(child: Expression): GpuExpression = GpuSignum(child)
738a877,878
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuAlias(child, a.name)(a.exprId, a.qualifier, a.explicitMetadata)
749a890
>         override def convertToGpu(): Expression = att
758a900
> 
762a905
>         override def convertToGpu(child: Expression): GpuToDegrees = GpuToDegrees(child)
767a911
>         override def convertToGpu(child: Expression): GpuToRadians = GpuToRadians(child)
806a951
>         override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(currentRow)
812a958
>           override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(unboundedPreceding)
818a965
>           override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(unboundedFollowing)
823a971
>         override def convertToGpu(): GpuExpression = GpuRowNumber
832a981
>         override def convertToGpu(): GpuExpression = GpuRank(childExprs.map(_.convertToGpu()))
841a991
>         override def convertToGpu(): GpuExpression = GpuDenseRank(childExprs.map(_.convertToGpu()))
850a1001,1002
>         override def convertToGpu(): GpuExpression =
>           GpuPercentRank(childExprs.map(_.convertToGpu()))
870a1023,1024
>         override def convertToGpu(): GpuExpression =
>           GpuLead(input.convertToGpu(), offset.convertToGpu(), default.convertToGpu())
890a1045,1046
>         override def convertToGpu(): GpuExpression =
>           GpuLag(input.convertToGpu(), offset.convertToGpu(), default.convertToGpu())
900a1057,1058
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuPreciseTimestampConversion(child, a.fromType, a.toType)
909,910c1067
<         // val ansiEnabled = SQLConf.get.ansiEnabled
<         val ansiEnabled = false
---
>         val ansiEnabled = SQLConf.get.ansiEnabled
913,914d1069
<           // Spark 2.x - ansi in not in 2.x
<           /*
918,919d1072
< 
<            */
920a1074,1076
> 
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuUnaryMinus(child, ansiEnabled)
928a1085
>         override def convertToGpu(child: Expression): GpuExpression = GpuUnaryPositive(child)
933a1091
>         override def convertToGpu(child: Expression): GpuExpression = GpuYear(child)
938a1097
>         override def convertToGpu(child: Expression): GpuExpression = GpuMonth(child)
943a1103
>         override def convertToGpu(child: Expression): GpuExpression = GpuQuarter(child)
948a1109
>         override def convertToGpu(child: Expression): GpuExpression = GpuDayOfMonth(child)
953a1115
>         override def convertToGpu(child: Expression): GpuExpression = GpuDayOfYear(child)
958a1121,1132
>         override def convertToGpu(child: Expression): GpuExpression = GpuAcos(child)
>       }),
>     expr[Acosh](
>       "Inverse hyperbolic cosine",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Acosh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           if (conf.includeImprovedFloat) {
>             GpuAcoshImproved(child)
>           } else {
>             GpuAcoshCompat(child)
>           }
960d1133
<     // Acosh is not supported in spark 2.x
964a1138,1158
>         override def convertToGpu(child: Expression): GpuExpression = GpuAsin(child)
>       }),
>     expr[Asinh](
>       "Inverse hyperbolic sine",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Asinh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           if (conf.includeImprovedFloat) {
>             GpuAsinhImproved(child)
>           } else {
>             GpuAsinhCompat(child)
>           }
> 
>         override def tagSelfForAst(): Unit = {
>           if (!conf.includeImprovedFloat) {
>             // AST is not expressive enough yet to implement the conditional expression needed
>             // to emulate Spark's behavior
>             willNotWorkInAst("asinh is not AST compatible unless " +
>                 s"${RapidsConf.IMPROVED_FLOAT_OPS.key} is enabled")
>           }
>         }
966d1159
<     // Asinh is not supported in spark 2.x
970a1164
>         override def convertToGpu(child: Expression): GpuExpression = GpuSqrt(child)
975a1170
>         override def convertToGpu(child: Expression): GpuExpression = GpuCbrt(child)
984a1180,1181
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuHypot(lhs, rhs)
996c1193
<               if (precision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (precision > DType.DECIMAL128_MAX_PRECISION) {
1003a1201,1204
>         override def convertToGpu(child: Expression): GpuExpression = {
>           // use Spark `Floor.dataType` to keep consistent between Spark versions.
>           GpuFloor(child, a.dataType)
>         }
1015c1216
<               if (precision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (precision > DType.DECIMAL128_MAX_PRECISION) {
1022a1224,1227
>         override def convertToGpu(child: Expression): GpuExpression = {
>           // use Spark `Ceil.dataType` to keep consistent between Spark versions.
>           GpuCeil(child, a.dataType)
>         }
1028a1234
>         override def convertToGpu(child: Expression): GpuExpression = GpuNot(child)
1037a1244
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNull(child)
1046a1254
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNotNull(child)
1052a1261
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNan(child)
1057a1267
>         override def convertToGpu(child: Expression): GpuExpression = GpuRint(child)
1063a1274
>         override def convertToGpu(child: Expression): GpuExpression = GpuBitwiseNot(child)
1072a1284,1285
>         def convertToGpu(): GpuExpression =
>           GpuAtLeastNNonNulls(a.n, childExprs.map(_.convertToGpu()))
1081a1295,1296
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateAdd(lhs, rhs)
1090a1306,1307
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateSub(lhs, rhs)
1097a1315,1316
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuNaNvl(lhs, rhs)
1104a1324,1325
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftLeft(lhs, rhs)
1111a1333,1334
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftRight(lhs, rhs)
1118a1342,1343
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftRightUnsigned(lhs, rhs)
1126a1352,1353
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseAnd(lhs, rhs)
1134a1362,1363
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseOr(lhs, rhs)
1142a1372,1373
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseXor(lhs, rhs)
1154a1386
>         override def convertToGpu(): GpuExpression = GpuCoalesce(childExprs.map(_.convertToGpu()))
1163a1396
>         override def convertToGpu(): GpuExpression = GpuLeast(childExprs.map(_.convertToGpu()))
1172a1406
>         override def convertToGpu(): GpuExpression = GpuGreatest(childExprs.map(_.convertToGpu()))
1177a1412,1418
>         override def convertToGpu(child: Expression): GpuExpression = GpuAtan(child)
>       }),
>     expr[Atanh](
>       "Inverse hyperbolic tangent",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Atanh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression = GpuAtanh(child)
1179d1419
<     // Atanh is not supported in spark 2.x
1183a1424
>         override def convertToGpu(child: Expression): GpuExpression = GpuCos(child)
1188a1430
>         override def convertToGpu(child: Expression): GpuExpression = GpuExp(child)
1193a1436
>         override def convertToGpu(child: Expression): GpuExpression = GpuExpm1(child)
1199a1443
>         override def convertToGpu(child: Expression): GpuExpression = GpuInitCap(child)
1204a1449
>         override def convertToGpu(child: Expression): GpuExpression = GpuLog(child)
1209a1455,1459
>         override def convertToGpu(child: Expression): GpuExpression = {
>           // No need for overflow checking on the GpuAdd in Double as Double handles overflow
>           // the same in all modes.
>           GpuLog(GpuAdd(child, GpuLiteral(1d, DataTypes.DoubleType), false))
>         }
1214a1465,1466
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuLogarithm(child, GpuLiteral(2d, DataTypes.DoubleType))
1219a1472,1473
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuLogarithm(child, GpuLiteral(10d, DataTypes.DoubleType))
1226a1481,1483
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           // the order of the parameters is transposed intentionally
>           GpuLogarithm(rhs, lhs)
1231a1489
>         override def convertToGpu(child: Expression): GpuExpression = GpuSin(child)
1236a1495
>         override def convertToGpu(child: Expression): GpuExpression = GpuSinh(child)
1241a1501
>         override def convertToGpu(child: Expression): GpuExpression = GpuCosh(child)
1246a1507
>         override def convertToGpu(child: Expression): GpuExpression = GpuCot(child)
1251a1513
>         override def convertToGpu(child: Expression): GpuExpression = GpuTanh(child)
1256a1519,1537
>         override def convertToGpu(child: Expression): GpuExpression = GpuTan(child)
>       }),
>     expr[NormalizeNaNAndZero](
>       "Normalize NaN and zero",
>       ExprChecks.unaryProjectInputMatchesOutput(
>         TypeSig.DOUBLE + TypeSig.FLOAT,
>         TypeSig.DOUBLE + TypeSig.FLOAT),
>       (a, conf, p, r) => new UnaryExprMeta[NormalizeNaNAndZero](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuNormalizeNaNAndZero(child)
>       }),
>     expr[KnownFloatingPointNormalized](
>       "Tag to prevent redundant normalization",
>       ExprChecks.unaryProjectInputMatchesOutput(
>         TypeSig.DOUBLE + TypeSig.FLOAT,
>         TypeSig.DOUBLE + TypeSig.FLOAT),
>       (a, conf, p, r) => new UnaryExprMeta[KnownFloatingPointNormalized](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuKnownFloatingPointNormalized(child)
1258,1259d1538
<     // NormalizeNaNAndZero is not supported in spark 2.x
<     // KnownFloatingPointNormalized is not supported in spark 2.x
1265a1545,1546
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuKnownNotNull(child)
1272a1554,1556
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuDateDiff(lhs, rhs)
>         }
1290a1575,1576
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuTimeAdd(lhs, rhs)
1292c1578,1598
<     // DateAddInterval is not supported in spark 2.x
---
>     expr[DateAddInterval](
>       "Adds interval to date",
>       ExprChecks.binaryProject(TypeSig.DATE, TypeSig.DATE,
>         ("start", TypeSig.DATE, TypeSig.DATE),
>         ("interval", TypeSig.lit(TypeEnum.CALENDAR)
>           .withPsNote(TypeEnum.CALENDAR, "month intervals are not supported"),
>           TypeSig.CALENDAR)),
>       (dateAddInterval, conf, p, r) =>
>         new BinaryExprMeta[DateAddInterval](dateAddInterval, conf, p, r) {
>           override def tagExprForGpu(): Unit = {
>             GpuOverrides.extractLit(dateAddInterval.interval).foreach { lit =>
>               val intvl = lit.value.asInstanceOf[CalendarInterval]
>               if (intvl.months != 0) {
>                 willNotWorkOnGpu("interval months isn't supported")
>               }
>             }
>           }
> 
>           override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>             GpuDateAddInterval(lhs, rhs)
>         }),
1300a1607,1608
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateFormatClass(lhs, rhs, strfFormat)
1312a1621,1628
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           if (conf.isImprovedTimestampOpsEnabled) {
>             // passing the already converted strf string for a little optimization
>             GpuToUnixTimestampImproved(lhs, rhs, sparkFormat, strfFormat)
>           } else {
>             GpuToUnixTimestamp(lhs, rhs, sparkFormat, strfFormat)
>           }
>         }
1323a1640,1647
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           if (conf.isImprovedTimestampOpsEnabled) {
>             // passing the already converted strf string for a little optimization
>             GpuUnixTimestampImproved(lhs, rhs, sparkFormat, strfFormat)
>           } else {
>             GpuUnixTimestamp(lhs, rhs, sparkFormat, strfFormat)
>           }
>         }
1330a1655
>         override def convertToGpu(expr: Expression): GpuExpression = GpuHour(expr)
1336a1662,1664
> 
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuMinute(expr)
1342a1671,1673
> 
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuSecond(expr)
1348a1680,1681
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuWeekDay(expr)
1354a1688,1689
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuDayOfWeek(expr)
1359a1695,1696
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuLastDay(expr)
1368a1706,1708
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           // passing the already converted strf string for a little optimization
>           GpuFromUnixTime(lhs, rhs, strfFormat)
1393a1734,1735
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuPmod(lhs, rhs)
1406c1748
<         private val ansiEnabled = false
---
>         private val ansiEnabled = SQLConf.get.ansiEnabled
1408a1751,1753
>           if (ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkInAst("AST Addition does not support ANSI mode.")
>           }
1410a1756,1757
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuAdd(lhs, rhs, failOnError = ansiEnabled)
1423c1770
<         private val ansiEnabled = false
---
>         private val ansiEnabled = SQLConf.get.ansiEnabled
1425a1773,1775
>           if (ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkInAst("AST Subtraction does not support ANSI mode.")
>           }
1427a1778,1779
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuSubtract(lhs, rhs, ansiEnabled)
1440a1793,1795
>           if (SQLConf.get.ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkOnGpu("GPU Multiplication does not support ANSI mode")
>           }
1442a1798,1805
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           a.dataType match {
>             case _: DecimalType => throw new IllegalStateException(
>               "Decimal Multiply should be converted in CheckOverflow")
>             case _ =>
>               GpuMultiply(lhs, rhs)
>           }
>         }
1449a1813,1814
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuAnd(lhs, rhs)
1456a1822,1823
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuOr(lhs, rhs)
1468a1836,1837
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEqualNullSafe(lhs, rhs)
1481a1851,1852
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEqualTo(lhs, rhs)
1494a1866,1867
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGreaterThan(lhs, rhs)
1507a1881,1882
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGreaterThanOrEqual(lhs, rhs)
1527a1903,1904
>         override def convertToGpu(): GpuExpression =
>           GpuInSet(childExprs.head.convertToGpu(), in.list.asInstanceOf[Seq[Literal]].map(_.value))
1538a1916,1917
>         override def convertToGpu(): GpuExpression =
>           GpuInSet(childExprs.head.convertToGpu(), in.hset.toSeq)
1551a1931,1932
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLessThan(lhs, rhs)
1564a1946,1947
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLessThanOrEqual(lhs, rhs)
1569a1953,1964
>         override def convertToGpu(): GpuExpression = {
>           val branches = childExprs.grouped(2).flatMap {
>             case Seq(cond, value) => Some((cond.convertToGpu(), value.convertToGpu()))
>             case Seq(_) => None
>           }.toArray.toSeq  // force materialization to make the seq serializable
>           val elseValue = if (childExprs.size % 2 != 0) {
>             Some(childExprs.last.convertToGpu())
>           } else {
>             None
>           }
>           GpuCaseWhen(branches, elseValue)
>         }
1586a1982,1985
>         override def convertToGpu(): GpuExpression = {
>           val Seq(boolExpr, trueExpr, falseExpr) = childExprs.map(_.convertToGpu())
>           GpuIf(boolExpr, trueExpr, falseExpr)
>         }
1594a1994,1995
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuPow(lhs, rhs)
1605a2007,2026
>         // Division of Decimal types is a little odd. To work around some issues with
>         // what Spark does the tagging/checks are in CheckOverflow instead of here.
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           a.dataType match {
>             case _: DecimalType =>
>               throw new IllegalStateException("Internal Error: Decimal Divide operations " +
>                   "should be converted to the GPU in the CheckOverflow rule")
>             case _ =>
>               GpuDivide(lhs, rhs)
>           }
>       }),
>     expr[IntegralDivide](
>       "Division with a integer result",
>       ExprChecks.binaryProject(
>         TypeSig.LONG, TypeSig.LONG,
>         ("lhs", TypeSig.LONG + TypeSig.DECIMAL_128, TypeSig.LONG + TypeSig.DECIMAL_128),
>         ("rhs", TypeSig.LONG + TypeSig.DECIMAL_128, TypeSig.LONG + TypeSig.DECIMAL_128)),
>       (a, conf, p, r) => new BinaryExprMeta[IntegralDivide](a, conf, p, r) {
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuIntegralDivide(lhs, rhs)
1607d2027
<     // IntegralDivide is not supported in spark 2.x
1614a2035,2036
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuRemainder(lhs, rhs)
1629c2051,2052
<         // No filter parameter in 2.x
---
>         private val filter: Option[BaseExprMeta[_]] =
>           a.filter.map(GpuOverrides.wrapExpr(_, conf, Some(this)))
1633c2056,2071
<           childrenExprMeta
---
>           childrenExprMeta ++ filter.toSeq
> 
>         override def convertToGpu(): GpuExpression = {
>           // handle the case AggregateExpression has the resultIds parameter where its
>           // Seq[ExprIds] instead of single ExprId.
>           val resultId = try {
>             val resultMethod = a.getClass.getMethod("resultId")
>             resultMethod.invoke(a).asInstanceOf[ExprId]
>           } catch {
>             case _: Exception =>
>               val resultMethod = a.getClass.getMethod("resultIds")
>               resultMethod.invoke(a).asInstanceOf[Seq[ExprId]].head
>           }
>           GpuAggregateExpression(childExprs.head.convertToGpu().asInstanceOf[GpuAggregateFunction],
>             a.mode, a.isDistinct, filter.map(_.convertToGpu()), resultId)
>         }
1656a2095,2097
>         // One of the few expressions that are not replaced with a GPU version
>         override def convertToGpu(): Expression =
>           sortOrder.withNewChildren(childExprs.map(_.convertToGpu()))
1678a2120,2126
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val Seq(pivotColumn, valueColumn) = childExprs
>           GpuPivotFirst(pivotColumn, valueColumn, pivot.pivotColumnValues)
>         }
> 
>         // Pivot does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1691a2140,2141
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCount(childExprs)
1712a2163,2167
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuMax(childExprs.head)
> 
>         // Max does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1733a2189,2193
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuMin(childExprs.head)
> 
>         // Min does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1746a2207,2227
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuSum(childExprs.head, a.dataType)
>       }),
>     expr[NthValue](
>       "nth window operator",
>       ExprChecks.windowOnly(
>         (TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP +
>             TypeSig.commonCudfTypes + TypeSig.NULL + TypeSig.DECIMAL_128).nested(),
>         TypeSig.all,
>         Seq(ParamCheck("input",
>           (TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP +
>               TypeSig.commonCudfTypes + TypeSig.NULL + TypeSig.DECIMAL_128).nested(),
>           TypeSig.all),
>           ParamCheck("offset", TypeSig.lit(TypeEnum.INT), TypeSig.lit(TypeEnum.INT)))
>       ),
>       (a, conf, p, r) => new AggExprMeta[NthValue](a, conf, p, r) {
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuNthValue(childExprs.head, a.offset, a.ignoreNulls)
> 
>         // nth does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1748d2228
<     // Spark 2.x doesn't have NthValue
1760a2241,2245
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuFirst(childExprs.head, a.ignoreNulls)
> 
>         // First does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1763c2248
<       "last aggregate operator",
---
>     "last aggregate operator",
1773a2259,2263
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuLast(childExprs.head, a.ignoreNulls)
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1792a2283,2284
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBRound(lhs, rhs, a.dataType)
1811a2304,2305
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuRound(lhs, rhs, a.dataType)
1833a2328,2332
> 
>         override def convertToGpu(): GpuExpression =
>           GpuPythonUDF(a.name, a.func, a.dataType,
>             childExprs.map(_.convertToGpu()),
>             a.evalType, a.udfDeterministic, a.resultId)
1842a2342
>         override def convertToGpu(child: Expression): GpuExpression = GpuRand(child)
1847a2348
>         override def convertToGpu(): GpuExpression = GpuSparkPartitionID()
1852a2354
>         override def convertToGpu(): GpuExpression = GpuMonotonicallyIncreasingID()
1857a2360
>         override def convertToGpu(): GpuExpression = GpuInputFileName()
1862a2366
>         override def convertToGpu(): GpuExpression = GpuInputFileBlockStart()
1867a2372
>         override def convertToGpu(): GpuExpression = GpuInputFileBlockLength()
1873a2379
>         override def convertToGpu(child: Expression): GpuExpression = GpuMd5(child)
1878a2385
>         override def convertToGpu(child: Expression): GpuExpression = GpuUpper(child)
1884a2392
>         override def convertToGpu(child: Expression): GpuExpression = GpuLower(child)
1901a2410,2414
>         override def convertToGpu(
>             str: Expression,
>             width: Expression,
>             pad: Expression): GpuExpression =
>           GpuStringLPad(str, width, pad)
1917a2431,2435
>         override def convertToGpu(
>             str: Expression,
>             width: Expression,
>             pad: Expression): GpuExpression =
>           GpuStringRPad(str, width, pad)
1938a2457,2458
>         override def convertToGpu(arr: Expression): GpuExpression =
>           GpuGetStructField(arr, expr.ordinal, expr.name)
1950a2471,2472
>         override def convertToGpu(arr: Expression, ordinal: Expression): GpuExpression =
>           GpuGetArrayItem(arr, ordinal, in.failOnError)
1972c2494
<         "Returns value for the given key in value if column is map",
---
>         "Returns value for the given key in value if column is map.",
2017a2540,2542
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuElementAt(lhs, rhs, failOnError = in.failOnError)
>         }
2028a2554,2555
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapKeys(child)
2039a2567,2582
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapValues(child)
>       }),
>     expr[MapEntries](
>       "Returns an unordered array of all entries in the given map",
>       ExprChecks.unaryProject(
>         // Technically the return type is an array of struct, but we cannot really express that
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>             TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP + TypeSig.BINARY),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>             TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP + TypeSig.BINARY),
>         TypeSig.MAP.nested(TypeSig.all)),
>       (in, conf, p, r) => new UnaryExprMeta[MapEntries](in, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapEntries(child)
2041d2583
<     // MapEntries is not supported in spark 2.x
2056a2599,2600
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuArrayMin(child)
2065a2610,2611
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuArrayMax(child)
2076a2623,2624
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuArrayRepeat(lhs, rhs)
2082a2631,2632
>         override def convertToGpu(): GpuExpression =
>           GpuCreateNamedStruct(childExprs.map(_.convertToGpu()))
2098a2649,2650
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuArrayContains(lhs, rhs)
2111c2663,2667
<       }),
---
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuSortArray(lhs, rhs)
>         }
>       }
>     ),
2136a2693,2694
>         override def convertToGpu(): GpuExpression =
>           GpuCreateArray(childExprs.map(_.convertToGpu()), wrapped.useStringTypeWhenEmpty)
2152a2711,2717
>         override def convertToGpu(): GpuExpression = {
>           val func = childExprs.head
>           val args = childExprs.tail
>           GpuLambdaFunction(func.convertToGpu(),
>             args.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>             in.hidden)
>         }
2160a2726,2728
>         override def convertToGpu(): GpuExpression = {
>           GpuNamedLambdaVariable(in.name, in.dataType, in.nullable, in.exprId)
>         }
2177a2746,2748
>         override def convertToGpu(): GpuExpression = {
>           GpuArrayTransform(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
2188a2760,2766
>         override def convertToGpu(): GpuExpression = {
>           GpuArrayExists(
>             childExprs.head.convertToGpu(),
>             childExprs(1).convertToGpu(),
>             SQLConf.get.getConf(SQLConf.LEGACY_ARRAY_EXISTS_FOLLOWS_THREE_VALUED_LOGIC)
>           )
>         }
2202a2781,2783
>         override def convertToGpu(): GpuExpression = {
>           GpuArraysZip(childExprs.map(_.convertToGpu()))
>         }
2216a2798,2800
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuArrayExcept(lhs, rhs)
>         }
2235a2820,2843
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuArrayIntersect(lhs, rhs)
>         }
>       }
>     ).incompat("the GPU implementation treats -0.0 and 0.0 as equal, but the CPU " +
>         "implementation currently does not (see SPARK-39845). Also, Apache Spark " +
>         "3.1.3 fixed issue SPARK-36741 where NaNs in these set like operators were " +
>         "not treated as being equal. We have chosen to break with compatibility for " +
>         "the older versions of Spark in this instance and handle NaNs the same as 3.1.3+"),
>     expr[ArrayUnion](
>       "Returns an array of the elements in the union of array1 and array2, without duplicates.",
>       ExprChecks.binaryProject(
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         ("array1",
>             TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL),
>             TypeSig.ARRAY.nested(TypeSig.all)),
>         ("array2",
>             TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL),
>             TypeSig.ARRAY.nested(TypeSig.all))),
>       (in, conf, p, r) => new BinaryExprMeta[ArrayUnion](in, conf, p, r) {
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuArrayUnion(lhs, rhs)
>         }
2242d2849
<     // ArrayUnion is not supported in Spark 2.x
2254a2862,2864
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuArraysOverlap(lhs, rhs)
>         }
2276a2887,2888
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuArrayRemove(lhs, rhs)
2279,2281c2891,2952
<     // TransformKeys is not supported in Spark 2.x
<     // TransformValues is not supported in Spark 2.x
<     // spark 2.x doesn't have MapFilter
---
>     expr[TransformKeys](
>       "Transform keys in a map using a transform function",
>       ExprChecks.projectOnly(TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>           TypeSig.NULL + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all),
>         Seq(
>           ParamCheck("argument",
>             TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>             TypeSig.MAP.nested(TypeSig.all)),
>           ParamCheck("function",
>             // We need to be able to check for duplicate keys (equality)
>             TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL,
>             TypeSig.all - TypeSig.MAP.nested()))),
>       (in, conf, p, r) => new ExprMeta[TransformKeys](in, conf, p, r) {
>         override def tagExprForGpu(): Unit = {
>           SQLConf.get.getConf(SQLConf.MAP_KEY_DEDUP_POLICY).toUpperCase match {
>             case "EXCEPTION"| "LAST_WIN" => // Good we can support this
>             case other =>
>               willNotWorkOnGpu(s"$other is not supported for config setting" +
>                   s" ${SQLConf.MAP_KEY_DEDUP_POLICY.key}")
>           }
>         }
>         override def convertToGpu(): GpuExpression = {
>           GpuTransformKeys(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
>       }),
>     expr[TransformValues](
>       "Transform values in a map using a transform function",
>       ExprChecks.projectOnly(TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>           TypeSig.NULL + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all),
>         Seq(
>           ParamCheck("argument",
>             TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>             TypeSig.MAP.nested(TypeSig.all)),
>           ParamCheck("function",
>             (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP).nested(),
>             TypeSig.all))),
>       (in, conf, p, r) => new ExprMeta[TransformValues](in, conf, p, r) {
>         override def convertToGpu(): GpuExpression = {
>           GpuTransformValues(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
>       }),
>     expr[MapFilter](
>       "Filters entries in a map using the function",
>       ExprChecks.projectOnly(TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>           TypeSig.NULL + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all),
>         Seq(
>           ParamCheck("argument",
>             TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>             TypeSig.MAP.nested(TypeSig.all)),
>           ParamCheck("function", TypeSig.BOOLEAN, TypeSig.BOOLEAN))),
>       (in, conf, p, r) => new ExprMeta[MapFilter](in, conf, p, r) {
>         override def convertToGpu(): GpuExpression = {
>           GpuMapFilter(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
>       }),
2288a2960,2964
>         override def convertToGpu(
>             val0: Expression,
>             val1: Expression,
>             val2: Expression): GpuExpression =
>           GpuStringLocate(val0, val1, val2)
2294c2970
<           ParamCheck("substr", TypeSig.lit(TypeEnum.STRING), TypeSig.STRING))),
---
>             ParamCheck("substr", TypeSig.lit(TypeEnum.STRING), TypeSig.STRING))),
2295a2972,2975
>         override def convertToGpu(
>             str: Expression,
>             substr: Expression): GpuExpression =
>           GpuStringInstr(str, substr)
2303a2984,2988
>         override def convertToGpu(
>             column: Expression,
>             position: Expression,
>             length: Expression): GpuExpression =
>           GpuSubstring(column, position, length)
2319a3005,3007
>         override def convertToGpu(
>             input: Expression,
>             repeatTimes: Expression): GpuExpression = GpuStringRepeat(input, repeatTimes)
2327a3016,3020
>         override def convertToGpu(
>             column: Expression,
>             target: Expression,
>             replace: Expression): GpuExpression =
>           GpuStringReplace(column, target, replace)
2335a3029,3032
>         override def convertToGpu(
>             column: Expression,
>             target: Option[Expression] = None): GpuExpression =
>           GpuStringTrim(column, target)
2344a3042,3045
>           override def convertToGpu(
>             column: Expression,
>             target: Option[Expression] = None): GpuExpression =
>             GpuStringTrimLeft(column, target)
2353a3055,3058
>           override def convertToGpu(
>               column: Expression,
>               target: Option[Expression] = None): GpuExpression =
>             GpuStringTrimRight(column, target)
2360a3066,3067
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuStartsWith(lhs, rhs)
2367a3075,3076
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEndsWith(lhs, rhs)
2380a3090
>         override def convertToGpu(child: Seq[Expression]): GpuExpression = GpuConcat(child)
2391a3102
>         override def convertToGpu(child: Seq[Expression]): GpuExpression = GpuMapConcat(child)
2408a3120,3121
>         override final def convertToGpu(): GpuExpression =
>           GpuConcatWs(childExprs.map(_.convertToGpu()))
2418a3132,3133
>         def convertToGpu(): GpuExpression =
>           GpuMurmur3Hash(childExprs.map(_.convertToGpu()), a.seed)
2425a3141,3142
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuContains(lhs, rhs)
2432a3150,3151
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLike(lhs, rhs, a.escapeChar)
2458c3177,3184
<     // RegExpExtractAll is not supported in Spark 2.x
---
>     expr[RegExpExtractAll](
>       "Extract all strings matching a regular expression corresponding to the regex group index",
>       ExprChecks.projectOnly(TypeSig.ARRAY.nested(TypeSig.STRING),
>         TypeSig.ARRAY.nested(TypeSig.STRING),
>         Seq(ParamCheck("str", TypeSig.STRING, TypeSig.STRING),
>           ParamCheck("regexp", TypeSig.lit(TypeEnum.STRING), TypeSig.STRING),
>           ParamCheck("idx", TypeSig.lit(TypeEnum.INT), TypeSig.INT))),
>       (a, conf, p, r) => new GpuRegExpExtractAllMeta(a, conf, p, r)),
2463a3190
>         override def convertToGpu(child: Expression): GpuExpression = GpuLength(child)
2471a3199,3200
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuSize(child, a.legacySizeOfNull)
2478a3208
>         override def convertToGpu(child: Expression): GpuExpression = GpuUnscaledValue(child)
2484a3215,3216
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMakeDecimal(child, a.precision, a.scale, a.nullOnOverflow)
2498a3231
>         override def convertToGpu(): GpuExpression = GpuExplode(childExprs.head.convertToGpu())
2512a3246
>         override def convertToGpu(): GpuExpression = GpuPosExplode(childExprs.head.convertToGpu())
2525,2526c3259,3339
<      }),
<     // spark 2.x CollectList and CollectSet use TypedImperative which isn't in 2.x
---
>         override def convertToGpu(childExpr: Seq[Expression]): GpuExpression =
>           GpuReplicateRows(childExpr)
>       }),
>     expr[CollectList](
>       "Collect a list of non-unique elements, not supported in reduction",
>       ExprChecks.fullAgg(
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>             TypeSig.NULL + TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         Seq(ParamCheck("input",
>           (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>               TypeSig.NULL + TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP).nested(),
>           TypeSig.all))),
>       (c, conf, p, r) => new TypedImperativeAggExprMeta[CollectList](c, conf, p, r) {
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCollectList(childExprs.head, c.mutableAggBufferOffset, c.inputAggBufferOffset)
> 
>         override def aggBufferAttribute: AttributeReference = {
>           val aggBuffer = c.aggBufferAttributes.head
>           aggBuffer.copy(dataType = c.dataType)(aggBuffer.exprId, aggBuffer.qualifier)
>         }
> 
>         override def createCpuToGpuBufferConverter(): CpuToGpuAggregateBufferConverter =
>           new CpuToGpuCollectBufferConverter(c.child.dataType)
> 
>         override def createGpuToCpuBufferConverter(): GpuToCpuAggregateBufferConverter =
>           new GpuToCpuCollectBufferConverter()
> 
>         override val supportBufferConversion: Boolean = true
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
>       }),
>     expr[CollectSet](
>       "Collect a set of unique elements, not supported in reduction",
>       ExprChecks.fullAgg(
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>             TypeSig.NULL + TypeSig.STRUCT + TypeSig.ARRAY),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         Seq(ParamCheck("input",
>           (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>               TypeSig.NULL + 
>               TypeSig.STRUCT +
>               TypeSig.ARRAY).nested(),
>           TypeSig.all))),
>       (c, conf, p, r) => new TypedImperativeAggExprMeta[CollectSet](c, conf, p, r) {
> 
>         private def isNestedArrayType(dt: DataType): Boolean = {
>           dt match {
>             case StructType(fields) =>
>               fields.exists { field =>
>                 field.dataType match {
>                   case sdt: StructType => isNestedArrayType(sdt)
>                   case _: ArrayType => true
>                   case _ => false
>                 }
>               }
>             case ArrayType(et, _) => et.isInstanceOf[ArrayType] || et.isInstanceOf[StructType]
>             case _ => false
>           }
>         }
> 
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCollectSet(childExprs.head, c.mutableAggBufferOffset, c.inputAggBufferOffset)
> 
>         override def aggBufferAttribute: AttributeReference = {
>           val aggBuffer = c.aggBufferAttributes.head
>           aggBuffer.copy(dataType = c.dataType)(aggBuffer.exprId, aggBuffer.qualifier)
>         }
> 
>         override def createCpuToGpuBufferConverter(): CpuToGpuAggregateBufferConverter =
>           new CpuToGpuCollectBufferConverter(c.child.dataType)
> 
>         override def createGpuToCpuBufferConverter(): GpuToCpuAggregateBufferConverter =
>           new GpuToCpuCollectBufferConverter()
> 
>         override val supportBufferConversion: Boolean = true
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
>       }),
2532a3346,3349
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = SQLConf.get.legacyStatisticalAggregate
>           GpuStddevPop(childExprs.head, !legacyStatisticalAggregate)
>         }
2540a3358,3361
>           override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>             val legacyStatisticalAggregate = SQLConf.get.legacyStatisticalAggregate
>             GpuStddevSamp(childExprs.head, !legacyStatisticalAggregate)
>           }
2547a3369,3372
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = SQLConf.get.legacyStatisticalAggregate
>           GpuVariancePop(childExprs.head, !legacyStatisticalAggregate)
>         }
2554a3380,3383
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = SQLConf.get.legacyStatisticalAggregate
>           GpuVarianceSamp(childExprs.head, !legacyStatisticalAggregate)
>         }
2594a3424,3429
> 
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuApproximatePercentile(childExprs.head,
>               childExprs(1).asInstanceOf[GpuLiteral],
>               childExprs(2).asInstanceOf[GpuLiteral])
> 
2609a3445,3446
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGetJsonObject(lhs, rhs)
2621c3458,3460
<       }),
---
>           override def convertToGpu(): GpuExpression = GpuScalarSubquery(a.plan, a.exprId)
>         }
>     ),
2626c3465,3467
<       }),
---
>         override def convertToGpu(): GpuExpression = GpuCreateMap(childExprs.map(_.convertToGpu()))
>       }
>     ),
2644a3486
>         override def convertToGpu(child: Expression): GpuExpression = GpuBitLength(child)
2651a3494
>         override def convertToGpu(child: Expression): GpuExpression = GpuOctetLength(child)
2665,2667c3508,3518
<       )
<     // Spark 2.x doesn't have RaiseError or ansicast
<   ).map(r => (r.getClassFor.asSubclass(classOf[Expression]), r)).toMap
---
>     ),
>     expr[RaiseError](
>       "Throw an exception",
>       ExprChecks.unaryProject(
>         TypeSig.NULL, TypeSig.NULL,
>         TypeSig.STRING, TypeSig.STRING),
>       (a, conf, p, r) => new UnaryExprMeta[RaiseError](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression = GpuRaiseError(child)
>       }),
>     SparkShimImpl.ansiCastRule
>   ).collect { case r if r != null => (r.getClassFor.asSubclass(classOf[Expression]), r)}.toMap
2670d3520
<   // Not include ZOrderRules.exprs
2673c3523,3570
<         DecimalArithmeticOverrides.exprs ++ ShimGpuOverrides.shimExpressions
---
>         ZOrderRules.exprs ++ DecimalArithmeticOverrides.exprs ++ SparkShimImpl.getExprs
> 
>   def wrapScan[INPUT <: Scan](
>       scan: INPUT,
>       conf: RapidsConf,
>       parent: Option[RapidsMeta[_, _, _]]): ScanMeta[INPUT] =
>     scans.get(scan.getClass)
>       .map(r => r.wrap(scan, conf, parent, r).asInstanceOf[ScanMeta[INPUT]])
>       .getOrElse(new RuleNotFoundScanMeta(scan, conf, parent))
> 
>   val commonScans: Map[Class[_ <: Scan], ScanRule[_ <: Scan]] = Seq(
>     GpuOverrides.scan[CSVScan](
>       "CSV parsing",
>       (a, conf, p, r) => new ScanMeta[CSVScan](a, conf, p, r) {
>         override def tagSelfForGpu(): Unit = GpuCSVScan.tagSupport(this)
> 
>         override def convertToGpu(): Scan =
>           GpuCSVScan(a.sparkSession,
>             a.fileIndex,
>             a.dataSchema,
>             a.readDataSchema,
>             a.readPartitionSchema,
>             a.options,
>             a.partitionFilters,
>             a.dataFilters,
>             conf.maxReadBatchSizeRows,
>             conf.maxReadBatchSizeBytes)
>       }),
>     GpuOverrides.scan[JsonScan](
>       "Json parsing",
>       (a, conf, p, r) => new ScanMeta[JsonScan](a, conf, p, r) {
>         override def tagSelfForGpu(): Unit = GpuJsonScan.tagSupport(this)
> 
>         override def convertToGpu(): Scan =
>           GpuJsonScan(a.sparkSession,
>             a.fileIndex,
>             a.dataSchema,
>             a.readDataSchema,
>             a.readPartitionSchema,
>             a.options,
>             a.partitionFilters,
>             a.dataFilters,
>             conf.maxReadBatchSizeRows,
>             conf.maxReadBatchSizeBytes)
>       })).map(r => (r.getClassFor.asSubclass(classOf[Scan]), r)).toMap
> 
>   val scans: Map[Class[_ <: Scan], ScanRule[_ <: Scan]] =
>     commonScans ++ SparkShimImpl.getScans ++ ExternalSource.getScans
2678c3575
<       parent: Option[RapidsMeta[_, _]]): PartMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): PartMeta[INPUT] =
2693a3591,3592
>         override def convertToGpu(): GpuPartitioning =
>           GpuHashPartitioning(childExprs.map(_.convertToGpu()), hp.numPartitions)
2703a3603,3610
>         override def convertToGpu(): GpuPartitioning = {
>           if (rp.numPartitions > 1) {
>             val gpuOrdering = childExprs.map(_.convertToGpu()).asInstanceOf[Seq[SortOrder]]
>             GpuRangePartitioning(gpuOrdering, rp.numPartitions)
>           } else {
>             GpuSinglePartitioning
>           }
>         }
2708a3616,3618
>         override def convertToGpu(): GpuPartitioning = {
>           GpuRoundRobinPartitioning(rrp.numPartitions)
>         }
2713a3624
>         override def convertToGpu(): GpuPartitioning = GpuSinglePartitioning
2720c3631
<       parent: Option[RapidsMeta[_, _]]): DataWritingCommandMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): DataWritingCommandMeta[INPUT] =
2742c3653
<       parent: Option[RapidsMeta[_, _]]): SparkPlanMeta[INPUT]  =
---
>       parent: Option[RapidsMeta[_, _, _]]): SparkPlanMeta[INPUT]  =
2766c3677,3695
<       (range, conf, p, r) => new SparkPlanMeta[RangeExec](range, conf, p, r) {
---
>       (range, conf, p, r) => {
>         new SparkPlanMeta[RangeExec](range, conf, p, r) {
>           override def convertToGpu(): GpuExec =
>             GpuRangeExec(range.start, range.end, range.step, range.numSlices, range.output,
>               conf.gpuTargetBatchSizeBytes)
>         }
>       }),
>     exec[BatchScanExec](
>       "The backend for most file input",
>       ExecChecks(
>         (TypeSig.commonCudfTypes + TypeSig.STRUCT + TypeSig.MAP + TypeSig.ARRAY +
>           TypeSig.DECIMAL_128 + TypeSig.BINARY).nested(),
>         TypeSig.all),
>       (p, conf, parent, r) => new SparkPlanMeta[BatchScanExec](p, conf, parent, r) {
>         override val childScans: scala.Seq[ScanMeta[_]] =
>           Seq(GpuOverrides.wrapScan(p.scan, conf, Some(this)))
> 
>         override def convertToGpu(): GpuExec =
>           GpuBatchScanExec(p.output, childScans.head.convertToGpu())
2773a3703,3704
>         override def convertToGpu(): GpuExec =
>           GpuCoalesceExec(coalesce.numPartitions, childPlans.head.convertIfNeeded())
2781a3713
>           TypeSig.BINARY.withPsNote(TypeEnum.BINARY, "Only supported for Parquet") +
2787a3720,3722
>         override def convertToGpu(): GpuExec =
>           GpuDataWritingCommandExec(childDataWriteCmds.head.convertToGpu(),
>             childPlans.head.convertIfNeeded())
2802a3738,3762
>           override def convertToGpu(): GpuExec = {
>             // To avoid metrics confusion we split a single stage up into multiple parts but only
>             // if there are multiple partitions to make it worth doing.
>             val so = sortOrder.map(_.convertToGpu().asInstanceOf[SortOrder])
>             if (takeExec.child.outputPartitioning.numPartitions == 1) {
>               GpuTopN(takeExec.limit, so,
>                 projectList.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>                 childPlans.head.convertIfNeeded())(takeExec.sortOrder)
>             } else {
>               GpuTopN(
>                 takeExec.limit,
>                 so,
>                 projectList.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>                 GpuShuffleExchangeExec(
>                   GpuSinglePartitioning,
>                   GpuTopN(
>                     takeExec.limit,
>                     so,
>                     takeExec.child.output,
>                     childPlans.head.convertIfNeeded())(takeExec.sortOrder),
>                   ENSURE_REQUIREMENTS
>                 )(SinglePartition)
>               )(takeExec.sortOrder)
>             }
>           }
2810a3771,3772
>           override def convertToGpu(): GpuExec =
>             GpuLocalLimitExec(localLimitExec.limit, childPlans.head.convertIfNeeded())
2818a3781,3782
>           override def convertToGpu(): GpuExec =
>             GpuGlobalLimitExec(globalLimitExec.limit, childPlans.head.convertIfNeeded(), 0)
2825,2828c3789
<       (collectLimitExec, conf, p, r) =>
<         new SparkPlanMeta[CollectLimitExec](collectLimitExec, conf, p, r) {
<           override val childParts: scala.Seq[PartMeta[_]] =
<             Seq(GpuOverrides.wrapPart(collectLimitExec.outputPartitioning, conf, Some(this)))})
---
>       (collectLimitExec, conf, p, r) => new GpuCollectLimitMeta(collectLimitExec, conf, p, r))
2837a3799,3800
>         override def convertToGpu(): GpuExec =
>           GpuFilterExec(childExprs.head.convertToGpu(), childPlans.head.convertIfNeeded())
2859a3823,3824
>         override def convertToGpu(): GpuExec =
>           GpuUnionExec(childPlans.map(_.convertIfNeeded()))
2890a3856,3866
>         override def convertToGpu(): GpuExec = {
>           val Seq(left, right) = childPlans.map(_.convertIfNeeded())
>           val joinExec = GpuCartesianProductExec(
>             left,
>             right,
>             None,
>             conf.gpuTargetBatchSizeBytes)
>           // The GPU does not yet support conditional joins, so conditions are implemented
>           // as a filter after the join when possible.
>           condition.map(c => GpuFilterExec(c.convertToGpu(), joinExec)).getOrElse(joinExec)
>         }
2903a3880,3895
>     exec[ObjectHashAggregateExec](
>       "The backend for hash based aggregations supporting TypedImperativeAggregate functions",
>       ExecChecks(
>         // note that binary input is allowed here but there are additional checks later on to
>         // check that we have can support binary in the context of aggregate buffer conversions
>         (TypeSig.commonCudfTypes + TypeSig.NULL + TypeSig.DECIMAL_128 +
>           TypeSig.MAP + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.BINARY)
>             .nested()
>             .withPsNote(TypeEnum.BINARY, "only allowed when aggregate buffers can be " +
>               "converted between CPU and GPU")
>             .withPsNote(Seq(TypeEnum.ARRAY, TypeEnum.MAP),
>               "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.STRUCT,
>               "not allowed for grouping expressions if containing Array or Map as child"),
>         TypeSig.all),
>       (agg, conf, p, r) => new GpuObjectHashAggregateExecMeta(agg, conf, p, r)),
2910,2911d3901
<       // SPARK 2.x we can't check for the TypedImperativeAggregate properly so
<       // map/array/struct left off
2914c3904
<             TypeSig.MAP + TypeSig.BINARY)
---
>             TypeSig.MAP + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.BINARY)
2916d3905
<             .withPsNote(TypeEnum.MAP, "not allowed for grouping expressions")
2918c3907,3911
<               "converted between CPU and GPU"),
---
>               "converted between CPU and GPU")
>             .withPsNote(Seq(TypeEnum.ARRAY, TypeEnum.MAP),
>               "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.STRUCT,
>               "not allowed for grouping expressions if containing Array or Map as child"),
2921,2922d3913
<     // SPARK 2.x we can't check for the TypedImperativeAggregate properly so don't say we do the
<     // ObjectHashAggregate
2959c3950,3955
<       (sample, conf, p, r) => new GpuSampleExecMeta(sample, conf, p, r) {}
---
>       (sample, conf, p, r) => new GpuSampleExecMeta(sample, conf, p, r)
>     ),
>     exec[SubqueryBroadcastExec](
>       "Plan to collect and transform the broadcast key values",
>       ExecChecks(TypeSig.all, TypeSig.all),
>       (s, conf, p, r) => new GpuSubqueryBroadcastMeta(s, conf, p, r)
2960a3957
>     SparkShimImpl.aqeShuffleReaderExec,
2979c3976
<             e.output.map(GpuOverrides.wrapExpr(_, conf, Some(this)))
---
>             e.resultAttrs.map(GpuOverrides.wrapExpr(_, conf, Some(this)))
2984a3982,3987
> 
>           override def convertToGpu(): GpuExec =
>             GpuArrowEvalPythonExec(udfs.map(_.convertToGpu()).asInstanceOf[Seq[GpuPythonUDF]],
>               resultAttrs.map(_.convertToGpu()).asInstanceOf[Seq[Attribute]],
>               childPlans.head.convertIfNeeded(),
>               e.evalType)
2986c3989,3995
<     // Spark 2.x doesn't have FlatMapCoGroupsInPandasExec
---
>     exec[FlatMapCoGroupsInPandasExec](
>       "The backend for CoGrouped Aggregation Pandas UDF. Accelerates the data transfer" +
>         " between the Java process and the Python process. It also supports scheduling GPU" +
>         " resources for the Python process when enabled.",
>       ExecChecks(TypeSig.commonCudfTypes, TypeSig.all),
>       (flatCoPy, conf, p, r) => new GpuFlatMapCoGroupsInPandasExecMeta(flatCoPy, conf, p, r))
>         .disabledByDefault("Performance is not ideal with many small groups"),
2993c4002,4008
<     // Spark 2.x doesn't have MapInPandasExec
---
>     exec[MapInPandasExec](
>       "The backend for Map Pandas Iterator UDF. Accelerates the data transfer between the" +
>         " Java process and the Python process. It also supports scheduling GPU resources" +
>         " for the Python process when enabled.",
>       ExecChecks((TypeSig.commonCudfTypes + TypeSig.ARRAY + TypeSig.STRUCT).nested(),
>         TypeSig.all),
>       (mapPy, conf, p, r) => new GpuMapInPandasExecMeta(mapPy, conf, p, r)),
2999,3001c4014,4035
<     // SparkShimImpl.aqeShuffleReaderExec,
<     // SparkShimImpl.neverReplaceShowCurrentNamespaceCommand,
<     neverReplaceExec[ExecutedCommandExec]("Table metadata operation")
---
>     neverReplaceExec[AlterNamespaceSetPropertiesExec]("Namespace metadata operation"),
>     neverReplaceExec[CreateNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[DescribeNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[DropNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[SetCatalogAndNamespaceExec]("Namespace metadata operation"),
>     SparkShimImpl.neverReplaceShowCurrentNamespaceCommand,
>     neverReplaceExec[ShowNamespacesExec]("Namespace metadata operation"),
>     neverReplaceExec[ExecutedCommandExec]("Table metadata operation"),
>     neverReplaceExec[AlterTableExec]("Table metadata operation"),
>     neverReplaceExec[CreateTableExec]("Table metadata operation"),
>     neverReplaceExec[DeleteFromTableExec]("Table metadata operation"),
>     neverReplaceExec[DescribeTableExec]("Table metadata operation"),
>     neverReplaceExec[DropTableExec]("Table metadata operation"),
>     neverReplaceExec[AtomicReplaceTableExec]("Table metadata operation"),
>     neverReplaceExec[RefreshTableExec]("Table metadata operation"),
>     neverReplaceExec[RenameTableExec]("Table metadata operation"),
>     neverReplaceExec[ReplaceTableExec]("Table metadata operation"),
>     neverReplaceExec[ShowTablePropertiesExec]("Table metadata operation"),
>     neverReplaceExec[ShowTablesExec]("Table metadata operation"),
>     neverReplaceExec[AdaptiveSparkPlanExec]("Wrapper for adaptive query plan"),
>     neverReplaceExec[BroadcastQueryStageExec]("Broadcast query stage"),
>     neverReplaceExec[ShuffleQueryStageExec]("Shuffle query stage")
3005c4039
<     commonExecs ++ ShimGpuOverrides.shimExecs ++ GpuHiveOverrides.execs
---
>     commonExecs ++ SparkShimImpl.getExecs ++ GpuHiveOverrides.execs
3008,3010c4042
<     // val key = SQLConf.LEGACY_TIME_PARSER_POLICY.key
<     val key = "2xgone"
<     val policy = SQLConf.get.getConfString(key, "EXCEPTION")
---
>     val policy = SQLConf.get.getConfString(SQLConf.LEGACY_TIME_PARSER_POLICY.key, "EXCEPTION")
3017a4050,4054
>   val preRowToColProjection = TreeNodeTag[Seq[NamedExpression]]("rapids.gpu.preRowToColProcessing")
> 
>   val postColToRowProjection = TreeNodeTag[Seq[NamedExpression]](
>     "rapids.gpu.postColToRowProcessing")
> 
3023a4061,4068
>   private def doConvertPlan(wrap: SparkPlanMeta[SparkPlan], conf: RapidsConf,
>       optimizations: Seq[Optimization]): SparkPlan = {
>     val convertedPlan = wrap.convertIfNeeded()
>     val sparkPlan = addSortsIfNeeded(convertedPlan, conf)
>     GpuOverrides.listeners.foreach(_.optimizedPlan(wrap, sparkPlan, optimizations))
>     sparkPlan
>   }
> 
3026c4071,4119
<    Seq.empty
---
>     if (conf.optimizerEnabled) {
>       // we need to run these rules both before and after CBO because the cost
>       // is impacted by forcing operators onto CPU due to other rules that we have
>       wrap.runAfterTagRules()
>       val optimizer = try {
>         ShimLoader.newOptimizerClass(conf.optimizerClassName)
>       } catch {
>         case e: Exception =>
>           throw new RuntimeException(s"Failed to create optimizer ${conf.optimizerClassName}", e)
>       }
>       optimizer.optimize(conf, wrap)
>     } else {
>       Seq.empty
>     }
>   }
> 
>   private def addSortsIfNeeded(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     plan.transformUp {
>       case operator: SparkPlan =>
>         ensureOrdering(operator, conf)
>     }
>   }
> 
>   // copied from Spark EnsureRequirements but only does the ordering checks and
>   // check to convert any SortExec added to GpuSortExec
>   private def ensureOrdering(operator: SparkPlan, conf: RapidsConf): SparkPlan = {
>     val requiredChildOrderings: Seq[Seq[SortOrder]] = operator.requiredChildOrdering
>     var children: Seq[SparkPlan] = operator.children
>     assert(requiredChildOrderings.length == children.length)
> 
>     // Now that we've performed any necessary shuffles, add sorts to guarantee output orderings:
>     children = children.zip(requiredChildOrderings).map { case (child, requiredOrdering) =>
>       // If child.outputOrdering already satisfies the requiredOrdering, we do not need to sort.
>       if (SortOrder.orderingSatisfies(child.outputOrdering, requiredOrdering)) {
>         child
>       } else {
>         val sort = SortExec(requiredOrdering, global = false, child = child)
>         // just specifically check Sort to see if we can change Sort to GPUSort
>         val sortMeta = new GpuSortMeta(sort, conf, None, new SortDataFromReplacementRule)
>         sortMeta.initReasons()
>         sortMeta.tagPlanForGpu()
>         if (sortMeta.canThisBeReplaced) {
>           sortMeta.convertToGpu()
>         } else {
>           sort
>         }
>       }
>     }
>     operator.withNewChildren(children)
3036,3037c4129,4135
<   // Only run the explain and don't actually convert or run on GPU.
<   def explainPotentialGpuPlan(df: DataFrame, explain: String = "ALL"): String = {
---
>   /**
>    * Only run the explain and don't actually convert or run on GPU.
>    * This gets the plan from the dataframe so it's after catalyst has run through all the
>    * rules to modify the plan. This means we have to try to undo some of the last rules
>    * to make it close to when the columnar rules would normally run on the plan.
>    */
>   def explainPotentialGpuPlan(df: DataFrame, explain: String): String = {
3063a4162,4182
>   /**
>    * Use explain mode on an active SQL plan as its processed through catalyst.
>    * This path is the same as being run through the plugin running on hosts with
>    * GPUs.
>    */
>   private def explainCatalystSQLPlan(updatedPlan: SparkPlan, conf: RapidsConf): Unit = {
>     // Since we set "NOT_ON_GPU" as the default value of spark.rapids.sql.explain, here we keep
>     // "ALL" as default value of "explainSetting", unless spark.rapids.sql.explain is changed
>     // by the user.
>     val explainSetting = if (conf.shouldExplain &&
>       conf.isConfExplicitlySet(RapidsConf.EXPLAIN.key)) {
>       conf.explain
>     } else {
>       "ALL"
>     }
>     val explainOutput = explainSinglePlan(updatedPlan, conf, explainSetting)
>     if (explainOutput.nonEmpty) {
>       logWarning(s"\n$explainOutput")
>     }
>   }
> 
3086c4205
<       // case c2r: ColumnarToRowExec => prepareExplainOnly(c2r.child)
---
>       case c2r: ColumnarToRowExec => prepareExplainOnly(c2r.child)
3088,3089c4207,4208
<       // case aqe: AdaptiveSparkPlanExec =>
<       //   prepareExplainOnly(SparkShimImpl.getAdaptiveInputPlan(aqe))
---
>       case aqe: AdaptiveSparkPlanExec =>
>         prepareExplainOnly(SparkShimImpl.getAdaptiveInputPlan(aqe))
3096,3100c4215,4241
< // Spark 2.x
< object GpuUserDefinedFunction {
<   // UDFs can support all types except UDT which does not have a clear columnar representation.
<   val udfTypeSig: TypeSig = (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
<       TypeSig.BINARY + TypeSig.CALENDAR + TypeSig.ARRAY + TypeSig.MAP + TypeSig.STRUCT).nested()
---
> /**
>  * Note, this class should not be referenced directly in source code.
>  * It should be loaded by reflection using ShimLoader.newInstanceOf, see ./docs/dev/shims.md
>  */
> protected class ExplainPlanImpl extends ExplainPlanBase {
>   override def explainPotentialGpuPlan(df: DataFrame, explain: String): String = {
>     GpuOverrides.explainPotentialGpuPlan(df, explain)
>   }
> }
> 
> // work around any GpuOverride failures
> object GpuOverrideUtil extends Logging {
>   def tryOverride(fn: SparkPlan => SparkPlan): SparkPlan => SparkPlan = { plan =>
>     val planOriginal = plan.clone()
>     val failOnError = TEST_CONF.get(plan.conf) || !SUPPRESS_PLANNING_FAILURE.get(plan.conf)
>     try {
>       fn(plan)
>     } catch {
>       case NonFatal(t) if !failOnError =>
>         logWarning("Failed to apply GPU overrides, falling back on the original plan: " + t, t)
>         planOriginal
>       case fatal: Throwable =>
>         logError("Encountered an exception applying GPU overrides " + fatal, fatal)
>         throw fatal
>     }
>   }
> }
3101a4243,4402
> /** Tag the initial plan when AQE is enabled */
> case class GpuQueryStagePrepOverrides() extends Rule[SparkPlan] with Logging {
>   override def apply(sparkPlan: SparkPlan): SparkPlan = GpuOverrideUtil.tryOverride { plan =>
>     // Note that we disregard the GPU plan returned here and instead rely on side effects of
>     // tagging the underlying SparkPlan.
>     GpuOverrides().applyWithContext(plan, Some("AQE Query Stage Prep"))
>     // return the original plan which is now modified as a side-effect of invoking GpuOverrides
>     plan
>   }(sparkPlan)
> }
> 
> case class GpuOverrides() extends Rule[SparkPlan] with Logging {
> 
>   // Spark calls this method once for the whole plan when AQE is off. When AQE is on, it
>   // gets called once for each query stage (where a query stage is an `Exchange`).
>   override def apply(sparkPlan: SparkPlan): SparkPlan = applyWithContext(sparkPlan, None)
> 
>   def applyWithContext(sparkPlan: SparkPlan, context: Option[String]): SparkPlan =
>       GpuOverrideUtil.tryOverride { plan =>
>     val conf = new RapidsConf(plan.conf)
>     if (conf.isSqlEnabled && conf.isSqlExecuteOnGPU) {
>       GpuOverrides.logDuration(conf.shouldExplain,
>         t => f"Plan conversion to the GPU took $t%.2f ms") {
>         var updatedPlan = updateForAdaptivePlan(plan, conf)
>         updatedPlan = SparkShimImpl.applyShimPlanRules(updatedPlan, conf)
>         updatedPlan = applyOverrides(updatedPlan, conf)
>         if (conf.logQueryTransformations) {
>           val logPrefix = context.map(str => s"[$str]").getOrElse("")
>           logWarning(s"${logPrefix}Transformed query:" +
>             s"\nOriginal Plan:\n$plan\nTransformed Plan:\n$updatedPlan")
>         }
>         updatedPlan
>       }
>     } else if (conf.isSqlEnabled && conf.isSqlExplainOnlyEnabled) {
>       // this mode logs the explain output and returns the original CPU plan
>       var updatedPlan = updateForAdaptivePlan(plan, conf)
>       updatedPlan = SparkShimImpl.applyShimPlanRules(updatedPlan, conf)
>       GpuOverrides.explainCatalystSQLPlan(updatedPlan, conf)
>       plan
>     } else {
>       plan
>     }
>   }(sparkPlan)
> 
>   private def updateForAdaptivePlan(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     if (plan.conf.adaptiveExecutionEnabled) {
>       // AQE can cause Spark to inject undesired CPU shuffles into the plan because GPU and CPU
>       // distribution expressions are not semantically equal.
>       val newPlan = GpuOverrides.removeExtraneousShuffles(plan, conf)
> 
>       // AQE can cause ReusedExchangeExec instance to cache the wrong aggregation buffer type
>       // compared to the desired buffer type from a reused GPU shuffle.
>       GpuOverrides.fixupReusedExchangeExecs(newPlan)
>     } else {
>       plan
>     }
>   }
> 
>   /**
>    *  Determine whether query is running against Delta Lake _delta_log JSON files or
>    *  if Delta is doing stats collection that ends up hardcoding the use of AQE,
>    *  even though the AQE setting is disabled. To protect against the latter, we
>    *  check for a ScalaUDF using a tahoe.Snapshot function and if we ever see
>    *  an AdaptiveSparkPlan on a Spark version we don't expect, fallback to the
>    *  CPU for those plans.
>    *  Note that the Delta Lake delta log checkpoint parquet files are just inefficient
>    *  to have to copy the data to GPU and then back off after it does the scan on
>    *  Delta Table Checkpoint, so have the entire plan fallback to CPU at that point.
>    */
>   def isDeltaLakeMetadataQuery(plan: SparkPlan, detectDeltaCheckpoint: Boolean): Boolean = {
>     val deltaLogScans = PlanUtils.findOperators(plan, {
>       case f: FileSourceScanExec if DeltaLakeUtils.isDatabricksDeltaLakeScan(f) =>
>         logDebug(s"Fallback for FileSourceScanExec with _databricks_internal: $f")
>         true
>       case f: FileSourceScanExec =>
>         val checkDeltaFunc = (name: String) => if (detectDeltaCheckpoint) {
>           name.contains("/_delta_log/") && (name.endsWith(".json") ||
>             (name.endsWith(".parquet") && new Path(name).getName().contains("checkpoint")))
>         } else {
>           name.contains("/_delta_log/") && name.endsWith(".json")
>         }
> 
>         // example filename: "file:/tmp/delta-table/_delta_log/00000000000000000000.json"
>         val found = f.relation.inputFiles.exists { name =>
>           checkDeltaFunc(name)
>         }
>         if (found) {
>           logDebug(s"Fallback for FileSourceScanExec delta log: $f")
>         }
>         found
>       case rdd: RDDScanExec =>
>         // example rdd name: "Delta Table State #1 - file:///tmp/delta-table/_delta_log" or
>         // "Scan ExistingRDD Delta Table Checkpoint with Stats #1 -
>         // file:///tmp/delta-table/_delta_log"
>         val found = rdd.inputRDD != null &&
>           rdd.inputRDD.name != null &&
>           (rdd.inputRDD.name.startsWith("Delta Table State")
>             || rdd.inputRDD.name.startsWith("Delta Table Checkpoint")) &&
>           rdd.inputRDD.name.endsWith("/_delta_log")
>         if (found) {
>           logDebug(s"Fallback for RDDScanExec delta log: $rdd")
>         }
>         found
>       case aqe: AdaptiveSparkPlanExec if 
>         !AQEUtils.isAdaptiveExecutionSupportedInSparkVersion(plan.conf) =>
>         logDebug(s"AdaptiveSparkPlanExec found on unsupported Spark Version: $aqe")
>         true
>       case project: ProjectExec if
>         !AQEUtils.isAdaptiveExecutionSupportedInSparkVersion(plan.conf) =>
>         val foundExprs = project.expressions.flatMap { e =>
>           PlanUtils.findExpressions(e, {
>             case udf: ScalaUDF =>
>               val contains = udf.function.getClass.getCanonicalName.contains("tahoe.Snapshot")
>               if (contains) {
>                 logDebug(s"Found ScalaUDF with tahoe.Snapshot: $udf," +
>                   s" function class name is: ${udf.function.getClass.getCanonicalName}")
>               }
>               contains
>             case _ => false
>           })
>         }
>         if (foundExprs.nonEmpty) {
>           logDebug(s"Project with Snapshot ScalaUDF: $project")
>         }
>         foundExprs.nonEmpty
>       case _ =>
>         false
>     })
>     deltaLogScans.nonEmpty
>   }
> 
>   private def applyOverrides(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     val wrap = GpuOverrides.wrapAndTagPlan(plan, conf)
>     val detectDeltaCheckpoint = conf.isDetectDeltaCheckpointQueries
>     if (conf.isDetectDeltaLogQueries && isDeltaLakeMetadataQuery(plan, detectDeltaCheckpoint)) {
>       wrap.entirePlanWillNotWork("Delta Lake metadata queries are not efficient on GPU")
>     }
>     val reasonsToNotReplaceEntirePlan = wrap.getReasonsNotToReplaceEntirePlan
>     if (conf.allowDisableEntirePlan && reasonsToNotReplaceEntirePlan.nonEmpty) {
>       if (conf.shouldExplain) {
>         logWarning("Can't replace any part of this plan due to: " +
>             s"${reasonsToNotReplaceEntirePlan.mkString(",")}")
>       }
>       plan
>     } else {
>       val optimizations = GpuOverrides.getOptimizations(wrap, conf)
>       wrap.runAfterTagRules()
>       if (conf.shouldExplain) {
>         wrap.tagForExplain()
>         val explain = wrap.explain(conf.shouldExplainAll)
>         if (explain.nonEmpty) {
>           logWarning(s"\n$explain")
>           if (conf.optimizerShouldExplainAll && optimizations.nonEmpty) {
>             logWarning(s"Cost-based optimizations applied:\n${optimizations.mkString("\n")}")
>           }
>         }
>       }
>       GpuOverrides.doConvertPlan(wrap, conf, optimizations)
>     }
>   }
