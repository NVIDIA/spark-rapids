2c2
<  * Copyright (c) 2022, NVIDIA CORPORATION.
---
>  * Copyright (c) 2019-2022, NVIDIA CORPORATION.
24a25
> import ai.rapids.cudf.DType
26c27
< import com.nvidia.spark.rapids.shims.v2._
---
> import com.nvidia.spark.rapids.shims.v2.{AQEUtils, GpuHashPartitioning, GpuSpecifiedWindowFrameMeta, GpuWindowExpressionMeta, OffsetWindowFunctionMeta}
31a33,34
> import org.apache.spark.sql.catalyst.expressions.rapids.TimeStamp
> import org.apache.spark.sql.catalyst.optimizer.NormalizeNaNAndZero
33a37
> import org.apache.spark.sql.catalyst.trees.TreeNodeTag
34a39
> import org.apache.spark.sql.connector.read.Scan
36,37c41,42
< import org.apache.spark.sql.execution.ScalarSubquery
< import org.apache.spark.sql.execution.aggregate._
---
> import org.apache.spark.sql.execution.adaptive.{AdaptiveSparkPlanExec, BroadcastQueryStageExec, ShuffleQueryStageExec}
> import org.apache.spark.sql.execution.aggregate.{HashAggregateExec, ObjectHashAggregateExec, SortAggregateExec}
43a49,50
> import org.apache.spark.sql.execution.datasources.v2._
> import org.apache.spark.sql.execution.datasources.v2.csv.CSVScan
45a53
> import org.apache.spark.sql.execution.python._
49a58
> import org.apache.spark.sql.rapids.catalyst.expressions.GpuRand
50a60,61
> import org.apache.spark.sql.rapids.execution.python._
> import org.apache.spark.sql.rapids.shims.v2.GpuTimeAdd
63c74
< abstract class ReplacementRule[INPUT <: BASE, BASE, WRAP_TYPE <: RapidsMeta[INPUT, BASE]](
---
> abstract class ReplacementRule[INPUT <: BASE, BASE, WRAP_TYPE <: RapidsMeta[INPUT, BASE, _]](
67c78
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
118c129
<       Option[RapidsMeta[_, _]],
---
>       Option[RapidsMeta[_, _, _]],
187c198
<       parent: Option[RapidsMeta[_, _]],
---
>       parent: Option[RapidsMeta[_, _, _]],
202c213
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
217d227
< /*
232c242
< */
---
> 
240c250
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
259c269
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
281c291
<         Option[RapidsMeta[_, _]],
---
>         Option[RapidsMeta[_, _, _]],
292d301
< 
296c305
<     parent: Option[RapidsMeta[_, _]],
---
>     parent: Option[RapidsMeta[_, _, _]],
300,304c309
<   // spark 2.3 doesn't have this so just code it here
<   def sparkSessionActive: SparkSession = {
<     SparkSession.getActiveSession.getOrElse(SparkSession.getDefaultSession.getOrElse(
<       throw new IllegalStateException("No active or default Spark session found")))
<   }
---
>   private var fileFormat: Option[ColumnarFileFormat] = None
311c316
<     val spark = sparkSessionActive
---
>     val spark = SparkSession.active
313c318
<     cmd.fileFormat match {
---
>     fileFormat = cmd.fileFormat match {
315a321
>         None
317a324
>         None
323a331
>         None
325a334
>         None
328d336
< }
329a338,356
>   override def convertToGpu(): GpuDataWritingCommand = {
>     val format = fileFormat.getOrElse(
>       throw new IllegalStateException("fileFormat missing, tagSelfForGpu not called?"))
> 
>     GpuInsertIntoHadoopFsRelationCommand(
>       cmd.outputPath,
>       cmd.staticPartitions,
>       cmd.ifPartitionNotExists,
>       cmd.partitionColumns,
>       cmd.bucketSpec,
>       format,
>       cmd.options,
>       cmd.query,
>       cmd.mode,
>       cmd.catalogTable,
>       cmd.fileIndex,
>       cmd.outputColumnNames)
>   }
> }
334c361
<     parent: Option[RapidsMeta[_, _]],
---
>     parent: Option[RapidsMeta[_, _, _]],
339,344c366
< 
<   // spark 2.3 doesn't have this so just code it here
<   def sparkSessionActive: SparkSession = {
<     SparkSession.getActiveSession.getOrElse(SparkSession.getDefaultSession.getOrElse(
<       throw new IllegalStateException("No active or default Spark session found")))
<   }
---
>   private var gpuProvider: Option[ColumnarFileFormat] = None
354c376
<     val spark = sparkSessionActive
---
>     val spark = SparkSession.active
356c378
<       GpuDataSource.lookupDataSource(cmd.table.provider.get, spark.sessionState.conf)
---
>       GpuDataSource.lookupDataSourceWithFallback(cmd.table.provider.get, spark.sessionState.conf)
359c381
<     origProvider.getConstructor().newInstance() match {
---
>     gpuProvider = origProvider.getConstructor().newInstance() match {
362d383
<         None
366d386
<         None
372a393,404
>   override def convertToGpu(): GpuDataWritingCommand = {
>     val newProvider = gpuProvider.getOrElse(
>       throw new IllegalStateException("fileFormat unexpected, tagSelfForGpu not called?"))
> 
>     GpuCreateDataSourceTableAsSelectCommand(
>       cmd.table,
>       cmd.mode,
>       cmd.query,
>       cmd.outputColumnNames,
>       origProvider,
>       newProvider)
>   }
374a407,409
> /**
>  * Listener trait so that tests can confirm that the expected optimizations are being applied
>  */
401,403d435
< // copy here for 2.x
< sealed abstract class Optimization
< 
405,409d436
<   // Spark 2.x - don't pull in cudf so hardcode here
<   val DECIMAL32_MAX_PRECISION = 9
<   val DECIMAL64_MAX_PRECISION = 18
<   val DECIMAL128_MAX_PRECISION = 38
< 
467a495,572
>   private def convertExprToGpuIfPossible(expr: Expression, conf: RapidsConf): Expression = {
>     if (expr.find(_.isInstanceOf[GpuExpression]).isDefined) {
>       // already been converted
>       expr
>     } else {
>       val wrapped = wrapExpr(expr, conf, None)
>       wrapped.tagForGpu()
>       if (wrapped.canExprTreeBeReplaced) {
>         wrapped.convertToGpu()
>       } else {
>         expr
>       }
>     }
>   }
> 
>   private def convertPartToGpuIfPossible(part: Partitioning, conf: RapidsConf): Partitioning = {
>     part match {
>       case _: GpuPartitioning => part
>       case _ =>
>         val wrapped = wrapPart(part, conf, None)
>         wrapped.tagForGpu()
>         if (wrapped.canThisBeReplaced) {
>           wrapped.convertToGpu()
>         } else {
>           part
>         }
>     }
>   }
> 
>   /**
>    * Removes unnecessary CPU shuffles that Spark can add to the plan when it does not realize
>    * a GPU partitioning satisfies a CPU distribution because CPU and GPU expressions are not
>    * semantically equal.
>    */
>   def removeExtraneousShuffles(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     plan.transformUp {
>       case cpuShuffle: ShuffleExchangeExec =>
>         cpuShuffle.child match {
>           case sqse: ShuffleQueryStageExec =>
>             GpuTransitionOverrides.getNonQueryStagePlan(sqse) match {
>               case gpuShuffle: GpuShuffleExchangeExecBase =>
>                 val converted = convertPartToGpuIfPossible(cpuShuffle.outputPartitioning, conf)
>                 if (converted == gpuShuffle.outputPartitioning) {
>                   sqse
>                 } else {
>                   cpuShuffle
>                 }
>               case _ => cpuShuffle
>             }
>           case _ => cpuShuffle
>         }
>     }
>   }
> 
>   /**
>    * Searches the plan for ReusedExchangeExec instances containing a GPU shuffle where the
>    * output types between the two plan nodes do not match. In such a case the ReusedExchangeExec
>    * will be updated to match the GPU shuffle output types.
>    */
>   def fixupReusedExchangeExecs(plan: SparkPlan): SparkPlan = {
>     def outputTypesMatch(a: Seq[Attribute], b: Seq[Attribute]): Boolean =
>       a.corresponds(b)((x, y) => x.dataType == y.dataType)
>     plan.transformUp {
>       case sqse: ShuffleQueryStageExec =>
>         sqse.plan match {
>           case ReusedExchangeExec(output, gsee: GpuShuffleExchangeExecBase) if (
>               !outputTypesMatch(output, gsee.output)) =>
>             val newOutput = sqse.plan.output.zip(gsee.output).map { case (c, g) =>
>               assert(c.isInstanceOf[AttributeReference] && g.isInstanceOf[AttributeReference],
>                 s"Expected AttributeReference but found $c and $g")
>               AttributeReference(c.name, g.dataType, c.nullable, c.metadata)(c.exprId, c.qualifier)
>             }
>             AQEUtils.newReuseInstance(sqse, newOutput)
>           case _ => sqse
>         }
>     }
>   }
> 
558c663
<       case dt: DecimalType if allowDecimal => dt.precision <= GpuOverrides.DECIMAL64_MAX_PRECISION
---
>       case dt: DecimalType if allowDecimal => dt.precision <= DType.DECIMAL64_MAX_PRECISION
581c686
<   def checkAndTagFloatAgg(dataType: DataType, conf: RapidsConf, meta: RapidsMeta[_,_]): Unit = {
---
>   def checkAndTagFloatAgg(dataType: DataType, conf: RapidsConf, meta: RapidsMeta[_,_,_]): Unit = {
595c700
<       meta: RapidsMeta[_,_]): Unit = {
---
>       meta: RapidsMeta[_,_,_]): Unit = {
605a711,742
>   /**
>    * Helper function specific to ANSI mode for the aggregate functions that should
>    * fallback, since we don't have the same overflow checks that Spark provides in
>    * the CPU
>    * @param checkType Something other than `None` triggers logic to detect whether
>    *                  the agg should fallback in ANSI mode. Otherwise (None), it's
>    *                  an automatic fallback.
>    * @param meta agg expression meta
>    */
>   def checkAndTagAnsiAgg(checkType: Option[DataType], meta: AggExprMeta[_]): Unit = {
>     val failOnError = SQLConf.get.ansiEnabled
>     if (failOnError) {
>       if (checkType.isDefined) {
>         val typeToCheck = checkType.get
>         val failedType = typeToCheck match {
>           case _: DecimalType | LongType | IntegerType | ShortType | ByteType => true
>           case _ =>  false
>         }
>         if (failedType) {
>           meta.willNotWorkOnGpu(
>             s"ANSI mode not supported for ${meta.expr} with $typeToCheck result type")
>         }
>       } else {
>         // Average falls into this category, where it produces Doubles, but
>         // internally it uses Double and Long, and Long could overflow (technically)
>         // and failOnError given that it is based on catalyst Add.
>         meta.willNotWorkOnGpu(
>           s"ANSI mode not supported for ${meta.expr}")
>       }
>     }
>   }
> 
609c746
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
616a754,763
>   def scan[INPUT <: Scan](
>       desc: String,
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
>           => ScanMeta[INPUT])
>       (implicit tag: ClassTag[INPUT]): ScanRule[INPUT] = {
>     assert(desc != null)
>     assert(doWrap != null)
>     new ScanRule[INPUT](doWrap, desc, tag)
>   }
> 
620c767
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
638c785
<         p: Option[RapidsMeta[_, _]],
---
>         p: Option[RapidsMeta[_, _, _]],
647c794
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
657c804
<       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _]], DataFromReplacementRule)
---
>       doWrap: (INPUT, RapidsConf, Option[RapidsMeta[_, _, _]], DataFromReplacementRule)
668c815
<       parent: Option[RapidsMeta[_, _]]): BaseExprMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): BaseExprMeta[INPUT] =
694d840
< 
709a856
>         override def convertToGpu(child: Expression): GpuExpression = GpuSignum(child)
718a866,867
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuAlias(child, a.name)(a.exprId, a.qualifier, a.explicitMetadata)
728a878
>         override def convertToGpu(): Expression = att
742a893
>         override def convertToGpu(child: Expression): GpuExpression = GpuPromotePrecision(child)
761,762c912
<                   // allowNegativeScaleOfDecimalEnabled is not in 2.x assume its default false
<                   val t = if (s < 0 && !false) {
---
>                   val t = if (s < 0 && !SQLConf.get.allowNegativeScaleOfDecimalEnabled) {
774c924
<             case PromotePrecision(c: Cast) if c.dataType.isInstanceOf[DecimalType] =>
---
>             case PromotePrecision(c: CastBase) if c.dataType.isInstanceOf[DecimalType] =>
830c980
<               if (intermediatePrecision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (intermediatePrecision > DType.DECIMAL128_MAX_PRECISION) {
845c995
<               if (intermediatePrecision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (intermediatePrecision > DType.DECIMAL128_MAX_PRECISION) {
858a1009,1026
> 
>         override def convertToGpu(): GpuExpression = {
>           a.child match {
>             case _: Divide =>
>               // GpuDecimalDivide includes the overflow check in it.
>               GpuDecimalDivide(lhs.convertToGpu(), rhs.convertToGpu(), wrapped.dataType)
>             case _: Multiply =>
>               // GpuDecimal*Multiply includes the overflow check in it
>               val intermediatePrecision =
>                 GpuDecimalMultiply.nonRoundedIntermediatePrecision(lhsDecimalType,
>                   rhsDecimalType, a.dataType)
>               GpuDecimalMultiply(lhs.convertToGpu(), rhs.convertToGpu(), wrapped.dataType,
>                 needsExtraOverflowChecks = intermediatePrecision > DType.DECIMAL128_MAX_PRECISION)
>             case _ =>
>               GpuCheckOverflow(childExprs.head.convertToGpu(),
>                 wrapped.dataType, wrapped.nullOnOverflow)
>           }
>         }
863a1032
>         override def convertToGpu(child: Expression): GpuToDegrees = GpuToDegrees(child)
868a1038
>         override def convertToGpu(child: Expression): GpuToRadians = GpuToRadians(child)
907a1078
>         override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(currentRow)
913a1085
>           override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(unboundedPreceding)
919a1092
>           override def convertToGpu(): GpuExpression = GpuSpecialFrameBoundary(unboundedFollowing)
924a1098
>         override def convertToGpu(): GpuExpression = GpuRowNumber
933a1108
>         override def convertToGpu(): GpuExpression = GpuRank(childExprs.map(_.convertToGpu()))
942a1118
>         override def convertToGpu(): GpuExpression = GpuDenseRank(childExprs.map(_.convertToGpu()))
962a1139,1140
>         override def convertToGpu(): GpuExpression =
>           GpuLead(input.convertToGpu(), offset.convertToGpu(), default.convertToGpu())
982a1161,1162
>         override def convertToGpu(): GpuExpression =
>           GpuLag(input.convertToGpu(), offset.convertToGpu(), default.convertToGpu())
992a1173,1174
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuPreciseTimestampConversion(child, a.fromType, a.toType)
1001,1002c1183
<         // val ansiEnabled = SQLConf.get.ansiEnabled
<         val ansiEnabled = false
---
>         val ansiEnabled = SQLConf.get.ansiEnabled
1005,1006d1185
<           // Spark 2.x - ansi in not in 2.x
<           /*
1010,1011d1188
< 
<            */
1012a1190,1192
> 
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuUnaryMinus(child, ansiEnabled)
1020a1201
>         override def convertToGpu(child: Expression): GpuExpression = GpuUnaryPositive(child)
1025a1207
>         override def convertToGpu(child: Expression): GpuExpression = GpuYear(child)
1030a1213
>         override def convertToGpu(child: Expression): GpuExpression = GpuMonth(child)
1035a1219
>         override def convertToGpu(child: Expression): GpuExpression = GpuQuarter(child)
1040a1225
>         override def convertToGpu(child: Expression): GpuExpression = GpuDayOfMonth(child)
1045a1231
>         override def convertToGpu(child: Expression): GpuExpression = GpuDayOfYear(child)
1050a1237,1248
>         override def convertToGpu(child: Expression): GpuExpression = GpuAcos(child)
>       }),
>     expr[Acosh](
>       "Inverse hyperbolic cosine",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Acosh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           if (conf.includeImprovedFloat) {
>             GpuAcoshImproved(child)
>           } else {
>             GpuAcoshCompat(child)
>           }
1055a1254,1274
>         override def convertToGpu(child: Expression): GpuExpression = GpuAsin(child)
>       }),
>     expr[Asinh](
>       "Inverse hyperbolic sine",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Asinh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           if (conf.includeImprovedFloat) {
>             GpuAsinhImproved(child)
>           } else {
>             GpuAsinhCompat(child)
>           }
> 
>         override def tagSelfForAst(): Unit = {
>           if (!conf.includeImprovedFloat) {
>             // AST is not expressive enough yet to implement the conditional expression needed
>             // to emulate Spark's behavior
>             willNotWorkInAst("asinh is not AST compatible unless " +
>                 s"${RapidsConf.IMPROVED_FLOAT_OPS.key} is enabled")
>           }
>         }
1060a1280
>         override def convertToGpu(child: Expression): GpuExpression = GpuSqrt(child)
1065a1286
>         override def convertToGpu(child: Expression): GpuExpression = GpuCbrt(child)
1077c1298
<               if (precision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (precision > DType.DECIMAL128_MAX_PRECISION) {
1084a1306
>         override def convertToGpu(child: Expression): GpuExpression = GpuFloor(child)
1096c1318
<               if (precision > GpuOverrides.DECIMAL128_MAX_PRECISION) {
---
>               if (precision > DType.DECIMAL128_MAX_PRECISION) {
1103a1326
>         override def convertToGpu(child: Expression): GpuExpression = GpuCeil(child)
1109a1333
>         override def convertToGpu(child: Expression): GpuExpression = GpuNot(child)
1117a1342
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNull(child)
1125a1351
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNotNull(child)
1131a1358
>         override def convertToGpu(child: Expression): GpuExpression = GpuIsNan(child)
1136a1364
>         override def convertToGpu(child: Expression): GpuExpression = GpuRint(child)
1142a1371
>         override def convertToGpu(child: Expression): GpuExpression = GpuBitwiseNot(child)
1151a1381,1382
>         def convertToGpu(): GpuExpression =
>           GpuAtLeastNNonNulls(a.n, childExprs.map(_.convertToGpu()))
1160a1392,1393
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateAdd(lhs, rhs)
1169a1403,1404
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateSub(lhs, rhs)
1176a1412,1413
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuNaNvl(lhs, rhs)
1183a1421,1422
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftLeft(lhs, rhs)
1190a1430,1431
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftRight(lhs, rhs)
1197a1439,1440
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuShiftRightUnsigned(lhs, rhs)
1205a1449,1450
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseAnd(lhs, rhs)
1213a1459,1460
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseOr(lhs, rhs)
1221a1469,1470
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBitwiseXor(lhs, rhs)
1231a1481
>         override def convertToGpu(): GpuExpression = GpuCoalesce(childExprs.map(_.convertToGpu()))
1240a1491
>         override def convertToGpu(): GpuExpression = GpuLeast(childExprs.map(_.convertToGpu()))
1249a1501
>         override def convertToGpu(): GpuExpression = GpuGreatest(childExprs.map(_.convertToGpu()))
1254a1507,1513
>         override def convertToGpu(child: Expression): GpuExpression = GpuAtan(child)
>       }),
>     expr[Atanh](
>       "Inverse hyperbolic tangent",
>       ExprChecks.mathUnaryWithAst,
>       (a, conf, p, r) => new UnaryAstExprMeta[Atanh](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression = GpuAtanh(child)
1259a1519
>         override def convertToGpu(child: Expression): GpuExpression = GpuCos(child)
1264a1525
>         override def convertToGpu(child: Expression): GpuExpression = GpuExp(child)
1269a1531
>         override def convertToGpu(child: Expression): GpuExpression = GpuExpm1(child)
1275a1538
>         override def convertToGpu(child: Expression): GpuExpression = GpuInitCap(child)
1280a1544
>         override def convertToGpu(child: Expression): GpuExpression = GpuLog(child)
1285a1550,1554
>         override def convertToGpu(child: Expression): GpuExpression = {
>           // No need for overflow checking on the GpuAdd in Double as Double handles overflow
>           // the same in all modes.
>           GpuLog(GpuAdd(child, GpuLiteral(1d, DataTypes.DoubleType), false))
>         }
1290a1560,1561
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuLogarithm(child, GpuLiteral(2d, DataTypes.DoubleType))
1295a1567,1568
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuLogarithm(child, GpuLiteral(10d, DataTypes.DoubleType))
1302a1576,1578
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           // the order of the parameters is transposed intentionally
>           GpuLogarithm(rhs, lhs)
1307a1584
>         override def convertToGpu(child: Expression): GpuExpression = GpuSin(child)
1312a1590
>         override def convertToGpu(child: Expression): GpuExpression = GpuSinh(child)
1317a1596
>         override def convertToGpu(child: Expression): GpuExpression = GpuCosh(child)
1322a1602
>         override def convertToGpu(child: Expression): GpuExpression = GpuCot(child)
1327a1608
>         override def convertToGpu(child: Expression): GpuExpression = GpuTanh(child)
1332a1614,1632
>         override def convertToGpu(child: Expression): GpuExpression = GpuTan(child)
>       }),
>     expr[NormalizeNaNAndZero](
>       "Normalize NaN and zero",
>       ExprChecks.unaryProjectInputMatchesOutput(
>         TypeSig.DOUBLE + TypeSig.FLOAT,
>         TypeSig.DOUBLE + TypeSig.FLOAT),
>       (a, conf, p, r) => new UnaryExprMeta[NormalizeNaNAndZero](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuNormalizeNaNAndZero(child)
>       }),
>     expr[KnownFloatingPointNormalized](
>       "Tag to prevent redundant normalization",
>       ExprChecks.unaryProjectInputMatchesOutput(
>         TypeSig.DOUBLE + TypeSig.FLOAT,
>         TypeSig.DOUBLE + TypeSig.FLOAT),
>       (a, conf, p, r) => new UnaryExprMeta[KnownFloatingPointNormalized](a, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuKnownFloatingPointNormalized(child)
1339a1640,1641
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuKnownNotNull(child)
1346a1649,1651
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuDateDiff(lhs, rhs)
>         }
1365a1671,1672
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuTimeAdd(lhs, rhs)
1366a1674,1695
>     expr[DateAddInterval](
>       "Adds interval to date",
>       ExprChecks.binaryProject(TypeSig.DATE, TypeSig.DATE,
>         ("start", TypeSig.DATE, TypeSig.DATE),
>         ("interval", TypeSig.lit(TypeEnum.CALENDAR)
>           .withPsNote(TypeEnum.CALENDAR, "month intervals are not supported"),
>           TypeSig.CALENDAR)),
>       (dateAddInterval, conf, p, r) =>
>         new BinaryExprMeta[DateAddInterval](dateAddInterval, conf, p, r) {
>           override def tagExprForGpu(): Unit = {
>             GpuOverrides.extractLit(dateAddInterval.interval).foreach { lit =>
>               val intvl = lit.value.asInstanceOf[CalendarInterval]
>               if (intvl.months != 0) {
>                 willNotWorkOnGpu("interval months isn't supported")
>               }
>             }
>             checkTimeZoneId(dateAddInterval.timeZoneId)
>           }
> 
>           override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>             GpuDateAddInterval(lhs, rhs)
>         }),
1376a1706,1707
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuDateFormatClass(lhs, rhs, strfFormat)
1389,1390c1720,1730
<         override def shouldFallbackOnAnsiTimestamp: Boolean = false
<           // ShimLoader.getSparkShims.shouldFallbackOnAnsiTimestamp
---
>         override def shouldFallbackOnAnsiTimestamp: Boolean =
>           ShimLoader.getSparkShims.shouldFallbackOnAnsiTimestamp
> 
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           if (conf.isImprovedTimestampOpsEnabled) {
>             // passing the already converted strf string for a little optimization
>             GpuToUnixTimestampImproved(lhs, rhs, sparkFormat, strfFormat)
>           } else {
>             GpuToUnixTimestamp(lhs, rhs, sparkFormat, strfFormat)
>           }
>         }
1402,1403c1742,1743
<         override def shouldFallbackOnAnsiTimestamp: Boolean = false
<           // ShimLoader.getSparkShims.shouldFallbackOnAnsiTimestamp
---
>         override def shouldFallbackOnAnsiTimestamp: Boolean =
>           ShimLoader.getSparkShims.shouldFallbackOnAnsiTimestamp
1404a1745,1752
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           if (conf.isImprovedTimestampOpsEnabled) {
>             // passing the already converted strf string for a little optimization
>             GpuUnixTimestampImproved(lhs, rhs, sparkFormat, strfFormat)
>           } else {
>             GpuUnixTimestamp(lhs, rhs, sparkFormat, strfFormat)
>           }
>         }
1414a1763
>         override def convertToGpu(expr: Expression): GpuExpression = GpuHour(expr)
1424a1774,1775
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuMinute(expr)
1433a1785,1787
> 
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuSecond(expr)
1439a1794,1795
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuWeekDay(expr)
1445a1802,1803
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuDayOfWeek(expr)
1450a1809,1810
>         override def convertToGpu(expr: Expression): GpuExpression =
>           GpuLastDay(expr)
1461a1822,1824
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           // passing the already converted strf string for a little optimization
>           GpuFromUnixTime(lhs, rhs, strfFormat)
1468a1832,1833
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuPmod(lhs, rhs)
1480c1845
<         private val ansiEnabled = false
---
>         private val ansiEnabled = SQLConf.get.ansiEnabled
1482a1848,1850
>           if (ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkInAst("AST Addition does not support ANSI mode.")
>           }
1484a1853,1854
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuAdd(lhs, rhs, failOnError = ansiEnabled)
1496c1866
<         private val ansiEnabled = false
---
>         private val ansiEnabled = SQLConf.get.ansiEnabled
1498a1869,1871
>           if (ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkInAst("AST Subtraction does not support ANSI mode.")
>           }
1500a1874,1875
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuSubtract(lhs, rhs, ansiEnabled)
1513a1889,1891
>           if (SQLConf.get.ansiEnabled && GpuAnsi.needBasicOpOverflowCheck(a.dataType)) {
>             willNotWorkOnGpu("GPU Multiplication does not support ANSI mode")
>           }
1515a1894,1901
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           a.dataType match {
>             case _: DecimalType => throw new IllegalStateException(
>               "Decimal Multiply should be converted in CheckOverflow")
>             case _ =>
>               GpuMultiply(lhs, rhs)
>           }
>         }
1522a1909,1910
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuAnd(lhs, rhs)
1529a1918,1919
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuOr(lhs, rhs)
1539a1930,1931
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEqualNullSafe(lhs, rhs)
1550a1943,1944
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEqualTo(lhs, rhs)
1561a1956,1957
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGreaterThan(lhs, rhs)
1572a1969,1970
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGreaterThanOrEqual(lhs, rhs)
1592a1991,1992
>         override def convertToGpu(): GpuExpression =
>           GpuInSet(childExprs.head.convertToGpu(), in.list.asInstanceOf[Seq[Literal]].map(_.value))
1603a2004,2005
>         override def convertToGpu(): GpuExpression =
>           GpuInSet(childExprs.head.convertToGpu(), in.hset.toSeq)
1614a2017,2018
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLessThan(lhs, rhs)
1625a2030,2031
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLessThanOrEqual(lhs, rhs)
1630a2037,2048
>         override def convertToGpu(): GpuExpression = {
>           val branches = childExprs.grouped(2).flatMap {
>             case Seq(cond, value) => Some((cond.convertToGpu(), value.convertToGpu()))
>             case Seq(_) => None
>           }.toArray.toSeq  // force materialization to make the seq serializable
>           val elseValue = if (childExprs.size % 2 != 0) {
>             Some(childExprs.last.convertToGpu())
>           } else {
>             None
>           }
>           GpuCaseWhen(branches, elseValue)
>         }
1647a2066,2069
>         override def convertToGpu(): GpuExpression = {
>           val Seq(boolExpr, trueExpr, falseExpr) = childExprs.map(_.convertToGpu())
>           GpuIf(boolExpr, trueExpr, falseExpr)
>         }
1655a2078,2079
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuPow(lhs, rhs)
1669a2094,2113
>         // Division of Decimal types is a little odd. To work around some issues with
>         // what Spark does the tagging/checks are in CheckOverflow instead of here.
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           a.dataType match {
>             case _: DecimalType =>
>               throw new IllegalStateException("Internal Error: Decimal Divide operations " +
>                   "should be converted to the GPU in the CheckOverflow rule")
>             case _ =>
>               GpuDivide(lhs, rhs)
>           }
>       }),
>     expr[IntegralDivide](
>       "Division with a integer result",
>       ExprChecks.binaryProject(
>         TypeSig.LONG, TypeSig.LONG,
>         ("lhs", TypeSig.LONG + TypeSig.DECIMAL_128, TypeSig.LONG + TypeSig.DECIMAL_128),
>         ("rhs", TypeSig.LONG + TypeSig.DECIMAL_128, TypeSig.LONG + TypeSig.DECIMAL_128)),
>       (a, conf, p, r) => new BinaryExprMeta[IntegralDivide](a, conf, p, r) {
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuIntegralDivide(lhs, rhs)
1677a2122,2123
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuRemainder(lhs, rhs)
1692c2138,2139
<         // No filter parameter in 2.x
---
>         private val filter: Option[BaseExprMeta[_]] =
>           a.filter.map(GpuOverrides.wrapExpr(_, conf, Some(this)))
1696c2143,2158
<           childrenExprMeta
---
>           childrenExprMeta ++ filter.toSeq
> 
>         override def convertToGpu(): GpuExpression = {
>           // handle the case AggregateExpression has the resultIds parameter where its
>           // Seq[ExprIds] instead of single ExprId.
>           val resultId = try {
>             val resultMethod = a.getClass.getMethod("resultId")
>             resultMethod.invoke(a).asInstanceOf[ExprId]
>           } catch {
>             case _: Exception =>
>               val resultMethod = a.getClass.getMethod("resultIds")
>               resultMethod.invoke(a).asInstanceOf[Seq[ExprId]].head
>           }
>           GpuAggregateExpression(childExprs.head.convertToGpu().asInstanceOf[GpuAggregateFunction],
>             a.mode, a.isDistinct, filter.map(_.convertToGpu()), resultId)
>         }
1719a2182,2184
>         // One of the few expressions that are not replaced with a GPU version
>         override def convertToGpu(): Expression =
>           sortOrder.withNewChildren(childExprs.map(_.convertToGpu()))
1744a2210,2216
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val Seq(pivotColumn, valueColumn) = childExprs
>           GpuPivotFirst(pivotColumn, valueColumn, pivot.pivotColumnValues)
>         }
> 
>         // Pivot does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1759a2232,2233
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCount(childExprs)
1788a2263,2268
> 
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuMax(childExprs.head)
> 
>         // Max does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1817a2298,2303
> 
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuMin(childExprs.head)
> 
>         // Min does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1830a2317,2318
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuSum(childExprs.head, a.dataType)
1844a2333,2337
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuFirst(childExprs.head, a.ignoreNulls)
> 
>         // First does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1858a2352,2356
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuLast(childExprs.head, a.ignoreNulls)
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
1877a2376,2377
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuBRound(lhs, rhs)
1896a2397,2398
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuRound(lhs, rhs)
1918a2421,2425
> 
>         override def convertToGpu(): GpuExpression =
>           GpuPythonUDF(a.name, a.func, a.dataType,
>             childExprs.map(_.convertToGpu()),
>             a.evalType, a.udfDeterministic, a.resultId)
1926a2434
>         override def convertToGpu(child: Expression): GpuExpression = GpuRand(child)
1931a2440
>         override def convertToGpu(): GpuExpression = GpuSparkPartitionID()
1936a2446
>         override def convertToGpu(): GpuExpression = GpuMonotonicallyIncreasingID()
1941a2452
>         override def convertToGpu(): GpuExpression = GpuInputFileName()
1946a2458
>         override def convertToGpu(): GpuExpression = GpuInputFileBlockStart()
1951a2464
>         override def convertToGpu(): GpuExpression = GpuInputFileBlockLength()
1957a2471
>         override def convertToGpu(child: Expression): GpuExpression = GpuMd5(child)
1962a2477
>         override def convertToGpu(child: Expression): GpuExpression = GpuUpper(child)
1968a2484
>         override def convertToGpu(child: Expression): GpuExpression = GpuLower(child)
1985a2502,2506
>         override def convertToGpu(
>             str: Expression,
>             width: Expression,
>             pad: Expression): GpuExpression =
>           GpuStringLPad(str, width, pad)
2001a2523,2527
>         override def convertToGpu(
>             str: Expression,
>             width: Expression,
>             pad: Expression): GpuExpression =
>           GpuStringRPad(str, width, pad)
2022a2549,2550
>         override def convertToGpu(arr: Expression): GpuExpression =
>           GpuGetStructField(arr, expr.ordinal, expr.name)
2080a2609,2613
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           // This will be called under 3.0.x version, so set failOnError to false to match CPU
>           // behavior
>           GpuElementAt(lhs, rhs, failOnError = false)
>         }
2091a2625,2626
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapKeys(child)
2102a2638,2653
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapValues(child)
>       }),
>     expr[MapEntries](
>       "Returns an unordered array of all entries in the given map",
>       ExprChecks.unaryProject(
>         // Technically the return type is an array of struct, but we cannot really express that
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>             TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>             TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all)),
>       (in, conf, p, r) => new UnaryExprMeta[MapEntries](in, conf, p, r) {
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMapEntries(child)
2110,2111c2661,2662
<             .withPsNote(TypeEnum.DOUBLE, GpuOverrides.nanAggPsNote)
<             .withPsNote(TypeEnum.FLOAT, GpuOverrides.nanAggPsNote),
---
>             .withPsNote(TypeEnum.DOUBLE, nanAggPsNote)
>             .withPsNote(TypeEnum.FLOAT, nanAggPsNote),
2115c2666
<           GpuOverrides.checkAndTagFloatNanAgg("Min", in.dataType, conf, this)
---
>           checkAndTagFloatNanAgg("Min", in.dataType, conf, this)
2116a2668,2670
> 
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuArrayMin(child)
2124,2125c2678,2679
<             .withPsNote(TypeEnum.DOUBLE, GpuOverrides.nanAggPsNote)
<             .withPsNote(TypeEnum.FLOAT, GpuOverrides.nanAggPsNote),
---
>             .withPsNote(TypeEnum.DOUBLE, nanAggPsNote)
>             .withPsNote(TypeEnum.FLOAT, nanAggPsNote),
2129c2683
<           GpuOverrides.checkAndTagFloatNanAgg("Max", in.dataType, conf, this)
---
>           checkAndTagFloatNanAgg("Max", in.dataType, conf, this)
2131a2686,2687
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuArrayMax(child)
2136a2693,2694
>         override def convertToGpu(): GpuExpression =
>           GpuCreateNamedStruct(childExprs.map(_.convertToGpu()))
2170a2729,2730
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuArrayContains(lhs, rhs)
2182c2742,2746
<       }),
---
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression = {
>           GpuSortArray(lhs, rhs)
>         }
>       }
>     ),
2207a2772,2773
>         override def convertToGpu(): GpuExpression =
>           GpuCreateArray(childExprs.map(_.convertToGpu()), wrapped.useStringTypeWhenEmpty)
2223a2790,2796
>         override def convertToGpu(): GpuExpression = {
>           val func = childExprs.head
>           val args = childExprs.tail
>           GpuLambdaFunction(func.convertToGpu(),
>             args.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>             in.hidden)
>         }
2231a2805,2807
>         override def convertToGpu(): GpuExpression = {
>           GpuNamedLambdaVariable(in.name, in.dataType, in.nullable, in.exprId)
>         }
2248a2825,2873
>         override def convertToGpu(): GpuExpression = {
>           GpuArrayTransform(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
>       }),
>     expr[TransformKeys](
>       "Transform keys in a map using a transform function",
>       ExprChecks.projectOnly(TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>           TypeSig.NULL + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all),
>         Seq(
>           ParamCheck("argument",
>             TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>             TypeSig.MAP.nested(TypeSig.all)),
>           ParamCheck("function",
>             // We need to be able to check for duplicate keys (equality)
>             TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL,
>             TypeSig.all - TypeSig.MAP.nested()))),
>       (in, conf, p, r) => new ExprMeta[TransformKeys](in, conf, p, r) {
>         override def tagExprForGpu(): Unit = {
>           SQLConf.get.getConf(SQLConf.MAP_KEY_DEDUP_POLICY).toUpperCase match {
>             case "EXCEPTION" => // Good we can support this
>             case other =>
>               willNotWorkOnGpu(s"$other is not supported for config setting" +
>                   s" ${SQLConf.MAP_KEY_DEDUP_POLICY.key}")
>           }
>         }
>         override def convertToGpu(): GpuExpression = {
>           GpuTransformKeys(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
>       }),
>     expr[TransformValues](
>       "Transform values in a map using a transform function",
>       ExprChecks.projectOnly(TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>           TypeSig.NULL + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>         TypeSig.MAP.nested(TypeSig.all),
>         Seq(
>           ParamCheck("argument",
>             TypeSig.MAP.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP),
>             TypeSig.MAP.nested(TypeSig.all)),
>           ParamCheck("function",
>             (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
>                 TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.MAP).nested(),
>             TypeSig.all))),
>       (in, conf, p, r) => new ExprMeta[TransformValues](in, conf, p, r) {
>         override def convertToGpu(): GpuExpression = {
>           GpuTransformValues(childExprs.head.convertToGpu(), childExprs(1).convertToGpu())
>         }
2256a2882,2886
>         override def convertToGpu(
>             val0: Expression,
>             val1: Expression,
>             val2: Expression): GpuExpression =
>           GpuStringLocate(val0, val1, val2)
2264a2895,2899
>         override def convertToGpu(
>             column: Expression,
>             position: Expression,
>             length: Expression): GpuExpression =
>           GpuSubstring(column, position, length)
2280a2916,2918
>         override def convertToGpu(
>             input: Expression,
>             repeatTimes: Expression): GpuExpression = GpuStringRepeat(input, repeatTimes)
2288a2927,2931
>         override def convertToGpu(
>             column: Expression,
>             target: Expression,
>             replace: Expression): GpuExpression =
>           GpuStringReplace(column, target, replace)
2296a2940,2943
>         override def convertToGpu(
>             column: Expression,
>             target: Option[Expression] = None): GpuExpression =
>           GpuStringTrim(column, target)
2305a2953,2956
>           override def convertToGpu(
>             column: Expression,
>             target: Option[Expression] = None): GpuExpression =
>             GpuStringTrimLeft(column, target)
2314a2966,2969
>           override def convertToGpu(
>               column: Expression,
>               target: Option[Expression] = None): GpuExpression =
>             GpuStringTrimRight(column, target)
2321a2977,2978
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuStartsWith(lhs, rhs)
2328a2986,2987
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuEndsWith(lhs, rhs)
2339a2999
>         override def convertToGpu(child: Seq[Expression]): GpuExpression = GpuConcat(child)
2356a3017,3018
>         override final def convertToGpu(): GpuExpression =
>           GpuConcatWs(childExprs.map(_.convertToGpu()))
2366a3029,3030
>         def convertToGpu(): GpuExpression =
>           GpuMurmur3Hash(childExprs.map(_.convertToGpu()), a.seed)
2373a3038,3039
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuContains(lhs, rhs)
2380a3047,3048
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuLike(lhs, rhs, a.escapeChar)
2405a3074
>         override def convertToGpu(child: Expression): GpuExpression = GpuLength(child)
2413a3083,3084
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuSize(child, a.legacySizeOfNull)
2420a3092
>         override def convertToGpu(child: Expression): GpuExpression = GpuUnscaledValue(child)
2426a3099,3100
>         override def convertToGpu(child: Expression): GpuExpression =
>           GpuMakeDecimal(child, a.precision, a.scale, a.nullOnOverflow)
2440a3115
>         override def convertToGpu(): GpuExpression = GpuExplode(childExprs.head.convertToGpu())
2454a3130
>         override def convertToGpu(): GpuExpression = GpuPosExplode(childExprs.head.convertToGpu())
2470c3146,3212
<      }),
---
>         override def convertToGpu(childExpr: Seq[Expression]): GpuExpression =
>           GpuReplicateRows(childExpr)
>       }),
>     expr[CollectList](
>       "Collect a list of non-unique elements, not supported in reduction",
>       // GpuCollectList is not yet supported in Reduction context.
>       ExprChecks.aggNotReduction(
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>             TypeSig.NULL + TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         Seq(ParamCheck("input",
>           (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>               TypeSig.NULL + TypeSig.STRUCT + TypeSig.ARRAY + TypeSig.MAP).nested(),
>           TypeSig.all))),
>       (c, conf, p, r) => new TypedImperativeAggExprMeta[CollectList](c, conf, p, r) {
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCollectList(childExprs.head, c.mutableAggBufferOffset, c.inputAggBufferOffset)
> 
>         override def aggBufferAttribute: AttributeReference = {
>           val aggBuffer = c.aggBufferAttributes.head
>           aggBuffer.copy(dataType = c.dataType)(aggBuffer.exprId, aggBuffer.qualifier)
>         }
> 
>         override def createCpuToGpuBufferConverter(): CpuToGpuAggregateBufferConverter =
>           new CpuToGpuCollectBufferConverter(c.child.dataType)
> 
>         override def createGpuToCpuBufferConverter(): GpuToCpuAggregateBufferConverter =
>           new GpuToCpuCollectBufferConverter()
> 
>         override val supportBufferConversion: Boolean = true
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
>       }),
>     expr[CollectSet](
>       "Collect a set of unique elements, not supported in reduction",
>       // GpuCollectSet is not yet supported in Reduction context.
>       // Compared to CollectList, StructType is NOT in GpuCollectSet because underlying
>       // method drop_list_duplicates doesn't support nested types.
>       ExprChecks.aggNotReduction(
>         TypeSig.ARRAY.nested(TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>             TypeSig.NULL + TypeSig.STRUCT),
>         TypeSig.ARRAY.nested(TypeSig.all),
>         Seq(ParamCheck("input",
>           (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 +
>               TypeSig.NULL + TypeSig.STRUCT).nested(),
>           TypeSig.all))),
>       (c, conf, p, r) => new TypedImperativeAggExprMeta[CollectSet](c, conf, p, r) {
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuCollectSet(childExprs.head, c.mutableAggBufferOffset, c.inputAggBufferOffset)
> 
>         override def aggBufferAttribute: AttributeReference = {
>           val aggBuffer = c.aggBufferAttributes.head
>           aggBuffer.copy(dataType = c.dataType)(aggBuffer.exprId, aggBuffer.qualifier)
>         }
> 
>         override def createCpuToGpuBufferConverter(): CpuToGpuAggregateBufferConverter =
>           new CpuToGpuCollectBufferConverter(c.child.dataType)
> 
>         override def createGpuToCpuBufferConverter(): GpuToCpuAggregateBufferConverter =
>           new GpuToCpuCollectBufferConverter()
> 
>         override val supportBufferConversion: Boolean = true
> 
>         // Last does not overflow, so it doesn't need the ANSI check
>         override val needsAnsiCheck: Boolean = false
>       }),
2476a3219,3222
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = ShimLoader.getSparkShims.getLegacyStatisticalAggregate
>           GpuStddevPop(childExprs.head, !legacyStatisticalAggregate)
>         }
2484a3231,3234
>           override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>             val legacyStatisticalAggregate = ShimLoader.getSparkShims.getLegacyStatisticalAggregate
>             GpuStddevSamp(childExprs.head, !legacyStatisticalAggregate)
>           }
2491a3242,3245
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = ShimLoader.getSparkShims.getLegacyStatisticalAggregate
>           GpuVariancePop(childExprs.head, !legacyStatisticalAggregate)
>         }
2498a3253,3256
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression = {
>           val legacyStatisticalAggregate = ShimLoader.getSparkShims.getLegacyStatisticalAggregate
>           GpuVarianceSamp(childExprs.head, !legacyStatisticalAggregate)
>         }
2538a3297,3302
> 
>         override def convertToGpu(childExprs: Seq[Expression]): GpuExpression =
>           GpuApproximatePercentile(childExprs.head,
>               childExprs(1).asInstanceOf[GpuLiteral],
>               childExprs(2).asInstanceOf[GpuLiteral])
> 
2553a3318,3319
>         override def convertToGpu(lhs: Expression, rhs: Expression): GpuExpression =
>           GpuGetJsonObject(lhs, rhs)
2556c3322
<     expr[ScalarSubquery](
---
>     expr[org.apache.spark.sql.execution.ScalarSubquery](
2562,2563c3328,3332
<       (a, conf, p, r) => new ExprMeta[ScalarSubquery](a, conf, p, r) {
<       }),
---
>       (a, conf, p, r) =>
>         new ExprMeta[org.apache.spark.sql.execution.ScalarSubquery](a, conf, p, r) {
>           override def convertToGpu(): GpuExpression = GpuScalarSubquery(a.plan, a.exprId)
>         }
>     ),
2568c3337,3339
<       }),
---
>         override def convertToGpu(): GpuExpression = GpuCreateMap(childExprs.map(_.convertToGpu()))
>       }
>     ),
2585c3356,3387
<     commonExpressions ++ GpuHiveOverrides.exprs ++ ShimGpuOverrides.shimExpressions
---
>     commonExpressions ++ TimeStamp.getExprs ++ GpuHiveOverrides.exprs ++
>         ShimLoader.getSparkShims.getExprs
> 
>   def wrapScan[INPUT <: Scan](
>       scan: INPUT,
>       conf: RapidsConf,
>       parent: Option[RapidsMeta[_, _, _]]): ScanMeta[INPUT] =
>     scans.get(scan.getClass)
>       .map(r => r.wrap(scan, conf, parent, r).asInstanceOf[ScanMeta[INPUT]])
>       .getOrElse(new RuleNotFoundScanMeta(scan, conf, parent))
> 
>   val commonScans: Map[Class[_ <: Scan], ScanRule[_ <: Scan]] = Seq(
>     GpuOverrides.scan[CSVScan](
>       "CSV parsing",
>       (a, conf, p, r) => new ScanMeta[CSVScan](a, conf, p, r) {
>         override def tagSelfForGpu(): Unit = GpuCSVScan.tagSupport(this)
> 
>         override def convertToGpu(): Scan =
>           GpuCSVScan(a.sparkSession,
>             a.fileIndex,
>             a.dataSchema,
>             a.readDataSchema,
>             a.readPartitionSchema,
>             a.options,
>             a.partitionFilters,
>             a.dataFilters,
>             conf.maxReadBatchSizeRows,
>             conf.maxReadBatchSizeBytes)
>       })).map(r => (r.getClassFor.asSubclass(classOf[Scan]), r)).toMap
> 
>   val scans: Map[Class[_ <: Scan], ScanRule[_ <: Scan]] =
>     commonScans ++ ShimLoader.getSparkShims.getScans
2590c3392
<       parent: Option[RapidsMeta[_, _]]): PartMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): PartMeta[INPUT] =
2605a3408,3409
>         override def convertToGpu(): GpuPartitioning =
>           GpuHashPartitioning(childExprs.map(_.convertToGpu()), hp.numPartitions)
2615a3420,3427
>         override def convertToGpu(): GpuPartitioning = {
>           if (rp.numPartitions > 1) {
>             val gpuOrdering = childExprs.map(_.convertToGpu()).asInstanceOf[Seq[SortOrder]]
>             GpuRangePartitioning(gpuOrdering, rp.numPartitions)
>           } else {
>             GpuSinglePartitioning
>           }
>         }
2620a3433,3435
>         override def convertToGpu(): GpuPartitioning = {
>           GpuRoundRobinPartitioning(rrp.numPartitions)
>         }
2625a3441
>         override def convertToGpu(): GpuPartitioning = GpuSinglePartitioning
2632c3448
<       parent: Option[RapidsMeta[_, _]]): DataWritingCommandMeta[INPUT] =
---
>       parent: Option[RapidsMeta[_, _, _]]): DataWritingCommandMeta[INPUT] =
2650c3466
<       parent: Option[RapidsMeta[_, _]]): SparkPlanMeta[INPUT]  =
---
>       parent: Option[RapidsMeta[_, _, _]]): SparkPlanMeta[INPUT]  =
2673c3489,3507
<       (range, conf, p, r) => new SparkPlanMeta[RangeExec](range, conf, p, r) {
---
>       (range, conf, p, r) => {
>         new SparkPlanMeta[RangeExec](range, conf, p, r) {
>           override def convertToGpu(): GpuExec =
>             GpuRangeExec(range.start, range.end, range.step, range.numSlices, range.output,
>               conf.gpuTargetBatchSizeBytes)
>         }
>       }),
>     exec[BatchScanExec](
>       "The backend for most file input",
>       ExecChecks(
>         (TypeSig.commonCudfTypes + TypeSig.STRUCT + TypeSig.MAP + TypeSig.ARRAY +
>             TypeSig.DECIMAL_128).nested(),
>         TypeSig.all),
>       (p, conf, parent, r) => new SparkPlanMeta[BatchScanExec](p, conf, parent, r) {
>         override val childScans: scala.Seq[ScanMeta[_]] =
>           Seq(GpuOverrides.wrapScan(p.scan, conf, Some(this)))
> 
>         override def convertToGpu(): GpuExec =
>           GpuBatchScanExec(p.output, childScans.head.convertToGpu())
2680a3515,3516
>         override def convertToGpu(): GpuExec =
>           GpuCoalesceExec(coalesce.numPartitions, childPlans.head.convertIfNeeded())
2693a3530,3532
>         override def convertToGpu(): GpuExec =
>           GpuDataWritingCommandExec(childDataWriteCmds.head.convertToGpu(),
>             childPlans.head.convertIfNeeded())
2708a3548,3570
>           override def convertToGpu(): GpuExec = {
>             // To avoid metrics confusion we split a single stage up into multiple parts but only
>             // if there are multiple partitions to make it worth doing.
>             val so = sortOrder.map(_.convertToGpu().asInstanceOf[SortOrder])
>             if (takeExec.child.outputPartitioning.numPartitions == 1) {
>               GpuTopN(takeExec.limit, so,
>                 projectList.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>                 childPlans.head.convertIfNeeded())(takeExec.sortOrder)
>             } else {
>               GpuTopN(
>                 takeExec.limit,
>                 so,
>                 projectList.map(_.convertToGpu().asInstanceOf[NamedExpression]),
>                 ShimLoader.getSparkShims.getGpuShuffleExchangeExec(
>                   GpuSinglePartitioning,
>                   GpuTopN(
>                     takeExec.limit,
>                     so,
>                     takeExec.child.output,
>                     childPlans.head.convertIfNeeded())(takeExec.sortOrder),
>                   SinglePartition))(takeExec.sortOrder)
>             }
>           }
2716a3579,3580
>           override def convertToGpu(): GpuExec =
>             GpuLocalLimitExec(localLimitExec.limit, childPlans.head.convertIfNeeded())
2724a3589,3590
>           override def convertToGpu(): GpuExec =
>             GpuGlobalLimitExec(globalLimitExec.limit, childPlans.head.convertIfNeeded())
2731,2734c3597
<       (collectLimitExec, conf, p, r) =>
<         new SparkPlanMeta[CollectLimitExec](collectLimitExec, conf, p, r) {
<           override val childParts: scala.Seq[PartMeta[_]] =
<             Seq(GpuOverrides.wrapPart(collectLimitExec.outputPartitioning, conf, Some(this)))})
---
>       (collectLimitExec, conf, p, r) => new GpuCollectLimitMeta(collectLimitExec, conf, p, r))
2742a3606,3607
>         override def convertToGpu(): GpuExec =
>           GpuFilterExec(childExprs.head.convertToGpu(), childPlans.head.convertIfNeeded())
2763a3629,3630
>         override def convertToGpu(): GpuExec =
>           GpuUnionExec(childPlans.map(_.convertIfNeeded()))
2794a3662,3672
>         override def convertToGpu(): GpuExec = {
>           val Seq(left, right) = childPlans.map(_.convertIfNeeded())
>           val joinExec = GpuCartesianProductExec(
>             left,
>             right,
>             None,
>             conf.gpuTargetBatchSizeBytes)
>           // The GPU does not yet support conditional joins, so conditions are implemented
>           // as a filter after the join when possible.
>           condition.map(c => GpuFilterExec(c.convertToGpu(), joinExec)).getOrElse(joinExec)
>         }
2807a3686,3701
>     exec[ObjectHashAggregateExec](
>       "The backend for hash based aggregations supporting TypedImperativeAggregate functions",
>       ExecChecks(
>         // note that binary input is allowed here but there are additional checks later on to
>         // check that we have can support binary in the context of aggregate buffer conversions
>         (TypeSig.commonCudfTypes + TypeSig.NULL + TypeSig.DECIMAL_128 +
>           TypeSig.MAP + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.BINARY)
>             .nested()
>             .withPsNote(TypeEnum.BINARY, "only allowed when aggregate buffers can be " +
>               "converted between CPU and GPU")
>             .withPsNote(TypeEnum.ARRAY, "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.MAP, "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.STRUCT,
>               "not allowed for grouping expressions if containing Array or Map as child"),
>         TypeSig.all),
>       (agg, conf, p, r) => new GpuObjectHashAggregateExecMeta(agg, conf, p, r)),
2814,2815d3707
<       // SPARK 2.x we can't check for the TypedImperativeAggregate properly so
<       // map/arrya/struct left off
2818c3710
<             TypeSig.MAP + TypeSig.BINARY)
---
>             TypeSig.MAP + TypeSig.ARRAY + TypeSig.STRUCT + TypeSig.BINARY)
2822c3714,3717
<             .withPsNote(TypeEnum.MAP, "not allowed for grouping expressions"),
---
>             .withPsNote(TypeEnum.ARRAY, "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.MAP, "not allowed for grouping expressions")
>             .withPsNote(TypeEnum.STRUCT,
>               "not allowed for grouping expressions if containing Array or Map as child"),
2825,2826d3719
<     // SPARK 2.x we can't check for the TypedImperativeAggregate properly so don't say we do the
<     // ObjectHashAggregate
2859c3752
<       (sample, conf, p, r) => new GpuSampleExecMeta(sample, conf, p, r) {}
---
>       (sample, conf, p, r) => new GpuSampleExecMeta(sample, conf, p, r)
2861,2863c3754,3787
<     // ShimLoader.getSparkShims.aqeShuffleReaderExec,
<     // ShimLoader.getSparkShims.neverReplaceShowCurrentNamespaceCommand,
<     neverReplaceExec[ExecutedCommandExec]("Table metadata operation")
---
>     exec[SubqueryBroadcastExec](
>       "Plan to collect and transform the broadcast key values",
>       ExecChecks(TypeSig.all, TypeSig.all),
>       (s, conf, p, r) => new GpuSubqueryBroadcastMeta(s, conf, p, r)
>     ),
>     ShimLoader.getSparkShims.aqeShuffleReaderExec,
>     exec[FlatMapCoGroupsInPandasExec](
>       "The backend for CoGrouped Aggregation Pandas UDF, it runs on CPU itself now but supports" +
>         " scheduling GPU resources for the Python process when enabled",
>       ExecChecks.hiddenHack(),
>       (flatCoPy, conf, p, r) => new GpuFlatMapCoGroupsInPandasExecMeta(flatCoPy, conf, p, r))
>         .disabledByDefault("Performance is not ideal now"),
>     neverReplaceExec[AlterNamespaceSetPropertiesExec]("Namespace metadata operation"),
>     neverReplaceExec[CreateNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[DescribeNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[DropNamespaceExec]("Namespace metadata operation"),
>     neverReplaceExec[SetCatalogAndNamespaceExec]("Namespace metadata operation"),
>     ShimLoader.getSparkShims.neverReplaceShowCurrentNamespaceCommand,
>     neverReplaceExec[ShowNamespacesExec]("Namespace metadata operation"),
>     neverReplaceExec[ExecutedCommandExec]("Table metadata operation"),
>     neverReplaceExec[AlterTableExec]("Table metadata operation"),
>     neverReplaceExec[CreateTableExec]("Table metadata operation"),
>     neverReplaceExec[DeleteFromTableExec]("Table metadata operation"),
>     neverReplaceExec[DescribeTableExec]("Table metadata operation"),
>     neverReplaceExec[DropTableExec]("Table metadata operation"),
>     neverReplaceExec[AtomicReplaceTableExec]("Table metadata operation"),
>     neverReplaceExec[RefreshTableExec]("Table metadata operation"),
>     neverReplaceExec[RenameTableExec]("Table metadata operation"),
>     neverReplaceExec[ReplaceTableExec]("Table metadata operation"),
>     neverReplaceExec[ShowTablePropertiesExec]("Table metadata operation"),
>     neverReplaceExec[ShowTablesExec]("Table metadata operation"),
>     neverReplaceExec[AdaptiveSparkPlanExec]("Wrapper for adaptive query plan"),
>     neverReplaceExec[BroadcastQueryStageExec]("Broadcast query stage"),
>     neverReplaceExec[ShuffleQueryStageExec]("Shuffle query stage")
2867c3791
<     commonExecs ++ ShimGpuOverrides.shimExecs
---
>     commonExecs ++ ShimLoader.getSparkShims.getExecs
2870,2872c3794
<     // val key = SQLConf.LEGACY_TIME_PARSER_POLICY.key
<     val key = "2xgone"
<     val policy = SQLConf.get.getConfString(key, "EXCEPTION")
---
>     val policy = SQLConf.get.getConfString(SQLConf.LEGACY_TIME_PARSER_POLICY.key, "EXCEPTION")
2879a3802,3806
>   val preRowToColProjection = TreeNodeTag[Seq[NamedExpression]]("rapids.gpu.preRowToColProcessing")
> 
>   val postColToRowProjection = TreeNodeTag[Seq[NamedExpression]](
>     "rapids.gpu.postColToRowProcessing")
> 
2885a3813,3820
>   private def doConvertPlan(wrap: SparkPlanMeta[SparkPlan], conf: RapidsConf,
>       optimizations: Seq[Optimization]): SparkPlan = {
>     val convertedPlan = wrap.convertIfNeeded()
>     val sparkPlan = addSortsIfNeeded(convertedPlan, conf)
>     GpuOverrides.listeners.foreach(_.optimizedPlan(wrap, sparkPlan, optimizations))
>     sparkPlan
>   }
> 
2888c3823,3871
<    Seq.empty
---
>     if (conf.optimizerEnabled) {
>       // we need to run these rules both before and after CBO because the cost
>       // is impacted by forcing operators onto CPU due to other rules that we have
>       wrap.runAfterTagRules()
>       val optimizer = try {
>         ShimLoader.newInstanceOf[Optimizer](conf.optimizerClassName)
>       } catch {
>         case e: Exception =>
>           throw new RuntimeException(s"Failed to create optimizer ${conf.optimizerClassName}", e)
>       }
>       optimizer.optimize(conf, wrap)
>     } else {
>       Seq.empty
>     }
>   }
> 
>   private def addSortsIfNeeded(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     plan.transformUp {
>       case operator: SparkPlan =>
>         ensureOrdering(operator, conf)
>     }
>   }
> 
>   // copied from Spark EnsureRequirements but only does the ordering checks and
>   // check to convert any SortExec added to GpuSortExec
>   private def ensureOrdering(operator: SparkPlan, conf: RapidsConf): SparkPlan = {
>     val requiredChildOrderings: Seq[Seq[SortOrder]] = operator.requiredChildOrdering
>     var children: Seq[SparkPlan] = operator.children
>     assert(requiredChildOrderings.length == children.length)
> 
>     // Now that we've performed any necessary shuffles, add sorts to guarantee output orderings:
>     children = children.zip(requiredChildOrderings).map { case (child, requiredOrdering) =>
>       // If child.outputOrdering already satisfies the requiredOrdering, we do not need to sort.
>       if (SortOrder.orderingSatisfies(child.outputOrdering, requiredOrdering)) {
>         child
>       } else {
>         val sort = SortExec(requiredOrdering, global = false, child = child)
>         // just specifically check Sort to see if we can change Sort to GPUSort
>         val sortMeta = new GpuSortMeta(sort, conf, None, new SortDataFromReplacementRule)
>         sortMeta.initReasons()
>         sortMeta.tagPlanForGpu()
>         if (sortMeta.canThisBeReplaced) {
>           sortMeta.convertToGpu()
>         } else {
>           sort
>         }
>       }
>     }
>     operator.withNewChildren(children)
2898,2899c3881,3887
<   // Only run the explain and don't actually convert or run on GPU.
<   def explainPotentialGpuPlan(df: DataFrame, explain: String = "ALL"): String = {
---
>   /**
>    * Only run the explain and don't actually convert or run on GPU.
>    * This gets the plan from the dataframe so it's after catalyst has run through all the
>    * rules to modify the plan. This means we have to try to undo some of the last rules
>    * to make it close to when the columnar rules would normally run on the plan.
>    */
>   def explainPotentialGpuPlan(df: DataFrame, explain: String): String = {
2925a3914,3930
>   /**
>    * Use explain mode on an active SQL plan as its processed through catalyst.
>    * This path is the same as being run through the plugin running on hosts with
>    * GPUs.
>    */
>   private def explainCatalystSQLPlan(updatedPlan: SparkPlan, conf: RapidsConf): Unit = {
>     val explainSetting = if (conf.shouldExplain) {
>       conf.explain
>     } else {
>       "ALL"
>     }
>     val explainOutput = explainSinglePlan(updatedPlan, conf, explainSetting)
>     if (explainOutput.nonEmpty) {
>       logWarning(s"\n$explainOutput")
>     }
>   }
> 
2948c3953
<       // case c2r: ColumnarToRowExec => prepareExplainOnly(c2r.child)
---
>       case c2r: ColumnarToRowExec => prepareExplainOnly(c2r.child)
2950,2951c3955,3956
<       // case aqe: AdaptiveSparkPlanExec =>
<       //   prepareExplainOnly(ShimLoader.getSparkShims.getAdaptiveInputPlan(aqe))
---
>       case aqe: AdaptiveSparkPlanExec =>
>         prepareExplainOnly(ShimLoader.getSparkShims.getAdaptiveInputPlan(aqe))
2958,2962c3963,3985
< // Spark 2.x
< object GpuUserDefinedFunction {
<   // UDFs can support all types except UDT which does not have a clear columnar representation.
<   val udfTypeSig: TypeSig = (TypeSig.commonCudfTypes + TypeSig.DECIMAL_128 + TypeSig.NULL +
<       TypeSig.BINARY + TypeSig.CALENDAR + TypeSig.ARRAY + TypeSig.MAP + TypeSig.STRUCT).nested()
---
> class ExplainPlanImpl extends ExplainPlanBase {
>   override def explainPotentialGpuPlan(df: DataFrame, explain: String): String = {
>     GpuOverrides.explainPotentialGpuPlan(df, explain)
>   }
> }
> 
> // work around any GpuOverride failures
> object GpuOverrideUtil extends Logging {
>   def tryOverride(fn: SparkPlan => SparkPlan): SparkPlan => SparkPlan = { plan =>
>     val planOriginal = plan.clone()
>     val failOnError = TEST_CONF.get(plan.conf) || !SUPPRESS_PLANNING_FAILURE.get(plan.conf)
>     try {
>       fn(plan)
>     } catch {
>       case NonFatal(t) if !failOnError =>
>         logWarning("Failed to apply GPU overrides, falling back on the original plan: " + t, t)
>         planOriginal
>       case fatal: Throwable =>
>         logError("Encountered an exception applying GPU overrides " + fatal, fatal)
>         throw fatal
>     }
>   }
> }
2963a3987,4058
> /** Tag the initial plan when AQE is enabled */
> case class GpuQueryStagePrepOverrides() extends Rule[SparkPlan] with Logging {
>   override def apply(sparkPlan: SparkPlan): SparkPlan = GpuOverrideUtil.tryOverride { plan =>
>     // Note that we disregard the GPU plan returned here and instead rely on side effects of
>     // tagging the underlying SparkPlan.
>     GpuOverrides().apply(plan)
>     // return the original plan which is now modified as a side-effect of invoking GpuOverrides
>     plan
>   }(sparkPlan)
> }
> 
> case class GpuOverrides() extends Rule[SparkPlan] with Logging {
> 
>   // Spark calls this method once for the whole plan when AQE is off. When AQE is on, it
>   // gets called once for each query stage (where a query stage is an `Exchange`).
>   override def apply(sparkPlan: SparkPlan): SparkPlan = GpuOverrideUtil.tryOverride { plan =>
>     val conf = new RapidsConf(plan.conf)
>     if (conf.isSqlEnabled && conf.isSqlExecuteOnGPU) {
>       GpuOverrides.logDuration(conf.shouldExplain,
>         t => f"Plan conversion to the GPU took $t%.2f ms") {
>         val updatedPlan = updateForAdaptivePlan(plan, conf)
>         applyOverrides(updatedPlan, conf)
>       }
>     } else if (conf.isSqlEnabled && conf.isSqlExplainOnlyEnabled) {
>       // this mode logs the explain output and returns the original CPU plan
>       val updatedPlan = updateForAdaptivePlan(plan, conf)
>       GpuOverrides.explainCatalystSQLPlan(updatedPlan, conf)
>       plan
>     } else {
>       plan
>     }
>   }(sparkPlan)
> 
>   private def updateForAdaptivePlan(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     if (plan.conf.adaptiveExecutionEnabled) {
>       // AQE can cause Spark to inject undesired CPU shuffles into the plan because GPU and CPU
>       // distribution expressions are not semantically equal.
>       val newPlan = GpuOverrides.removeExtraneousShuffles(plan, conf)
> 
>       // AQE can cause ReusedExchangeExec instance to cache the wrong aggregation buffer type
>       // compared to the desired buffer type from a reused GPU shuffle.
>       GpuOverrides.fixupReusedExchangeExecs(newPlan)
>     } else {
>       plan
>     }
>   }
> 
>   private def applyOverrides(plan: SparkPlan, conf: RapidsConf): SparkPlan = {
>     val wrap = GpuOverrides.wrapAndTagPlan(plan, conf)
>     val reasonsToNotReplaceEntirePlan = wrap.getReasonsNotToReplaceEntirePlan
>     if (conf.allowDisableEntirePlan && reasonsToNotReplaceEntirePlan.nonEmpty) {
>       if (conf.shouldExplain) {
>         logWarning("Can't replace any part of this plan due to: " +
>             s"${reasonsToNotReplaceEntirePlan.mkString(",")}")
>       }
>       plan
>     } else {
>       val optimizations = GpuOverrides.getOptimizations(wrap, conf)
>       wrap.runAfterTagRules()
>       if (conf.shouldExplain) {
>         wrap.tagForExplain()
>         val explain = wrap.explain(conf.shouldExplainAll)
>         if (explain.nonEmpty) {
>           logWarning(s"\n$explain")
>           if (conf.optimizerShouldExplainAll && optimizations.nonEmpty) {
>             logWarning(s"Cost-based optimizations applied:\n${optimizations.mkString("\n")}")
>           }
>         }
>       }
>       GpuOverrides.doConvertPlan(wrap, conf, optimizations)
>     }
>   }
