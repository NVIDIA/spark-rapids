2c2
<  * Copyright (c) 2022, NVIDIA CORPORATION.
---
>  * Copyright (c) 2020-2022, NVIDIA CORPORATION.
21a22
> import ai.rapids.cudf.DType
24d24
< import org.apache.spark.{SPARK_BUILD_USER, SPARK_VERSION}
173c173
<     private val maxAllowedDecimalPrecision: Int = GpuOverrides.DECIMAL64_MAX_PRECISION,
---
>     private val maxAllowedDecimalPrecision: Int = DType.DECIMAL64_MAX_PRECISION,
297c297
<       meta: RapidsMeta[_, _],
---
>       meta: RapidsMeta[_, _, _],
613c613
<   val DECIMAL_64: TypeSig = decimal(GpuOverrides.DECIMAL64_MAX_PRECISION)
---
>   val DECIMAL_64: TypeSig = decimal(DType.DECIMAL64_MAX_PRECISION)
620c620
<   val DECIMAL_128: TypeSig = decimal(GpuOverrides.DECIMAL128_MAX_PRECISION)
---
>   val DECIMAL_128: TypeSig = decimal(DType.DECIMAL128_MAX_PRECISION)
765c765
<   def tag(meta: RapidsMeta[_, _]): Unit
---
>   def tag(meta: RapidsMeta[_, _, _]): Unit
777c777
<   /**
---
>   /** 
783c783
<     meta: RapidsMeta[_, _]
---
>     meta: RapidsMeta[_, _, _]
808c808
<     meta: RapidsMeta[_, _],
---
>     meta: RapidsMeta[_, _, _],
834,844d833
<   // Spark 2.X doesn't have getZoneId - copy it here
<   private def getZoneId(timeZoneId: String): ZoneId = {
<     val formattedZoneId = timeZoneId
<       // To support the (+|-)h:mm format because it was supported before Spark 3.0.
<       .replaceFirst("(\\+|\\-)(\\d):", "$10$2:")
<       // To support the (+|-)hh:m format because it was supported before Spark 3.0.
<       .replaceFirst("(\\+|\\-)(\\d\\d):(\\d)$", "$1$2:0$3")
< 
<     ZoneId.of(formattedZoneId, ZoneId.SHORT_IDS)
<   }
< 
846,847c835
<     // Spark 2.X doesn't have getZoneId
<     val zoneId = getZoneId(zoneIdString)
---
>     val zoneId = DateTimeUtils.getZoneId(zoneIdString)
889c877
<   override def tag(rapidsMeta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(rapidsMeta: RapidsMeta[_, _, _]): Unit = {
893c881
<   private[this] def tagBase(rapidsMeta: RapidsMeta[_, _], willNotWork: String => Unit): Unit = {
---
>   private[this] def tagBase(rapidsMeta: RapidsMeta[_, _, _], willNotWork: String => Unit): Unit = {
951c939
<   def tag(meta: RapidsMeta[_, _],
---
>   def tag(meta: RapidsMeta[_, _, _],
962c950
<   override def tag(meta: RapidsMeta[_, _]): Unit =
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit =
988c976
<   def tag(meta: RapidsMeta[_, _],
---
>   def tag(meta: RapidsMeta[_, _, _],
1009c997
<   override def tag(rapidsMeta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(rapidsMeta: RapidsMeta[_, _, _]): Unit = {
1084c1072
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1136c1124
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1179c1167
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1229c1217
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1275c1263
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1311c1299
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1465c1453
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1475c1463
<   private[this] def tagBase(meta: RapidsMeta[_, _], willNotWork: String => Unit): Unit = {
---
>   private[this] def tagBase(meta: RapidsMeta[_, _, _], willNotWork: String => Unit): Unit = {
1810,1818d1797
<   def getSparkVersion: String = {
<     // hack for databricks, try to find something more reliable?
<     if (SPARK_BUILD_USER.equals("Databricks")) {
<       SPARK_VERSION + "-databricks"
<     } else {
<       SPARK_VERSION
<     }
<   }
< 
1833c1812
<     println(s"against version ${getSparkVersion} of Spark. Most of this should still")
---
>     println(s"against version ${ShimLoader.getSparkVersion} of Spark. Most of this should still")
1941c1920
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
2024c2003
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
2128c2107
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
2329d2307
<   /*
2405d2382
<   */
2409,2410c2386,2387
<       // case a if a.equals("execs") => outputSupportedExecs()
<       // case expr if expr.equals("exprs") => outputSupportedExpressions()
---
>       case a if a.equals("execs") => outputSupportedExecs()
>       case expr if expr.equals("exprs") => outputSupportedExpressions()
