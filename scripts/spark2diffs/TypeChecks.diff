2c2
<  * Copyright (c) 2022, NVIDIA CORPORATION.
---
>  * Copyright (c) 2020-2022, NVIDIA CORPORATION.
21a22
> import ai.rapids.cudf.DType
24d24
< import org.apache.spark.{SPARK_BUILD_USER, SPARK_VERSION}
171c171
<     private val maxAllowedDecimalPrecision: Int = GpuOverrides.DECIMAL64_MAX_PRECISION,
---
>     private val maxAllowedDecimalPrecision: Int = DType.DECIMAL64_MAX_PRECISION,
295c295
<       meta: RapidsMeta[_, _],
---
>       meta: RapidsMeta[_, _, _],
611c611
<   val DECIMAL_64: TypeSig = decimal(GpuOverrides.DECIMAL64_MAX_PRECISION)
---
>   val DECIMAL_64: TypeSig = decimal(DType.DECIMAL64_MAX_PRECISION)
618c618
<   val DECIMAL_128: TypeSig = decimal(GpuOverrides.DECIMAL128_MAX_PRECISION)
---
>   val DECIMAL_128: TypeSig = decimal(DType.DECIMAL128_MAX_PRECISION)
763c763
<   def tag(meta: RapidsMeta[_, _]): Unit
---
>   def tag(meta: RapidsMeta[_, _, _]): Unit
776c776
<     meta: RapidsMeta[_, _],
---
>     meta: RapidsMeta[_, _, _],
833c833
<   override def tag(rapidsMeta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(rapidsMeta: RapidsMeta[_, _, _]): Unit = {
837c837
<   private[this] def tagBase(rapidsMeta: RapidsMeta[_, _], willNotWork: String => Unit): Unit = {
---
>   private[this] def tagBase(rapidsMeta: RapidsMeta[_, _, _], willNotWork: String => Unit): Unit = {
895c895
<   def tag(meta: RapidsMeta[_, _],
---
>   def tag(meta: RapidsMeta[_, _, _],
906c906
<   override def tag(meta: RapidsMeta[_, _]): Unit =
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit =
932c932
<   def tag(meta: RapidsMeta[_, _],
---
>   def tag(meta: RapidsMeta[_, _, _],
953c953
<   override def tag(rapidsMeta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(rapidsMeta: RapidsMeta[_, _, _]): Unit = {
1028c1028
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1080c1080
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1123c1123
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1173c1173
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1219c1219
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1255c1255
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1306c1306
<   val sparkIntegralSig: TypeSig = cpuNumeric + BOOLEAN + TIMESTAMP + STRING +
---
>   val sparkIntegralSig: TypeSig = cpuNumeric + BOOLEAN + TIMESTAMP + STRING + BINARY +
1409c1409
<   override def tag(meta: RapidsMeta[_, _]): Unit = {
---
>   override def tag(meta: RapidsMeta[_, _, _]): Unit = {
1419c1419
<   private[this] def tagBase(meta: RapidsMeta[_, _], willNotWork: String => Unit): Unit = {
---
>   private[this] def tagBase(meta: RapidsMeta[_, _, _], willNotWork: String => Unit): Unit = {
1754,1762d1753
<   def getSparkVersion: String = {
<     // hack for databricks, try to find something more reliable?
<     if (SPARK_BUILD_USER.equals("Databricks")) {
<       SPARK_VERSION + "-databricks"
<     } else {
<       SPARK_VERSION
<     }
<   }
< 
1777c1768
<     println(s"against version ${getSparkVersion} of Spark. Most of this should still")
---
>     println(s"against version ${ShimLoader.getSparkVersion} of Spark. Most of this should still")
1885c1876
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
1968c1959
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
2072c2063
<         val allData = allSupportedTypes.toList.map { t =>
---
>         val allData = allSupportedTypes.map { t =>
2268d2258
<   /*
2344d2333
<   */
2348,2349c2337,2338
<       // case a if a.equals("execs") => outputSupportedExecs()
<       // case expr if expr.equals("exprs") => outputSupportedExpressions()
---
>       case a if a.equals("execs") => outputSupportedExecs()
>       case expr if expr.equals("exprs") => outputSupportedExpressions()
