#!/bin/bash
#
# Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -e

shopt -s extglob

while [[ "$1" != "" ]] ; do


function print_usage() {
  echo "Usage: buildall [OPTION]"
  echo "Options:"
  echo "   --profile=DIST_PROFILE   profile for the dist module, default: noSnapshots,"
  echo "                            also supported: snapshots, minimumFeatureVersionMix, snapshotsWithDataBricks,"
  echo "                            and noSnapshotsWithDataBricks. NOTE: the Databricks-related spark3XYdb shims"
  echo "                            are not built locally, the jars are fetched prebuilt from a remote Maven repo."
  echo "   --profile=BUILDVER       builds a single Spark shim, e.g. --profile=320"
  echo "   --module=MODULE          after finishing parallel builds, resume from dist and build"
  echo "                            up to and including module MODULE, e.g., integration_tests"
  echo "   --parallel=N             build in parallel, N is passed via -P to xargs. NOTE: standard maven does not support"
  echo "                            concurrent installs. If you see an error related to a maven-metadata-local.xml in"
  echo "                            your local m2 cache, delete its parent directory and retry."
}

case "$1" in

--help|-h)
  print_usage
  exit 0
  ;;

-p=*|--profile=*)
  DIST_PROFILE="${1#*=}"
  ;;

-m=*|--module=*)
  MODULE="${1#*=}"
  ;;

-P=*|--parallel=*)
  BUILD_PARALLEL="${1#*=}"
  ;;

*)
  echo >&2 "Unknown arg: $1"
  print_usage
  exit 1
  ;;

esac

# advance $1 to the next in the arg list
shift

done

# TODO create a switch for debug
set -x

DIST_PROFILE=${DIST_PROFILE:-"noSnapshots"}
[[ "$MODULE" != "" ]] && MODULE_OPT="--projects $MODULE --also-make" || MODULE_OPT=""

case $DIST_PROFILE in

  snapshots?(WithDatabricks))
    SPARK_SHIM_VERSIONS=(
      301
      302
      303
      304
      311
      311cdh
      312
      313
      320
    )
    ;;

  noSnapshots?(WithDatabricks))
    SPARK_SHIM_VERSIONS=(
      301
      302
      303
      311
      311cdh
      312
      320
    )
    ;;

  minimumFeatureVersionMix)
    SPARK_SHIM_VERSIONS=(
      302
      311cdh
      312
      320
    )
    ;;

  3*)
    SPARK_SHIM_VERSIONS=($DIST_PROFILE)
    unset DIST_PROFILE
    ;;

  *)
    echo "ERROR unexpected value for profile: $DIST_PROFILE, see 'buildall --help'"
    exit 1

esac

[[ "$DIST_PROFILE" != "" ]] && MVN_PROFILE_OPT="-P$DIST_PROFILE" || MVN_PROFILE_OPT=""

# First element in SPARK_SHIM_VERSIONS to do most of the checks
export BASE_VER=${SPARK_SHIM_VERSIONS[0]}
export NUM_SHIMS=${#SPARK_SHIM_VERSIONS[@]}
export BUILD_PARALLEL=${BUILD_PARALLEL:-4}

echo Clean once across all modules
mvn -q clean

echo "Building a combined dist jar with Shims for ${SPARK_SHIM_VERSIONS[@]} ..."

export MVN_BASE_DIR=$(mvn help:evaluate -Dexpression=project.basedir -q -DforceStdout)
build_single_shim() {
  set -x
  BUILD_VER=$1
  mkdir -p "$MVN_BASE_DIR/target"
  (( BUILD_PARALLEL == 1 || NUM_SHIMS == 1 )) && LOG_FILE="/dev/tty" || \
    LOG_FILE="$MVN_BASE_DIR/target/mvn-build-$BUILD_VER.log"
  SKIP_CHECKS=$( [[ "$BUILD_VER" == "$BASE_VER" ]] && echo false || echo true )

  echo "#### REDIRECTING mvn output to $LOG_FILE ####"
  mvn -U install \
      -DskipTests \
      -Dbuildver="$BUILD_VER" \
      -Drat.skip="$SKIP_CHECKS" \
      -Dmaven.javadoc.skip="$SKIP_CHECKS" \
      -Dskip="$SKIP_CHECKS" \
      -Dmaven.scalastyle.skip="$SKIP_CHECKS" \
      -pl aggregator -am > "$LOG_FILE" 2>&1 || {
        [[ "$LOG_FILE" != "/dev/tty" ]] && tail -20 "$LOG_FILE" || true
        exit 255
      }
}

export -f build_single_shim

# Install all the versions for DIST_PROFILE

# First build the aggregator module for all SPARK_SHIM_VERSIONS in parallel skipping expensive plugins that
# - either deferred to 301 because the check is identical in all shim profiles such as scalastyle
# - or deferred to 301 because we currently don't require it per shim such as javadoc generation
# - or there is a dedicated step to run against a particular shim jar such as unit tests, in
#   the near future we will run unit tests against a combined multi-shim jar to catch classloading
#   regressions even before pytest-based integration_tests
#
# Then resume maven build from the dist module now that shims have been installed
time (
  # printf a single buildver array element per line
  printf "%s\n" "${SPARK_SHIM_VERSIONS[@]}" | \
    xargs -t -I% -P "$BUILD_PARALLEL" -n 1 \
    bash -c 'build_single_shim "$@"' _ %
  echo "Resuming from dist build only using $BASE_VER"
  mvn install --resume-from dist $MODULE_OPT $MVN_PROFILE_OPT \
    -Dbuildver="$BASE_VER" \
    -DskipTests
)
