#!/usr/bin/env python

# Copyright (c) 2020, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A auto-merge tool

Create a PR to merge HEAD to BASE branch.
NOTE:
    The generated PR should be automatically merged if no conflict. Otherwise, manual operation will be required.
"""

import os
import sys
import time

import requests

# static
API_URL = 'https://api.github.com'


def create(github_token: str, owner: str, repo_name: str, head: str, base: str):
    auth_header = {
        'Authorization': 'token ' + github_token
    }

    url = f'{API_URL}/repos/{owner}/{repo_name}/pulls'
    params = {
        'title': f'[auto-merge] {head} to {base} [skip ci] [bot]',
        'head': head,
        'base': base,
        'body': f'auto-merge triggered by github actions on `{head}` to create a PR keeping `{base}` up-to-date. If '
                'this PR is unable to be merged due to conflicts, it will remain open until manually fix.',
        'maintainer_can_modify': True
    }
    r = requests.post(url, headers=auth_header, json=params)
    if r.status_code == 201:
        print('SUCCESS - create PR')
        pull = r.json()
        number = str(pull['number'])
        sha = str(pull['head']['sha'])
        return number, sha, False
    if r.status_code == 422:  # early-terminate if no commits between HEAD and BASE
        print('SUCCESS - No commits')
        print(r.json())
        return '', '', True
    # FAILURE
    print('FAILURE - create PR')
    print(f'status code: {r.status_code}')
    print(r.json())
    sys.exit(1)


def auto_merge(github_token: str, nvauto_token: str, owner: str, repo_name: str, number: str, commit_id: str):
    try:
        # auto-approve PR
        approve_url = f'{API_URL}/repos/{owner}/{repo_name}/pulls/{number}/reviews'
        approve_params = {
            'commit_id': commit_id,
            'event': 'APPROVE',
            'body': 'auto-approved',
        }
        r = requests.post(approve_url, headers={'Authorization': 'token ' + nvauto_token}, json=approve_params)
        if r.status_code == 200:
            comment(github_token=github_token, owner=owner, repo_name=repo_name, number=number,
                    content='**SUCCESS** - auto-approve')
            print('SUCCESS - auto-approve')
        else:
            print('FAILURE - auto-approve')
            raise Exception(r.json())

        # auto-merge PR
        merge_url = f'{API_URL}/repos/{owner}/{repo_name}/pulls/{number}/merge'
        merge_params = {
            'sha': commit_id,
            'merge_method': 'merge',
        }
        r = requests.put(merge_url, headers={'Authorization': 'token ' + github_token}, json=merge_params)
        if r.status_code == 200:
            comment(github_token=github_token, owner=owner, repo_name=repo_name, number=number,
                    content='**SUCCESS** - auto-merge')
            print('SUCCESS - auto-merge')
            sys.exit(0)
        else:
            print('FAILURE - auto-merge')
            raise Exception(r.json())
    except Exception as e:
        comment(github_token=github_token, owner=owner, repo_name=repo_name, number=number,
                content=f"""**FAILURE** - Unable to auto-merge. Manual operation is required.
```
{e}
```
""")
        print(e)
        sys.exit(1)


def comment(github_token: str, owner: str, repo_name: str, number: str, content: str):
    auth_header = {
        'Authorization': 'token ' + github_token
    }
    url = f'{API_URL}/repos/{owner}/{repo_name}/issues/{number}/comments'
    params = {
        'body': content
    }
    r = requests.post(url, headers=auth_header, json=params)
    if r.status_code == 201:
        print('SUCCESS - create comment')
    else:
        print('FAILURE - create comment')
        print(f'status code: {r.status_code}')
        print(r.json())


def main(github_token: str, nvauto_token: str, owner: str, repo_name: str, head: str, base: str):
    try:
        number, sha, term = create(github_token=github_token, owner=owner, repo_name=repo_name, head=head, base=base)
        if term:
            sys.exit(0)

        # skip pre-merge blossom CI w/ [skip ci] in PR title
        comment(github_token=nvauto_token, owner=owner, repo_name=repo_name, number=number, content='build')

        time.sleep(600)  # sleep 10 minutes, then try auto-merge
        auto_merge(github_token=github_token, nvauto_token=nvauto_token,
                   owner=owner, repo_name=repo_name, number=number, commit_id=sha)
    except Exception as e:
        print("Unexpected error: ", e)
        exit(-1)


if __name__ == "__main__":
    GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
    assert GITHUB_TOKEN, 'env GITHUB_TOKEN should not be empty'
    NVAUTO_TOKEN = os.environ.get('NVAUTO_TOKEN')
    assert NVAUTO_TOKEN, 'env NVAUTO_TOKEN should not be empty'
    OWNER = os.environ.get('OWNER')
    assert OWNER, 'env OWNER should not be empty'
    REPO_NAME = os.environ.get('REPO_NAME')
    assert REPO_NAME, 'env REPO_NAME should not be empty'
    HEAD = os.environ.get('HEAD')
    assert HEAD, 'env HEAD should not be empty'
    BASE = os.environ.get('BASE')
    assert BASE, 'env BASE should not be empty'

    main(github_token=GITHUB_TOKEN, nvauto_token=NVAUTO_TOKEN, owner=OWNER, repo_name=REPO_NAME, head=HEAD, base=BASE)
