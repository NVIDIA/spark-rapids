# Copyright (c) 2022-2023, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow to run mvn verify check
name: mvn[compile,RAT,scalastyle,docgen]

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  COMMON_MVN_FLAGS: >
    -Ddist.jar.compress=false
    -DskipTests
    -Dskip

jobs:
  get-shim-versions-from-dist:
    runs-on: ubuntu-latest
    outputs:
      sparkHeadVersion: ${{ steps.allShimVersionsStep.outputs.headVersion }}
      sparkTailVersions: ${{ steps.allShimVersionsStep.outputs.tailVersions }}
      sparkJDKVersions: ${{ steps.allShimVersionsStep.outputs.jdkVersions }}
    steps:
      - uses: actions/checkout@v3 # refs/pull/:prNumber/merge

      - name: Setup Java and Maven Env
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8

      - name: all shim versions
        id: allShimVersionsStep
        run: |
          set -x
          . jenkins/version-def.sh
          svArrBodyNoSnapshot=$(printf ",{\"spark-version\":\"%s\",\"isSnapshot\":false}" "${SPARK_SHIM_VERSIONS_NOSNAPSHOTS_TAIL[@]}")
          svArrBodyNoSnapshot=${svArrBodyNoSnapshot:1}
          # do not add empty snapshot versions
          if [ ${#SPARK_SHIM_VERSIONS_SNAPSHOTS_ONLY[@]} -gt 0 ]; then
            svArrBodySnapshot=$(printf ",{\"spark-version\":\"%s\",\"isSnapshot\":true}" "${SPARK_SHIM_VERSIONS_SNAPSHOTS_ONLY[@]}")
            svArrBodySnapshot=${svArrBodySnapshot:1}
            svJsonStr=$(printf {\"include\":[%s]} $svArrBodyNoSnapshot,$svArrBodySnapshot)
          else
            svJsonStr=$(printf {\"include\":[%s]} $svArrBodyNoSnapshot)
          fi

          echo "headVersion=$SPARK_BASE_SHIM_VERSION" >> $GITHUB_OUTPUT
          echo "tailVersions=$svJsonStr" >> $GITHUB_OUTPUT
          # jdk11
          jdk11VersionArrBody=$(printf ",{\"spark-version\":\"%s\",\"java-version\":11}" "${SPARK_SHIM_VERSIONS_JDK11[@]}")
          # jdk17
          jdk17VersionArrBody=$(printf ",{\"spark-version\":\"%s\",\"java-version\":17}" "${SPARK_SHIM_VERSIONS_JDK17[@]}")
          # jdk
          jdkVersionArrBody=$jdk11VersionArrBody$jdk17VersionArrBody
          jdkVersionArrBody=${jdkVersionArrBody:1}
          jdkVersionJsonStr=$(printf {\"include\":[%s]} $jdkVersionArrBody)
          echo "jdkVersions=$jdkVersionJsonStr" >> $GITHUB_OUTPUT

  package-tests:
    needs: get-shim-versions-from-dist
    continue-on-error: ${{ matrix.isSnapshot }}
    strategy:
      matrix: ${{ fromJSON(needs.get-shim-versions-from-dist.outputs.sparkTailVersions) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # refs/pull/:prNumber/merge

      - name: Setup Java and Maven Env
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8

      - name: package tests check
        run: >
          mvn -Dmaven.wagon.http.retryHandler.count=3 -B package
          -pl integration_tests,tests -am
          -P 'individual,pre-merge'
          -Dbuildver=${{ matrix.spark-version }}
          -Dmaven.scalastyle.skip=true
          -Drat.skip=true
          $COMMON_MVN_FLAGS


  verify-all-modules-with-headSparkVersion:
    needs: get-shim-versions-from-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # refs/pull/:prNumber/merge

      - name: Setup Java and Maven Env
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8

      # includes RAT, code style and doc-gen checks of default shim
      - name: verify all modules with lowest-supported Spark version
        run: >
          mvn -Dmaven.wagon.http.retryHandler.count=3 -B verify
          -P 'individual,pre-merge'
          -Dbuildver=${{ needs.get-shim-versions-from-dist.outputs.sparkHeadVersion }}
          $COMMON_MVN_FLAGS

  verify-modules-with-jdk:
    needs: get-shim-versions-from-dist
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.get-shim-versions-from-dist.outputs.sparkJDKVersions) }}
    steps:
      - uses: actions/checkout@v3 # refs/pull/:prNumber/merge

      - name: Setup Java and Maven Env
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: ${{ matrix.java-version }}
      
      - name: Build JDK
        run: >
          mvn -Dmaven.wagon.http.retryHandler.count=3 -B verify
          -P "individual,pre-merge,jdk${{ matrix.java-version }}"
          -Dbuildver=${{ matrix.spark-version }}
          $COMMON_MVN_FLAGS
