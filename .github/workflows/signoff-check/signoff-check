#!/usr/bin/env python

# Copyright (c) 2020, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A signoff check

The tool checks if any commit got signoff in a pull request.

NOTE: this script is for github actions only, you should not use it anywhere else.
"""
import os
import re
import sys
from argparse import ArgumentParser

from github import Github

SIGNOFF_REGEX = re.compile('Signed-off-by:')


def signoff(token: str, owner: str, repo_name: str, pull_number: int):
    gh = Github(token, per_page=100, user_agent='signoff-check', verify=True)
    pr = gh.get_repo(f"{owner}/{repo_name}").get_pull(pull_number)
    for c in pr.get_commits():
        if SIGNOFF_REGEX.search(c.commit.message):
            print('Found signoff.\n')
            print(f"Commit sha:\n{c.commit.sha}")
            print(f"Commit message:\n{c.commit.message}")
            return True
    return False


def main(token: str, owner: str, repo_name: str, pull_number: int):
    try:
        if not signoff(token, owner, repo_name, pull_number):
            raise Exception('No commits w/ signoff')
    except Exception as e:  # pylint: disable=broad-except
        print(e)
        sys.exit(1)


if __name__ == '__main__':
    parser = ArgumentParser(description="signoff check")
    parser.add_argument("--owner", help="repo owner", default='')
    parser.add_argument("--repo_name", help="repo name", default='')
    parser.add_argument("--token", help="github token, will use GITHUB_TOKEN if empty", default='')
    parser.add_argument("--pull_number", help="pull request number", type=int)
    args = parser.parse_args()

    GITHUB_TOKEN = args.token if args.token else os.environ.get('GITHUB_TOKEN')
    assert GITHUB_TOKEN, 'env GITHUB_TOKEN should not be empty'
    OWNER = args.owner if args.owner else os.environ.get('OWNER')
    assert OWNER, 'env OWNER should not be empty'
    REPO_NAME = args.repo_name if args.repo_name else os.environ.get('REPO_NAME')
    assert REPO_NAME, 'env REPO_NAME should not be empty'
    PULL_NUMBER = args.pull_number if args.pull_number else int(os.environ.get('PULL_NUMBER'))
    assert PULL_NUMBER, 'env PULL_NUMBER should not be empty'

    main(token=GITHUB_TOKEN, owner=OWNER, repo_name=REPO_NAME, pull_number=PULL_NUMBER)
