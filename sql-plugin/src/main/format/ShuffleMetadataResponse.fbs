// Copyright (c) 2019-2020, NVIDIA CORPORATION.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "ShuffleCommon.fbs";

namespace com.nvidia.spark.rapids.format;

/// Descriptor for a buffer within another uncompressed buffer.
struct SubBufferMeta {
  /// byte-offset from the start of the buffer where this buffer begins
  offset: long;

  /// size in bytes of the buffer
  length: long;
}

/// Metadata about cuDF Columns
table ColumnMeta {
  /// number of nulls in the column or -1 if unknown
  null_count: long;

  /// number of rows in the column
  row_count: long;

  /// information about the column data buffer
  data: SubBufferMeta;

  /// information about the column validity buffer
  validity: SubBufferMeta;

  /// information about the column offset buffer
  offsets: SubBufferMeta;

  /// child column metadata
  children: [ColumnMeta];

  /// ordinal of DType enum
  dtype_id: int;

  /// DType scale for decimal types
  dtype_scale: int;
}

/// Metadata about cuDF tables
table TableMeta {
  /// metadata about the table buffer
  buffer_meta: BufferMeta;

  /// metadata for each column in the table buffer
  column_metas: [ColumnMeta];

  /// number of rows in the table
  row_count: long;
}

/// Flat buffer for Rapids UCX Shuffle Metadata Response
table MetadataResponse {
  /// Buffer size in bytes required to hold the full response. If this value is larger than the
  /// maximum response size sent in the corresponding request then the metadata contents in this
  /// response are incomplete and must be re-requested with a larger response buffer allocated.
  full_response_size: long;

  /// metadata for each table
  table_metas: [TableMeta];
}

root_type MetadataResponse;
