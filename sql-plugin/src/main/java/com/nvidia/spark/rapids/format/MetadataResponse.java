// automatically generated by the FlatBuffers compiler, do not modify

package com.nvidia.spark.rapids.format;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Flat buffer for Rapids UCX Shuffle Metadata Response
 */
public final class MetadataResponse extends Table {
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb) { return getRootAsMetadataResponse(_bb, new MetadataResponse()); }
  public static MetadataResponse getRootAsMetadataResponse(ByteBuffer _bb, MetadataResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public MetadataResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * metadata for each table
   */
  public TableMeta tableMetas(int j) { return tableMetas(new TableMeta(), j); }
  public TableMeta tableMetas(TableMeta obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tableMetasLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createMetadataResponse(FlatBufferBuilder builder,
      int table_metasOffset) {
    builder.startObject(1);
    MetadataResponse.addTableMetas(builder, table_metasOffset);
    return MetadataResponse.endMetadataResponse(builder);
  }

  public static void startMetadataResponse(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addTableMetas(FlatBufferBuilder builder, int tableMetasOffset) { builder.addOffset(0, tableMetasOffset, 0); }
  public static int createTableMetasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTableMetasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMetadataResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishMetadataResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMetadataResponseBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

