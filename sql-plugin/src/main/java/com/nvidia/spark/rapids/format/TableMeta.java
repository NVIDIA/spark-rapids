// automatically generated by the FlatBuffers compiler, do not modify

package com.nvidia.spark.rapids.format;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about cuDF tables
 */
public final class TableMeta extends Table {
  public static TableMeta getRootAsTableMeta(ByteBuffer _bb) { return getRootAsTableMeta(_bb, new TableMeta()); }
  public static TableMeta getRootAsTableMeta(ByteBuffer _bb, TableMeta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public TableMeta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * metadata about the table buffer
   */
  public BufferMeta bufferMeta() { return bufferMeta(new BufferMeta()); }
  public BufferMeta bufferMeta(BufferMeta obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  /**
   * metadata for each column in the table buffer
   */
  public ColumnMeta columnMetas(int j) { return columnMetas(new ColumnMeta(), j); }
  public ColumnMeta columnMetas(ColumnMeta obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int columnMetasLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  /**
   * number of rows in the table
   */
  public long rowCount() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateRowCount(long row_count) { int o = __offset(8); if (o != 0) { bb.putLong(o + bb_pos, row_count); return true; } else { return false; } }

  public static int createTableMeta(FlatBufferBuilder builder,
      int buffer_metaOffset,
      int column_metasOffset,
      long row_count) {
    builder.startObject(3);
    TableMeta.addRowCount(builder, row_count);
    TableMeta.addColumnMetas(builder, column_metasOffset);
    TableMeta.addBufferMeta(builder, buffer_metaOffset);
    return TableMeta.endTableMeta(builder);
  }

  public static void startTableMeta(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addBufferMeta(FlatBufferBuilder builder, int bufferMetaOffset) { builder.addOffset(0, bufferMetaOffset, 0); }
  public static void addColumnMetas(FlatBufferBuilder builder, int columnMetasOffset) { builder.addOffset(1, columnMetasOffset, 0); }
  public static int createColumnMetasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startColumnMetasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRowCount(FlatBufferBuilder builder, long rowCount) { builder.addLong(2, rowCount, 0L); }
  public static int endTableMeta(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

