{
  "paragraphs": [
    {
      "text": "%md\n# Introduction to XGBoost Spark with GPU\nMortgage is an example of xgboost classifier to do binary classification. This notebook will show you how to load data, train the xgboost model and use this model to predict if a mushroom is \"poisonous\". Camparing to original XGBoost Spark code, there're only one API difference.\n\n\n## Prerequisite\nSet ```spark.rapids.memory.gpu.pool=NONE, spark.dynamicAllocation.enabled=false, spark.task.resource.gpu.amount=1``` in the init script before starting the dataproc cluster.",
      "user": "anonymous",
      "dateUpdated": "2022-07-27T19:56:12+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h1>Introduction to XGBoost Spark with GPU</h1>\n<p>Mortgage is an example of xgboost classifier to do binary classification. This notebook will show you how to load data, train the xgboost model and use this model to predict if a mushroom is &ldquo;poisonous&rdquo;. Camparing to original XGBoost Spark code, there&rsquo;re only one API difference.</p>\n<h2>Prerequisite</h2>\n<p>Set <code>spark.rapids.memory.gpu.pool=NONE, spark.dynamicAllocation.enabled=false, spark.task.resource.gpu.amount=1</code> in the init script before starting the dataproc cluster.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182414_723095168",
      "id": "20200712-043620_382811823",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-27T19:56:12+0000",
      "dateFinished": "2022-07-27T19:56:12+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:216"
    },
    {
      "text": "import ml.dmlc.xgboost4j.scala.spark.{XGBoostClassifier, XGBoostClassificationModel}\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.sql.types.{DoubleType, IntegerType, StructField, StructType}\nimport org.apache.spark.SparkConf",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import ml.dmlc.xgboost4j.scala.spark.{XGBoostClassifier, XGBoostClassificationModel}\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.sql.types.{DoubleType, IntegerType, StructField, StructType}\nimport org.apache.spark.SparkConf\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182415_1448632237",
      "id": "20200712-043620_1400821320",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:04+0000",
      "dateFinished": "2022-07-26T19:22:25+0000",
      "status": "FINISHED",
      "$$hashKey": "object:217"
    },
    {
      "text": "%md\nBesides CPU version requires some extra libraries, such as:\n\n```scala\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.FloatType\n```",
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:16:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Besides CPU version requires some extra libraries, such as:</p>\n<pre><code class=\"language-scala\">import org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.FloatType\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182415_1591677386",
      "id": "20200712-043620_1625961573",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "status": "READY",
      "$$hashKey": "object:218"
    },
    {
      "title": "Set the dataset path",
      "text": "// Update all path with your Dataproc Environment\nval trainPath = \"gs://dataproc-nv-demo/mortgage_full/train/\"\nval evalPath  = \"gs://dataproc-nv-demo/mortgage_full/test/\"\nval transPath = \"gs://dataproc-nv-demo/mortgage_full/test/\"\nval modelPath = \"gs://dataproc-nv-demo/mortgage_full/model/mortgage\"",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:26:32+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mtrainPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = gs://dataproc-nv-demo/mortgage_full/train/\n\u001b[1m\u001b[34mevalPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = gs://dataproc-nv-demo/mortgage_full/test/\n\u001b[1m\u001b[34mtransPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = gs://dataproc-nv-demo/mortgage_full/test/\n\u001b[1m\u001b[34mmodelPath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = gs://dataproc-nv-demo/mortgage_full/model/mortgage\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182415_358383328",
      "id": "20200712-043620_1955827407",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:26:32+0000",
      "dateFinished": "2022-07-26T19:26:32+0000",
      "status": "FINISHED",
      "$$hashKey": "object:219"
    },
    {
      "text": "%md\n## Build the schema and parameters\nThe mortgage data has 27 columns: 26 features and 1 label. \"deinquency_12\" is the label column. The schema will be used to load data in the future.\n\nThe next block also defines some key parameters used in xgboost training process.",
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:16:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Build the schema and parameters</h2>\n<p>The mortgage data has 27 columns: 26 features and 1 label. &ldquo;deinquency_12&rdquo; is the label column. The schema will be used to load data in the future.</p>\n<p>The next block also defines some key parameters used in xgboost training process.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182415_123802543",
      "id": "20200712-043620_2043825692",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "status": "READY",
      "$$hashKey": "object:220"
    },
    {
      "text": "val labelColName = \"delinquency_12\"\nval schema = StructType(List(\n  StructField(\"orig_channel\", DoubleType),\n  StructField(\"first_home_buyer\", DoubleType),\n  StructField(\"loan_purpose\", DoubleType),\n  StructField(\"property_type\", DoubleType),\n  StructField(\"occupancy_status\", DoubleType),\n  StructField(\"property_state\", DoubleType),\n  StructField(\"product_type\", DoubleType),\n  StructField(\"relocation_mortgage_indicator\", DoubleType),\n  StructField(\"seller_name\", DoubleType),\n  StructField(\"mod_flag\", DoubleType),\n  StructField(\"orig_interest_rate\", DoubleType),\n  StructField(\"orig_upb\", DoubleType),\n  StructField(\"orig_loan_term\", IntegerType),\n  StructField(\"orig_ltv\", DoubleType),\n  StructField(\"orig_cltv\", DoubleType),\n  StructField(\"num_borrowers\", DoubleType),\n  StructField(\"dti\", DoubleType),\n  StructField(\"borrower_credit_score\", DoubleType),\n  StructField(\"num_units\", IntegerType),\n  StructField(\"zip\", IntegerType),\n  StructField(\"mortgage_insurance_percent\", DoubleType),\n  StructField(\"current_loan_delinquency_status\", IntegerType),\n  StructField(\"current_actual_upb\", DoubleType),\n  StructField(\"interest_rate\", DoubleType),\n  StructField(\"loan_age\", DoubleType),\n  StructField(\"msa\", DoubleType),\n  StructField(\"non_interest_bearing_upb\", DoubleType),\n  StructField(labelColName, IntegerType)))\n\nval featureNames = schema.filter(_.name != labelColName).map(_.name).toArray",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:19+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mlabelColName\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = delinquency_12\n\u001b[1m\u001b[34mschema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m = StructType(StructField(orig_channel,DoubleType,true), StructField(first_home_buyer,DoubleType,true), StructField(loan_purpose,DoubleType,true), StructField(property_type,DoubleType,true), StructField(occupancy_status,DoubleType,true), StructField(property_state,DoubleType,true), StructField(product_type,DoubleType,true), StructField(relocation_mortgage_indicator,DoubleType,true), StructField(seller_name,DoubleType,true), StructField(mod_flag,DoubleType,true), StructField(orig_interest_rate,DoubleType,true), StructField(orig_upb,DoubleType,true), StructField(orig_loan_term,IntegerType,true), StructField(orig_ltv,DoubleType,true), StructField(orig_cltv,...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182415_466204905",
      "id": "20200712-043620_542099397",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:25+0000",
      "dateFinished": "2022-07-26T19:22:26+0000",
      "status": "FINISHED",
      "$$hashKey": "object:221"
    },
    {
      "text": "%md\n## Create a new spark session and load data\n\nA new spark session should be created to continue all the following spark operations.\n\nNOTE: in this notebook, the dependency jars have been loaded when installing toree kernel. Alternatively the jars can be loaded into notebook by [%AddJar magic](https://toree.incubator.apache.org/docs/current/user/faq/). However, there's one restriction for `%AddJar`: the jar uploaded can only be available when `AddJar` is called just after a new spark session is created. Do it as below:\n\n```scala\nimport org.apache.spark.sql.SparkSession\nval spark = SparkSession.builder().appName(\"mortgage-GPU\").getOrCreate\n%AddJar file:/data/libs/rapids-4-spark-XXX.jar\n%AddJar file:/data/libs/xgboost4j_3.0-XXX.jar\n%AddJar file:/data/libs/xgboost4j-spark_3.0-XXX.jar\n// ...\n```\n\n##### Please note the new jar \"rapids-4-spark-XXX.jar\" is only needed for GPU version, you can not add it to dependence list for CPU version.",
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:51:06+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Create a new spark session and load data</h2>\n<p>A new spark session should be created to continue all the following spark operations.</p>\n<p>NOTE: in this notebook, the dependency jars have been loaded when installing toree kernel. Alternatively the jars can be loaded into notebook by <a href=\"https://toree.incubator.apache.org/docs/current/user/faq/\">%AddJar magic</a>. However, there&rsquo;s one restriction for <code>%AddJar</code>: the jar uploaded can only be available when <code>AddJar</code> is called just after a new spark session is created. Do it as below:</p>\n<pre><code class=\"language-scala\">import org.apache.spark.sql.SparkSession\nval spark = SparkSession.builder().appName(&quot;mortgage-GPU&quot;).getOrCreate\n%AddJar file:/data/libs/rapids-4-spark-XXX.jar\n%AddJar file:/data/libs/xgboost4j_3.0-XXX.jar\n%AddJar file:/data/libs/xgboost4j-spark_3.0-XXX.jar\n// ...\n</code></pre>\n<h5>Please note the new jar &ldquo;rapids-4-spark-XXX.jar&rdquo; is only needed for GPU version, you can not add it to dependence list for CPU version.</h5>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_1229161727",
      "id": "20200712-043620_889594738",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-25T20:51:06+0000",
      "dateFinished": "2022-07-25T20:51:08+0000",
      "status": "FINISHED",
      "$$hashKey": "object:222"
    },
    {
      "text": "//Update spark config\nspark.conf.set(\"spark.rapids.sql.hasNans\", \"false\")\nspark.conf.set(\"spark.rapids.sql.batchSizeBytes\", \"512M\")\nspark.conf.set(\"spark.rapids.sql.reader.batchSizeBytes\", \"768M\")\n\nval reader = spark.read",
      "user": "anonymous",
      "dateUpdated": "2022-07-27T19:57:34+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mreader\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrameReader\u001b[0m = org.apache.spark.sql.DataFrameReader@4aa71aa6\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_646034133",
      "id": "20200712-043620_622739089",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-27T19:57:34+0000",
      "dateFinished": "2022-07-27T19:57:59+0000",
      "status": "FINISHED",
      "$$hashKey": "object:223"
    },
    {
      "user": "anonymous",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658951870735_465602330",
      "id": "paragraph_1658951870735_465602330",
      "dateCreated": "2022-07-27T19:57:50+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:4939"
    },
    {
      "user": "anonymous",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658951858209_1870534221",
      "id": "paragraph_1658951858209_1870534221",
      "dateCreated": "2022-07-27T19:57:38+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:4851"
    },
    {
      "user": "anonymous",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780222540_20155323",
      "id": "paragraph_1658780222540_20155323",
      "dateCreated": "2022-07-25T20:17:02+0000",
      "status": "READY",
      "$$hashKey": "object:224"
    },
    {
      "user": "anonymous",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780223232_341914976",
      "id": "paragraph_1658780223232_341914976",
      "dateCreated": "2022-07-25T20:17:03+0000",
      "status": "READY",
      "$$hashKey": "object:225"
    },
    {
      "text": "val trainSet = reader.parquet(trainPath)\nval evalSet  = reader.parquet(evalPath)\nval transSet = reader.parquet(transPath)",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:37+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mtrainSet\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [orig_channel: int, first_home_buyer: int ... 26 more fields]\n\u001b[1m\u001b[34mevalSet\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [orig_channel: int, first_home_buyer: int ... 26 more fields]\n\u001b[1m\u001b[34mtransSet\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [orig_channel: int, first_home_buyer: int ... 26 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=0",
              "$$hashKey": "object:1639"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=1",
              "$$hashKey": "object:1640"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=2",
              "$$hashKey": "object:1641"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_2065333463",
      "id": "20200712-043620_562533619",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:37+0000",
      "dateFinished": "2022-07-26T19:22:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:226"
    },
    {
      "text": "%md\n## Set xgboost parameters and build a XGBoostClassifier\n\nFor CPU version, `num_workers` is recommended being equal to the number of CPU cores, while for GPU version, it should be set to the number of GPUs in Spark cluster.\n\nBesides the `tree_method` for CPU version is also different from that for GPU version. Now only \"gpu_hist\" is supported for training on GPU.\n\n```scala\n// difference in parameters\n  \"num_workers\" -> 12,\n  \"tree_method\" -> \"hist\",\n```",
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:56:05+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Set xgboost parameters and build a XGBoostClassifier</h2>\n<p>For CPU version, <code>num_workers</code> is recommended being equal to the number of CPU cores, while for GPU version, it should be set to the number of GPUs in Spark cluster.</p>\n<p>Besides the <code>tree_method</code> for CPU version is also different from that for GPU version. Now only &ldquo;gpu_hist&rdquo; is supported for training on GPU.</p>\n<pre><code class=\"language-scala\">// difference in parameters\n  &quot;num_workers&quot; -&gt; 12,\n  &quot;tree_method&quot; -&gt; &quot;hist&quot;,\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_1922042828",
      "id": "20200712-043620_1948369426",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-25T20:56:05+0000",
      "dateFinished": "2022-07-25T20:56:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:227"
    },
    {
      "text": "val commParamMap = Map(\n  \"eta\" -> 0.1,\n  \"gamma\" -> 0.1,\n  \"missing\" -> 0.0,\n  \"max_depth\" -> 10,\n  \"max_leaves\" -> 256,\n  \"objective\" -> \"binary:logistic\",\n  \"grow_policy\" -> \"depthwise\",\n  \"min_child_weight\" -> 30,\n  \"lambda\" -> 1,\n  \"scale_pos_weight\" -> 2,\n  \"subsample\" -> 1,\n  \"num_round\" -> 100)\n  \n// val xgbParamFinal = commParamMap ++ Map(\"tree_method\" -> \"gpu_hist\", \"num_workers\" -> 20, \"nthread\" -> 7)\nval xgbParamFinal = commParamMap ++ Map(\"tree_method\" -> \"gpu_hist\", \"num_workers\" -> 2, \"nthread\" -> 1)",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:46+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mcommParamMap\u001b[0m: \u001b[1m\u001b[32mscala.collection.immutable.Map[String,Any]\u001b[0m = Map(min_child_weight -> 30, grow_policy -> depthwise, scale_pos_weight -> 2, subsample -> 1, lambda -> 1, max_depth -> 10, objective -> binary:logistic, num_round -> 100, missing -> 0.0, eta -> 0.1, max_leaves -> 256, gamma -> 0.1)\n\u001b[1m\u001b[34mxgbParamFinal\u001b[0m: \u001b[1m\u001b[32mscala.collection.immutable.Map[String,Any]\u001b[0m = Map(min_child_weight -> 30, grow_policy -> depthwise, scale_pos_weight -> 2, num_workers -> 2, subsample -> 1, lambda -> 1, max_depth -> 10, objective -> binary:logistic, num_round -> 100, missing -> 0.0, tree_method -> gpu_hist, eta -> 0.1, max_leaves -> 256, gamma -> 0.1, nthread -> 1)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_1519199189",
      "id": "20200712-043620_726034129",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:46+0000",
      "dateFinished": "2022-07-26T19:22:47+0000",
      "status": "FINISHED",
      "$$hashKey": "object:228"
    },
    {
      "text": "val xgbClassifier = new XGBoostClassifier(xgbParamFinal)\n      .setLabelCol(labelColName)\n      // === diff ===\n      .setFeaturesCol(featureNames)",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:49+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mxgbClassifier\u001b[0m: \u001b[1m\u001b[32mml.dmlc.xgboost4j.scala.spark.XGBoostClassifier\u001b[0m = xgbc_3e7e668f69d8\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182416_1824231943",
      "id": "20200712-043620_427072123",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:49+0000",
      "dateFinished": "2022-07-26T19:22:50+0000",
      "status": "FINISHED",
      "$$hashKey": "object:229"
    },
    {
      "text": "%md\n## Benchmark and train\nThe object `benchmark` is used to compute the elapsed time of some operations.\n\nTraining with evaluation sets is also supported in 2 ways, the same as CPU version's behavior:\n\n* Call API `setEvalSets` after initializing an XGBoostClassifier\n\n```scala\nxgbClassifier.setEvalSets(Map(\"eval\" -> evalSet))\n\n```\n\n* Use parameter `eval_sets` when initializing an XGBoostClassifier\n\n```scala\nval paramMapWithEval = paramMap + (\"eval_sets\" -> Map(\"eval\" -> evalSet))\nval xgbClassifierWithEval = new XGBoostClassifier(paramMapWithEval)\n```\n\nHere chooses the API way to set evaluation sets.",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:22:54+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Benchmark and train</h2>\n<p>The object <code>benchmark</code> is used to compute the elapsed time of some operations.</p>\n<p>Training with evaluation sets is also supported in 2 ways, the same as CPU version&rsquo;s behavior:</p>\n<ul>\n<li>Call API <code>setEvalSets</code> after initializing an XGBoostClassifier</li>\n</ul>\n<pre><code class=\"language-scala\">xgbClassifier.setEvalSets(Map(&quot;eval&quot; -&gt; evalSet))\n\n</code></pre>\n<ul>\n<li>Use parameter <code>eval_sets</code> when initializing an XGBoostClassifier</li>\n</ul>\n<pre><code class=\"language-scala\">val paramMapWithEval = paramMap + (&quot;eval_sets&quot; -&gt; Map(&quot;eval&quot; -&gt; evalSet))\nval xgbClassifierWithEval = new XGBoostClassifier(paramMapWithEval)\n</code></pre>\n<p>Here chooses the API way to set evaluation sets.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182417_613414998",
      "id": "20200712-043620_1915241764",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:22:54+0000",
      "dateFinished": "2022-07-26T19:22:57+0000",
      "status": "FINISHED",
      "$$hashKey": "object:230"
    },
    {
      "text": "xgbClassifier.setEvalSets(Map(\"eval\" -> evalSet))",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:00+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mres1\u001b[0m: \u001b[1m\u001b[32mxgbClassifier.type\u001b[0m = xgbc_3e7e668f69d8\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182417_743581272",
      "id": "20200712-043620_324775014",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:00+0000",
      "dateFinished": "2022-07-26T19:23:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:231"
    },
    {
      "text": "def benchmark[R](phase: String)(block: => R): (R, Float) = {\n  val t0 = System.currentTimeMillis\n  val result = block // call-by-name\n  val t1 = System.currentTimeMillis\n  println(\"Elapsed time [\" + phase + \"]: \" + ((t1 - t0).toFloat / 1000) + \"s\")\n  (result, (t1 - t0).toFloat / 1000)\n}",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:02+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mbenchmark\u001b[0m: \u001b[1m\u001b[32m[R](phase: String)(block: => R)(R, Float)\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182417_1417697528",
      "id": "20200712-043620_1233757982",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:02+0000",
      "dateFinished": "2022-07-26T19:23:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:232"
    },
    {
      "text": "%md\nCPU version reqires an extra step before fitting data to classifier, using `VectorAssembler` to assemble all feature columns into one column. The following code snip shows how to do the vectorizing.\n\n```scala\nobject Vectorize {\n  def apply(df: DataFrame, featureNames: Seq[String], labelName: String): DataFrame = {\n    val toFloat = df.schema.map(f => col(f.name).cast(FloatType))\n    new VectorAssembler()\n      .setInputCols(featureNames.toArray)\n      .setOutputCol(\"features\")\n      .transform(df.select(toFloat:_*))\n      .select(col(\"features\"), col(labelName))\n  }\n}\n\ntrainSet = Vectorize(trainSet, featureCols, labelName)\nevalSet = Vectorize(evalSet, featureCols, labelName)\ntransSet = Vectorize(transSet, featureCols, labelName)\n\n```\n\n`VectorAssembler` is not needed for GPU version. Just fit the loaded data directly to XGBoostClassifier.",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:06+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>CPU version reqires an extra step before fitting data to classifier, using <code>VectorAssembler</code> to assemble all feature columns into one column. The following code snip shows how to do the vectorizing.</p>\n<pre><code class=\"language-scala\">object Vectorize {\n  def apply(df: DataFrame, featureNames: Seq[String], labelName: String): DataFrame = {\n    val toFloat = df.schema.map(f =&gt; col(f.name).cast(FloatType))\n    new VectorAssembler()\n      .setInputCols(featureNames.toArray)\n      .setOutputCol(&quot;features&quot;)\n      .transform(df.select(toFloat:_*))\n      .select(col(&quot;features&quot;), col(labelName))\n  }\n}\n\ntrainSet = Vectorize(trainSet, featureCols, labelName)\nevalSet = Vectorize(evalSet, featureCols, labelName)\ntransSet = Vectorize(transSet, featureCols, labelName)\n\n</code></pre>\n<p><code>VectorAssembler</code> is not needed for GPU version. Just fit the loaded data directly to XGBoostClassifier.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_732392431",
      "id": "20200712-043620_618156060",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:06+0000",
      "dateFinished": "2022-07-26T19:23:06+0000",
      "status": "FINISHED",
      "$$hashKey": "object:233"
    },
    {
      "text": "// Start training\nprintln(\"\\n------ Training ------\")\nval (xgbClassificationModel, _) = benchmark(\"train\") {\n  xgbClassifier.fit(trainSet)\n}",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:10+0000",
      "progress": 12,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n------ Training ------\nTracker started, with env={DMLC_NUM_SERVER=0, DMLC_TRACKER_URI=10.128.0.17, DMLC_TRACKER_PORT=58889, DMLC_NUM_WORKER=2}\nElapsed time [train]: 44.94s\n\u001b[1m\u001b[34mxgbClassificationModel\u001b[0m: \u001b[1m\u001b[32mml.dmlc.xgboost4j.scala.spark.XGBoostClassificationModel\u001b[0m = xgbc_3e7e668f69d8\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=3",
              "$$hashKey": "object:1975"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=4",
              "$$hashKey": "object:1976"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=5",
              "$$hashKey": "object:1977"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=6",
              "$$hashKey": "object:1978"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=7",
              "$$hashKey": "object:1979"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_2144100497",
      "id": "20200712-043620_1418358219",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:10+0000",
      "dateFinished": "2022-07-26T19:23:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:234"
    },
    {
      "text": "%md\n## Transformation and evaluation\nHere uses `transSet` to evaluate our model and prints some useful columns to show our prediction result. After that `MulticlassClassificationEvaluator` is used to calculate an overall accuracy of our predictions.",
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:16:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12,
        "editorHide": true,
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h2>Transformation and evaluation</h2>\n<p>Here uses <code>transSet</code> to evaluate our model and prints some useful columns to show our prediction result. After that <code>MulticlassClassificationEvaluator</code> is used to calculate an overall accuracy of our predictions.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_286481144",
      "id": "20200712-043620_470610364",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "status": "READY",
      "$$hashKey": "object:235"
    },
    {
      "text": "println(\"\\n------ Transforming ------\")\nval (results, _) = benchmark(\"transform\") {\n  val ret = xgbClassificationModel.transform(transSet).cache()\n  ret\n}\nz.show(results.select(\"orig_channel\", labelColName,\"rawPrediction\",\"probability\",\"prediction\").limit(10))\n\nprintln(\"\\n------Accuracy of Evaluation------\")\nval evaluator = new MulticlassClassificationEvaluator().setLabelCol(labelColName)\nval accuracy = evaluator.evaluate(results)\nprintln(accuracy)",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:16+0000",
      "progress": 33,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "orig_channel": "string",
                      "delinquency_12": "string",
                      "rawPrediction": "string",
                      "probability": "string",
                      "prediction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n------ Transforming ------\nElapsed time [transform]: 0.605s\n"
          },
          {
            "type": "TABLE",
            "data": "orig_channel\tdelinquency_12\trawPrediction\tprobability\tprediction\n2\t0\t[6.7734503746032715,-6.7734503746032715]\t[0.9988575651077554,0.001142434892244637]\t0.0\n3\t0\t[7.259932518005371,-7.259932518005371]\t[0.9992973385960795,7.026614039205015E-4]\t0.0\n1\t1\t[2.091115713119507,-2.091115713119507]\t[0.8900366723537445,0.1099633276462555]\t0.0\n3\t0\t[5.631574630737305,-5.631574630737305]\t[0.9964298624545336,0.003570137545466423]\t0.0\n2\t0\t[6.448563098907471,-6.448563098907471]\t[0.9984197062440217,0.0015802937559783459]\t0.0\n1\t0\t[4.20517110824585,-4.20517110824585]\t[0.985301049426198,0.014698950573801994]\t0.0\n1\t0\t[4.119521141052246,-4.119521141052246]\t[0.9840076174587011,0.015992382541298866]\t0.0\n1\t0\t[5.45351505279541,-5.45351505279541]\t[0.9957370213232934,0.0042629786767065525]\t0.0\n2\t0\t[7.131429672241211,-7.131429672241211]\t[0.9992010633577593,7.989366422407329E-4]\t0.0\n1\t0\t[4.941964626312256,-4.941964626312256]\t[0.9929100694134831,0.007089930586516857]\t0.0\n"
          },
          {
            "type": "TEXT",
            "data": "\n------Accuracy of Evaluation------\n0.9849788533315348\n\u001b[1m\u001b[34mresults\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [orig_channel: int, first_home_buyer: int ... 29 more fields]\n\u001b[1m\u001b[34mevaluator\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\u001b[0m = MulticlassClassificationEvaluator: uid=mcEval_3174494a3b22, metricName=f1, metricLabel=0.0, beta=1.0, eps=1.0E-15\n\u001b[1m\u001b[34maccuracy\u001b[0m: \u001b[1m\u001b[32mDouble\u001b[0m = 0.9849788533315348\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=8",
              "$$hashKey": "object:2081"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=9",
              "$$hashKey": "object:2082"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_29336490",
      "id": "20200712-043620_775095654",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:16+0000",
      "dateFinished": "2022-07-26T19:26:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:236"
    },
    {
      "title": "Example to save/load the model, predict with the model",
      "text": "xgbClassificationModel.write.overwrite.save(modelPath)\n\nval modelFromDisk = XGBoostClassificationModel.load(modelPath)\n\nval (results2, _) = benchmark(\"transform2\") {\n  modelFromDisk.transform(transSet)\n}\nz.show(results2.limit(5))",
      "user": "anonymous",
      "dateUpdated": "2022-07-26T19:23:21+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12,
        "editorHide": false,
        "fontSize": 9,
        "title": true,
        "results": {
          "1": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "orig_channel": "string",
                      "first_home_buyer": "string",
                      "loan_purpose": "string",
                      "property_type": "string",
                      "occupancy_status": "string",
                      "property_state": "string",
                      "product_type": "string",
                      "relocation_mortgage_indicator": "string",
                      "seller_name": "string",
                      "mod_flag": "string",
                      "orig_interest_rate": "string",
                      "orig_upb": "string",
                      "orig_loan_term": "string",
                      "orig_ltv": "string",
                      "orig_cltv": "string",
                      "num_borrowers": "string",
                      "dti": "string",
                      "borrower_credit_score": "string",
                      "num_units": "string",
                      "zip": "string",
                      "mortgage_insurance_percent": "string",
                      "current_loan_delinquency_status": "string",
                      "current_actual_upb": "string",
                      "interest_rate": "string",
                      "loan_age": "string",
                      "msa": "string",
                      "non_interest_bearing_upb": "string",
                      "delinquency_12": "string",
                      "rawPrediction": "string",
                      "probability": "string",
                      "prediction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Elapsed time [transform2]: 0.109s\n"
          },
          {
            "type": "TABLE",
            "data": "orig_channel\tfirst_home_buyer\tloan_purpose\tproperty_type\toccupancy_status\tproperty_state\tproduct_type\trelocation_mortgage_indicator\tseller_name\tmod_flag\torig_interest_rate\torig_upb\torig_loan_term\torig_ltv\torig_cltv\tnum_borrowers\tdti\tborrower_credit_score\tnum_units\tzip\tmortgage_insurance_percent\tcurrent_loan_delinquency_status\tcurrent_actual_upb\tinterest_rate\tloan_age\tmsa\tnon_interest_bearing_upb\tdelinquency_12\trawPrediction\tprobability\tprediction\n2\t1\t1\t1\t1\t13\t1\t1\t4\t1\t7.75\t252000.0\t360\t63.0\t63.0\t2.0\t26.0\t697.0\t1\t77\t0.0\t0\t249208.05\t7.75\t15.0\t35620.0\t0.0\t0\t[6.7734503746032715,-6.7734503746032715]\t[0.9988575651077554,0.001142434892244637]\t0.0\n3\t1\t2\t1\t1\t28\t1\t1\t2\t1\t6.875\t200000.0\t360\t71.0\t71.0\t2.0\t13.0\t769.0\t1\t68\t0.0\t0\t198262.12\t6.875\t10.0\t14860.0\t0.0\t0\t[7.259932518005371,-7.259932518005371]\t[0.9992973385960795,7.026614039205015E-4]\t0.0\n1\t1\t1\t1\t1\t2\t1\t1\t2\t1\t7.5\t170000.0\t360\t54.0\t54.0\t1.0\t26.0\t673.0\t1\t330\t0.0\t1\t166868.74\t7.5\t23.0\t33100.0\t0.0\t1\t[2.091115713119507,-2.091115713119507]\t[0.8900366723537445,0.1099633276462555]\t0.0\n3\t1\t3\t1\t1\t4\t1\t1\t1\t1\t7.25\t45000.0\t180\t80.0\t80.0\t2.0\t35.0\t729.0\t1\t317\t0.0\t0\t40445.99\t7.25\t30.0\t0.0\t0.0\t0\t[5.631574630737305,-5.631574630737305]\t[0.9964298624545336,0.003570137545466423]\t0.0\n2\t1\t1\t5\t1\t7\t1\t1\t2\t1\t8.375\t53000.0\t360\t75.0\t75.0\t2.0\t48.0\t751.0\t1\t115\t0.0\t0\t52407.57\t8.375\t17.0\t35620.0\t0.0\t0\t[6.448563098907471,-6.448563098907471]\t[0.9984197062440217,0.0015802937559783459]\t0.0\n"
          },
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mmodelFromDisk\u001b[0m: \u001b[1m\u001b[32mml.dmlc.xgboost4j.scala.spark.XGBoostClassificationModel\u001b[0m = xgbc_3e7e668f69d8\n\u001b[1m\u001b[34mresults2\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [orig_channel: int, first_home_buyer: int ... 29 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=10",
              "$$hashKey": "object:2132"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=11",
              "$$hashKey": "object:2133"
            },
            {
              "jobUrl": "http://saralihalli-dataproc-2208-m.c.rapids-spark.internal:35249/jobs/job?id=12",
              "$$hashKey": "object:2134"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_853911954",
      "id": "20200712-043620_1435219490",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "dateStarted": "2022-07-26T19:23:56+0000",
      "dateFinished": "2022-07-26T19:26:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:237"
    },
    {
      "user": "anonymous",
      "dateUpdated": "2022-07-25T20:16:22+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1658780182418_179700055",
      "id": "paragraph_1594528930033_-558128424",
      "dateCreated": "2022-07-25T20:16:22+0000",
      "status": "READY",
      "$$hashKey": "object:238"
    }
  ],
  "name": "mortgage-gpu-scala",
  "id": "2H9WSWTPH",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.1-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/mortgage-gpu-scala"
}