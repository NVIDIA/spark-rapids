FAILED ../../src/main/python/arithmetic_ops_test.py::test_decimal_bround[Float][INCOMPAT, APPROXIMATE_FLOAT] - AssertionError: GPU and CPU float values are different [1301, 'bround(a, 10)']
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Boolean)), ('c', UniqueLong(not_null))]][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU boolean values are different at [10, 'collect_list(b)'...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Integer)), ('c', UniqueLong(not_null))]][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU int values are different at [2, 'collect_list(b)', 0]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Long)), ('c', UniqueLong(not_null))]][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU int values are different at [2, 'collect_list(b)', 0]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Short)), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU int values are different at [2, 'collect_lis...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Date)), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU date values are different at [2, 'collect_lis...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Timestamp)), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU timestamp values are different at [2, 'c...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Byte)), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU int values are different at [2, 'collect_list...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(String)), ('c', UniqueLong(not_null))]][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU string values are different at [2, 'collect_list(b)', 0]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Float)), ('c', UniqueLong(not_null))]0][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU float values are different [2, 'collect_list(b)', 0]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Double)), ('c', UniqueLong(not_null))]][IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU float values are different [2, 'collect_list(b)', 0]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Decimal(8,3))), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU decimal values are different at [2, '...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Decimal(38,10))), ('c', UniqueLong(not_null))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU decimal values are different at [2,...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Array(Integer)))]][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: CPU and GPU list have different lengths at [2, 'collect_list(b)', 0] CPU: 0 ...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])))]][INJECT_OOM, IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_list[False-[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['c0', Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])])))]][IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_set_on_nested_type[[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])))]][IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_groupby_collect_set_on_nested_type[[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['c0', Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])],['c1', Integer])))]][INJECT_OOM, IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_reduction_collect_set_on_nested_type[[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])))]][INJECT_OOM, IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_reduction_collect_set_on_nested_type[[('a', RepeatSeq(Long)), ('b', RepeatSeq(Struct(['c0', Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])],['c1', Integer])))]][INJECT_OOM, IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[String][INJECT_OOM, IGNORE_ORDER({'local': True})] - AssertionError: GPU and CPU string values are different at [1, 'first(b)']
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Byte)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Short)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Integer)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Long)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Float)][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Double)][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(String)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Boolean)][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Date)][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Timestamp)][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Null)][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Decimal(7,3))][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Decimal(12,2))][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Decimal(20,2))][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Array(Short))][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Array(String))][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Array(Struct(['child0', Byte],['child1', String],['child2', Float]))][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])][IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Struct(['child0', Byte],['child1', Struct(['child0', Byte],['child1', Short],['child2', Integer],['child3', Long],['child4', Float],['child5', Double],['child6', String],['child7', Boolean],['child8', Date],['child9', Timestamp],['child10', Null])])][INJECT_OOM, IGNORE_ORDER({'local': True})]
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Struct(['child0', Array(Short)],['child1', Double])][IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Struct()][INJECT_OOM, IGNORE_ORDER({'local': True})] - TypeError: object of type 'NoneType' has no len()
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Boolean(not_null),Boolean)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Byte(not_null),Byte)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Short(not_null),Short)][INJECT_OOM, IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Integer(not_null),Integer)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Long(not_null),Long)][INJECT_OOM, IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Float(not_null),Float)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Double(not_null),Double)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Date(not_null),Date)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Timestamp(not_null),Timestamp)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(String(not_null),String)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(String(not_null),Array(String))][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(RepeatSeq(not_null)(Integer(not_null)),Long)][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(String(not_null),Map(String(not_null),String))][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Integer(not_null),Array(Integer))][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Short(not_null),Struct(['child0', Byte],['child1', Double]))][IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/hash_aggregate_test.py::test_groupby_first_last[Map(Byte(not_null),Map(Float(not_null),Date))][INJECT_OOM, IGNORE_ORDER({'local': True})] - AttributeError: 'NoneType' object has no attribute 'items'
FAILED ../../src/main/python/json_tuple_test.py::test_json_tuple[\\{"store": \\{"fruit": \\[\\{"weight":\\d,"type":"[a-z]{1,9}"\\}\\], "bicycle":\\{"price":\\d\\d\\.\\d\\d,"color":"[a-z]{0,4}"\\}\\},"email":"[a-z]{1,5}\\@[a-z]{3,10}\\.com","owner":"[a-z]{3,8}"\\}][INJECT_OOM] - Assertio...
FAILED ../../src/main/python/get_json_test.py::test_get_json_object[\\{"store": \\{"fruit": \\[\\{"weight":\\d,"type":"[a-z]{1,9}"\\}\\], "bicycle":\\{"price":\\d\\d\\.\\d\\d,"color":"[a-z]{0,4}"\\}\\},"email":"[a-z]{1,5}\\@[a-z]{3,10}\\.com","owner":"[a-z]{3,8}"\\}] - AssertionError: G...
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_grpby_pivot[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true'}-[('a', RepeatSeq(Double)), ('b', Integer), ('c', Long)]][INJECT_OOM, IGNORE_ORDER({'local': True}), INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_grpby_pivot[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'final'}-[('a', RepeatSeq(Double)), ('b', Integer), ('c', Long)]][INJECT_OOM, IGNORE_ORDER({'local': True}), INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)]
FAILED ../../src/main/python/hash_aggregate_test.py::test_hash_multiple_grpby_pivot[{'spark.rapids.sql.variableFloatAgg.enabled': 'true', 'spark.rapids.sql.castStringToFloat.enabled': 'true', 'spark.rapids.sql.hashAgg.replaceMode': 'partial'}-[('a', RepeatSeq(Double)), ('b', Integer), ('c', Long)]][IGNORE_ORDER({'local': True}), INCOMPAT, APPROXIMATE_FLOAT, ALLOW_NON_GPU(HashAggregateExec,AggregateExpression,UnscaledValue,MakeDecimal,AttributeReference,Alias,Sum,Count,Max,Min,Average,Cast,StddevPop,StddevSamp,VariancePop,VarianceSamp,NormalizeNaNAndZero,GreaterThan,Literal,If,EqualTo,First,SortAggregateExec,Coalesce,IsNull,EqualNullSafe,PivotFirst,GetArrayItem,ShuffleExchangeExec,HashPartitioning)]
FAILED ../../src/main/python/regexp_test.py::test_regexp_extract_all_idx_out_of_bounds[ALLOW_NON_GPU(ProjectExec,RegExpExtractAll)] - Failed: DID NOT RAISE <class 'Exception'>


CPU OUTPUT: [Row(a=None, first(b)={}, last(b)={-15: {}}, first(b)={}, last(b)={-15: {}}),
Row(a=-9223372036854775808, first(b)={9: {-4.9908758760978265e-23: datetime.date(7887, 8, 14), 9.184432433831646e-38: datetime.date(2205, 1, 5)}, -91: {11.450113296508789: datetime.date(4967, 10, 12), -27313176576.0: datetime.date(1497, 6, 14), -5.752581968065386e-30: datetime.date(318, 3, 19)}}, last(b)={-113: {-1.7480402639723444e+35: datetime.date(9241, 7, 15), -6.005342556244918e-21: datetime.date(4476, 8, 2)}, -52: {1.0: datetime.date(9257, 5, 4), 3.4028234663852886e+38: datetime.date(6860, 9, 16), 1.0030189683587154e+18: datetime.date(2000, 2, 29)}}, first(b)={9: {-4.9908758760978265e-23: datetime.date(7887, 8, 14), 9.184432433831646e-38: datetime.date(2205, 1, 5)}, -91: {11.450113296508789: datetime.date(4967, 10, 12), -27313176576.0: datetime.date(1497, 6, 14), -5.752581968065386e-30: datetime.date(318, 3, 19)}}, last(b)={-113: {-1.7480402639723444e+35: datetime.date(9241, 7, 15), -6.005342556244918e-21: datetime.date(4476, 8, 2)}, -52: {1.0: datetime.date(9257, 5, 4), 3.4028234663852886e+38: datetime.date(6860, 9, 16), 1.0030189683587154e+18: datetime.date(2000, 2, 29)}}), Row(a=-8717103806774770614, first(b)={29: {}, -27: {5.4744977472615754e+32: datetime.date(8641, 7, 29)}}, last(b)={47: {}}, first(b)={29: {}, -27: {5.4744977472615754e+32: datetime.date(8641, 7, 29)}}, last(b)={47: {}}), Row(a=-4969503509529324168, first(b)={-82: {-5.270077707564269e-08: datetime.date(5188, 2, 12)}, 45: None, -12: {-1.386474879438266e-15: datetime.date(3791, 12, 10)}}, last(b)={-57: {4.680875298714504e+28: datetime.date(8559, 9, 10)}, 90: {-1.4806223785820212e-34: datetime.date(1, 1, 1), 1.1883426098524588e-26: datetime.date(799, 11, 6)}, 119: {3.121530470123411e+22: datetime.date(2500, 4, 25), 10801.3310546875: datetime.date(4730, 8, 29)}}, first(b)={-82: {-5.270077707564269e-08: datetime.date(5188, 2, 12)}, 45: None, -12: {-1.386474879438266e-15: datetime.date(3791, 12, 10)}}, last(b)={-57: {4.680875298714504e+28: datetime.date(8559, 9, 10)}, 90: {-1.4806223785820212e-34: datetime.date(1, 1, 1), 1.1883426098524588e-26: datetime.date(799, 11, 6)}, 119: {3.121530470123411e+22: datetime.date(2500, 4, 25), 10801.3310546875: datetime.date(4730, 8, 29)}}), Row(a=-4613498067146677133, first(b)={}, last(b)={90: {1.0886364111305916e-23: datetime.date(322, 2, 11), 0.00040846472256816924: datetime.date(2825, 5, 16), 1.4124518570196992e+16: datetime.date(4239, 9, 13)}, -56: None, 79: {}}, first(b)={}, last(b)={90: {1.0886364111305916e-23: datetime.date(322, 2, 11), 0.00040846472256816924: datetime.date(2825, 5, 16), 1.4124518570196992e+16: datetime.date(4239, 9, 13)}, -56: None, 79: {}}), Row(a=-1721624821893985418, first(b)={-81: {-4.1748189105426845e+20: None, -5.625876951262854e+20: datetime.date(1668, 3, 3)}, -77: {}, -3: {}}, last(b)={49: {}, 39: {-1.0: datetime.date(2751, 3, 3), 761885590814720.0: datetime.date(6125, 4, 18), 1.3416639314443529e-20: datetime.date(5081, 10, 21)}}, first(b)={-81: {-4.1748189105426845e+20: None, -5.625876951262854e+20: datetime.date(1668, 3, 3)}, -77: {}, -3: {}}, last(b)={49: {}, 39: {-1.0: datetime.date(2751, 3, 3), 761885590814720.0: datetime.date(6125, 4, 18), 1.3416639314443529e-20: datetime.date(5081, 10, 21)}}), Row(a=-801490471132516571, first(b)={34: {1.2654097004680975e-30: datetime.date(2250, 6, 18), 1.3104311632345956e+19: None}, 27: {}}, last(b)={}, first(b)={34: {1.2654097004680975e-30: datetime.date(2250, 6, 18), 1.3104311632345956e+19: None}, 27: {}}, last(b)={}), Row(a=-373248622796468535, first(b)={43: {}}, last(b)={59: {-4.1216261955046605e+17: datetime.date(8977, 11, 23), 8.005769124101585e-18: datetime.date(4149, 11, 26)}, 11: {0.010457096621394157: datetime.date(3573, 5, 9), -6.560631769118928e-23: datetime.date(3574, 1, 19), -670114971648.0: datetime.date(1694, 11, 17)}}, first(b)={43: {}}, last(b)={59: {-4.1216261955046605e+17: datetime.date(8977, 11, 23), 8.005769124101585e-18: datetime.date(4149, 11, 26)}, 11: {0.010457096621394157: datetime.date(3573, 5, 9), -6.560631769118928e-23: datetime.date(3574, 1, 19), -670114971648.0: datetime.date(1694, 11, 17)}}), Row(a=38134840438159058, first(b)={}, last(b)={118: {}, -120: {}}, first(b)={}, last(b)={118: {}, -120: {}}), Row(a=219362441675995444, first(b)={-118: {1.122872049563739e-06: datetime.date(7490, 1, 31), 1.7041009360756234e-33: datetime.date(166, 11, 4), 1764551032832.0: datetime.date(699, 10, 19)}, -16: {95822179991552.0: datetime.date(1493, 8, 17), 6.695899067935338e+36: datetime.date(6486, 4, 21)}}, last(b)={}, first(b)={-118: {1.122872049563739e-06: datetime.date(7490, 1, 31), 1.7041009360756234e-33: datetime.date(166, 11, 4), 1764551032832.0: datetime.date(699, 10, 19)}, -16: {95822179991552.0: datetime.date(1493, 8, 17), 6.695899067935338e+36: datetime.date(6486, 4, 21)}}, last(b)={}), Row(a=475054791535496755, first(b)={101: {-1.0: datetime.date(3258, 3, 25), -6.8327777678374325e+25: datetime.date(6660, 9, 22)}, -83: {-4.627457920410636e-37: datetime.date(2000, 2, 29)}, 15: {-inf: datetime.date(1937, 2, 10), 1.0733689814872547e-29: datetime.date(4591, 1, 25), -4.017091262891492e+35: datetime.date(5166, 6, 29)}}, last(b)={123: {-0.0: datetime.date(3096, 10, 9), 1.4703015700842026e+21: datetime.date(9001, 2, 25), 1.3317134938198305e-12: datetime.date(9805, 2, 24)}, -128: {-1.893938683192884e-28: datetime.date(1027, 11, 20)}}, first(b)={101: {-1.0: datetime.date(3258, 3, 25), -6.8327777678374325e+25: datetime.date(6660, 9, 22)}, -83: {-4.627457920410636e-37: datetime.date(2000, 2, 29)}, 15: {-inf: datetime.date(1937, 2, 10), 1.0733689814872547e-29: datetime.date(4591, 1, 25), -4.017091262891492e+35: datetime.date(5166, 6, 29)}}, last(b)={123: {-0.0: datetime.date(3096, 10, 9), 1.4703015700842026e+21: datetime.date(9001, 2, 25), 1.3317134938198305e-12: datetime.date(9805, 2, 24)}, -128: {-1.893938683192884e-28: datetime.date(1027, 11, 20)}}), Row(a=1970144316115646685, first(b)={20: {-7.534738218493304e+29: datetime.date(8000, 2, 29)}, -123: {-1.8894634685368104e-24: datetime.date(2000, 2, 29), 1.5970050272364212e+27: datetime.date(5997, 6, 3)}}, last(b)={3: {-3.796070462265884e-24: datetime.date(4343, 12, 7), 17628968.0: datetime.date(3236, 5, 1), -7.298326739804372e-39: datetime.date(3928, 12, 18)}}, first(b)={20: {-7.534738218493304e+29: datetime.date(8000, 2, 29)}, -123: {-1.8894634685368104e-24: datetime.date(2000, 2, 29), 1.5970050272364212e+27: datetime.date(5997, 6, 3)}}, last(b)={3: {-3.796070462265884e-24: datetime.date(4343, 12, 7), 17628968.0: datetime.date(3236, 5, 1), -7.298326739804372e-39: datetime.date(3928, 12, 18)}}), Row(a=5464225219094694383, first(b)={-33: {-5.578486442565918: datetime.date(4400, 12, 2), -7.756466201737402e+33: datetime.date(5517, 9, 18)}, -107: {4.024062427834287e-20: datetime.date(8000, 3, 1), -5.930059796626126e-17: datetime.date(6000, 3, 1), 878105124143104.0: datetime.date(1275, 1, 21)}, 39: {-4208760054611968.0: datetime.date(9158, 7, 12)}}, last(b)={-18: {nan: datetime.date(7327, 10, 20), -3.4028234663852886e+38: datetime.date(8757, 1, 2), -4.270544615664754e+24: datetime.date(3933, 5, 27)}, 97: {-7859.232421875: datetime.date(9975, 5, 10), -1.2347807939681566e-29: datetime.date(4, 3, 1), -6.94501045215409e+30: datetime.date(8188, 10, 13)}, -70: {3.8530136295921416e-35: datetime.date(5059, 12, 3), -3978836736.0: datetime.date(4, 3, 1)}}, first(b)={-33: {-5.578486442565918: datetime.date(4400, 12, 2), -7.756466201737402e+33: datetime.date(5517, 9, 18)}, -107: {4.024062427834287e-20: datetime.date(8000, 3, 1), -5.930059796626126e-17: datetime.date(6000, 3, 1), 878105124143104.0: datetime.date(1275, 1, 21)}, 39: {-4208760054611968.0: datetime.date(9158, 7, 12)}}, last(b)={-18: {nan: datetime.date(7327, 10, 20), -3.4028234663852886e+38: datetime.date(8757, 1, 2), -4.270544615664754e+24: datetime.date(3933, 5, 27)}, 97: {-7859.232421875: datetime.date(9975, 5, 10), -1.2347807939681566e-29: datetime.date(4, 3, 1), -6.94501045215409e+30: datetime.date(8188, 10, 13)}, -70: {3.8530136295921416e-35: datetime.date(5059, 12, 3), -3978836736.0: datetime.date(4, 3, 1)}}), Row(a=5474254283901062774, first(b)=None, last(b)={-77: {1.1177407521629538e-33: datetime.date(7979, 6, 25), 1.0616722350880454e+24: datetime.date(4829, 4, 26)}, -82: {-9398011213905920.0: datetime.date(5614, 7, 31), -3.3140760084536704e+35: datetime.date(2044, 3, 10)}, 13: {}}, first(b)={-37: {}, -52: {}, -56: {-40024.2265625: datetime.date(3591, 10, 14)}}, last(b)={-77: {1.1177407521629538e-33: datetime.date(7979, 6, 25), 1.0616722350880454e+24: datetime.date(4829, 4, 26)}, -82: {-9398011213905920.0: datetime.date(5614, 7, 31), -3.3140760084536704e+35: datetime.date(2044, 3, 10)}, 13: {}}), Row(a=6180146290531704930, first(b)={-3: {-4.848365316135582e-27: datetime.date(1749, 8, 24), -9.45306677380131e-09: datetime.date(9466, 1, 26), -4.583995762444011e-30: datetime.date(350, 10, 4)}}, last(b)={-18: {}, -46: {-5.620376838052133e-28: datetime.date(8911, 10, 12), -6.892488283760476e-39: datetime.date(2902, 6, 30)}}, first(b)={-3: {-4.848365316135582e-27: datetime.date(1749, 8, 24), -9.45306677380131e-09: datetime.date(9466, 1, 26), -4.583995762444011e-30: datetime.date(350, 10, 4)}}, last(b)={-18: {}, -46: {-5.620376838052133e-28: datetime.date(8911, 10, 12), -6.892488283760476e-39: datetime.date(2902, 6, 30)}}), Row(a=6527092348415079311, first(b)={-60: None, -96: {}}, last(b)={}, first(b)={-60: None, -96: {}}, last(b)={}), Row(a=7521661924887948850, first(b)={56: {2.8011328756904464e-33: datetime.date(7613, 10, 11)}, -2: {8.791944151837596e-26: datetime.date(399, 8, 21), 0.00024607175146229565: datetime.date(7042, 7, 6), -4.5598120032046856e+27: datetime.date(6070, 7, 4)}, -87: {71580.7109375: datetime.date(1356, 11, 2), 9.274497258710316e-17: datetime.date(1984, 2, 1)}}, last(b)={-39: {7.366020908897205e+28: None}, -120: {3.4028234663852886e+38: datetime.date(6185, 1, 15), -1.5020861290904186e-11: datetime.date(9587, 1, 2), -1.9487220304944754e+35: datetime.date(6228, 11, 25)}}, first(b)={56: {2.8011328756904464e-33: datetime.date(7613, 10, 11)}, -2: {8.791944151837596e-26: datetime.date(399, 8, 21), 0.00024607175146229565: datetime.date(7042, 7, 6), -4.5598120032046856e+27: datetime.date(6070, 7, 4)}, -87: {71580.7109375: datetime.date(1356, 11, 2), 9.274497258710316e-17: datetime.date(1984, 2, 1)}}, last(b)={-39: {7.366020908897205e+28: None}, -120: {3.4028234663852886e+38: datetime.date(6185, 1, 15), -1.5020861290904186e-11: datetime.date(9587, 1, 2), -1.9487220304944754e+35: datetime.date(6228, 11, 25)}}), Row(a=8520568399957671882, first(b)={29: None, 71: {}}, last(b)={-73: {-inf: datetime.date(3205, 6, 27), 5.695935630427941e+35: datetime.date(7936, 12, 14)}, -16: {nan: datetime.date(4000, 2, 29), 9.416045500660477e-33: datetime.date(992, 8, 17), -1952832.125: datetime.date(6083, 1, 2)}}, first(b)={29: None, 71: {}}, last(b)={-73: {-inf: datetime.date(3205, 6, 27), 5.695935630427941e+35: datetime.date(7936, 12, 14)}, -16: {nan: datetime.date(4000, 2, 29), 9.416045500660477e-33: datetime.date(992, 8, 17), -1952832.125: datetime.date(6083, 1, 2)}}), Row(a=9218184769308444545, first(b)=None, last(b)={}, first(b)={48: {inf: datetime.date(142, 4, 8), -63291988.0: datetime.date(1937, 1, 27), -1003922688.0: datetime.date(6197, 10, 4)}, -10: {3.035515641197446e+29: datetime.date(4000, 2, 29)}, -16: {-4.829402923583984: datetime.date(4645, 8, 9)}}, last(b)={})]
GPU OUTPUT: [Row(a=None, first(b)={}, last(b)={-15: {}}, first(b)={}, last(b)={-15: {}}), 
Row(a=-9223372036854775808, first(b)=None, last(b)={-113: {-1.7480402639723444e+35: datetime.date(9241, 7, 15), -6.005342556244918e-21: datetime.date(4476, 8, 2)}, -52: {1.0: datetime.date(9257, 5, 4), 3.4028234663852886e+38: datetime.date(6860, 9, 16), 1.0030189683587154e+18: datetime.date(2000, 2, 29)}}, first(b)={}, last(b)={-113: {-1.7480402639723444e+35: datetime.date(9241, 7, 15), -6.005342556244918e-21: datetime.date(4476, 8, 2)}, -52: {1.0: datetime.date(9257, 5, 4), 3.4028234663852886e+38: datetime.date(6860, 9, 16), 1.0030189683587154e+18: datetime.date(2000, 2, 29)}}), Row(a=-8717103806774770614, first(b)=None, last(b)={47: {}}, first(b)={-33: {}, -77: {228405.09375: datetime.date(1485, 4, 2), -4.086517492396524e-06: datetime.date(6447, 6, 2)}, 85: {-3.802530509410392e-36: datetime.date(4, 2, 29)}}, last(b)={47: {}}), Row(a=-4969503509529324168, first(b)={}, last(b)={-57: {4.680875298714504e+28: datetime.date(8559, 9, 10)}, 90: {-1.4806223785820212e-34: datetime.date(1, 1, 1), 1.1883426098524588e-26: datetime.date(799, 11, 6)}, 119: {3.121530470123411e+22: datetime.date(2500, 4, 25), 10801.3310546875: datetime.date(4730, 8, 29)}}, first(b)={}, last(b)={-57: {4.680875298714504e+28: datetime.date(8559, 9, 10)}, 90: {-1.4806223785820212e-34: datetime.date(1, 1, 1), 1.1883426098524588e-26: datetime.date(799, 11, 6)}, 119: {3.121530470123411e+22: datetime.date(2500, 4, 25), 10801.3310546875: datetime.date(4730, 8, 29)}}), Row(a=-4613498067146677133, first(b)={8: {-2.5436747278354093e+22: datetime.date(3970, 11, 22)}, 100: {1.2360220366903337e-37: datetime.date(4, 2, 29)}, -11: {-2.2001447666077473e-34: datetime.date(2513, 5, 26), -1.1084828801383173e-12: datetime.date(3328, 9, 28)}}, last(b)={90: {1.0886364111305916e-23: datetime.date(322, 2, 11), 0.00040846472256816924: datetime.date(2825, 5, 16), 1.4124518570196992e+16: datetime.date(4239, 9, 13)}, -56: None, 79: {}}, first(b)={8: {-2.5436747278354093e+22: datetime.date(3970, 11, 22)}, 100: {1.2360220366903337e-37: datetime.date(4, 2, 29)}, -11: {-2.2001447666077473e-34: datetime.date(2513, 5, 26), -1.1084828801383173e-12: datetime.date(3328, 9, 28)}}, last(b)={90: {1.0886364111305916e-23: datetime.date(322, 2, 11), 0.00040846472256816924: datetime.date(2825, 5, 16), 1.4124518570196992e+16: datetime.date(4239, 9, 13)}, -56: None, 79: {}}), Row(a=-1721624821893985418, first(b)={-115: {1.7862681252044573e-29: None, 2747983872.0: datetime.date(6000, 3, 1)}, -124: {-2.7375518056638975e-30: datetime.date(3821, 7, 18), 3.3310688987601453e-38: datetime.date(9999, 12, 31)}}, last(b)={49: {}, 39: {-1.0: datetime.date(2751, 3, 3), 761885590814720.0: datetime.date(6125, 4, 18), 1.3416639314443529e-20: datetime.date(5081, 10, 21)}}, first(b)={-115: {1.7862681252044573e-29: None, 2747983872.0: datetime.date(6000, 3, 1)}, -124: {-2.7375518056638975e-30: datetime.date(3821, 7, 18), 3.3310688987601453e-38: datetime.date(9999, 12, 31)}}, last(b)={49: {}, 39: {-1.0: datetime.date(2751, 3, 3), 761885590814720.0: datetime.date(6125, 4, 18), 1.3416639314443529e-20: datetime.date(5081, 10, 21)}}), Row(a=-801490471132516571, first(b)={34: {1.2117518832197528e+36: datetime.date(4000, 3, 1)}}, last(b)={}, first(b)={34: {1.2117518832197528e+36: datetime.date(4000, 3, 1)}}, last(b)={}), Row(a=-373248622796468535, first(b)={-117: {5.9160924032121105e-27: datetime.date(4000, 2, 29), -0.00366050167940557: datetime.date(6391, 2, 9), -4.5211227406267676e-38: datetime.date(7228, 3, 31)}}, last(b)={59: {-4.1216261955046605e+17: datetime.date(8977, 11, 23), 8.005769124101585e-18: datetime.date(4149, 11, 26)}, 11: {0.010457096621394157: datetime.date(3573, 5, 9), -6.560631769118928e-23: datetime.date(3574, 1, 19), -670114971648.0: datetime.date(1694, 11, 17)}}, first(b)={-117: {5.9160924032121105e-27: datetime.date(4000, 2, 29), -0.00366050167940557: datetime.date(6391, 2, 9), -4.5211227406267676e-38: datetime.date(7228, 3, 31)}}, last(b)={59: {-4.1216261955046605e+17: datetime.date(8977, 11, 23), 8.005769124101585e-18: datetime.date(4149, 11, 26)}, 11: {0.010457096621394157: datetime.date(3573, 5, 9), -6.560631769118928e-23: datetime.date(3574, 1, 19), -670114971648.0: datetime.date(1694, 11, 17)}}), Row(a=38134840438159058, first(b)={102: {2.508168371592483e+30: datetime.date(5603, 5, 12)}}, last(b)={118: {}, -120: {}}, first(b)={102: {2.508168371592483e+30: datetime.date(5603, 5, 12)}}, last(b)={118: {}, -120: {}}), Row(a=219362441675995444, first(b)=None, last(b)={}, first(b)={112: {-0.10044924914836884: datetime.date(2120, 12, 29)}}, last(b)={}), Row(a=475054791535496755, first(b)={-21: {-0.0: datetime.date(25, 3, 9), -1.2069923475818883e-35: datetime.date(2628, 1, 8), -0.005231407005339861: datetime.date(3059, 6, 10)}, 121: {1.862869050195968e+17: datetime.date(8000, 2, 29), 5.147870199334347e-17: datetime.date(1174, 12, 9)}, -80: {}}, last(b)={123: {-0.0: datetime.date(3096, 10, 9), 1.4703015700842026e+21: datetime.date(9001, 2, 25), 1.3317134938198305e-12: datetime.date(9805, 2, 24)}, -128: {-1.893938683192884e-28: datetime.date(1027, 11, 20)}}, first(b)={-21: {-0.0: datetime.date(25, 3, 9), -1.2069923475818883e-35: datetime.date(2628, 1, 8), -0.005231407005339861: datetime.date(3059, 6, 10)}, 121: {1.862869050195968e+17: datetime.date(8000, 2, 29), 5.147870199334347e-17: datetime.date(1174, 12, 9)}, -80: {}}, last(b)={123: {-0.0: datetime.date(3096, 10, 9), 1.4703015700842026e+21: datetime.date(9001, 2, 25), 1.3317134938198305e-12: datetime.date(9805, 2, 24)}, -128: {-1.893938683192884e-28: datetime.date(1027, 11, 20)}}), Row(a=1970144316115646685, first(b)={2: {269.4669189453125: datetime.date(9732, 8, 8), -1.1555129381598337e+31: datetime.date(725, 9, 12)}, -68: {33631577833472.0: datetime.date(5424, 2, 1), 1915074.75: datetime.date(5690, 5, 21)}}, last(b)={3: {-3.796070462265884e-24: datetime.date(4343, 12, 7), 17628968.0: datetime.date(3236, 5, 1), -7.298326739804372e-39: datetime.date(3928, 12, 18)}}, first(b)={2: {269.4669189453125: datetime.date(9732, 8, 8), -1.1555129381598337e+31: datetime.date(725, 9, 12)}, -68: {33631577833472.0: datetime.date(5424, 2, 1), 1915074.75: datetime.date(5690, 5, 21)}}, last(b)={3: {-3.796070462265884e-24: datetime.date(4343, 12, 7), 17628968.0: datetime.date(3236, 5, 1), -7.298326739804372e-39: datetime.date(3928, 12, 18)}}), Row(a=5464225219094694383, first(b)={-76: None}, last(b)={-18: {nan: datetime.date(7327, 10, 20), -3.4028234663852886e+38: datetime.date(8757, 1, 2), -4.270544615664754e+24: datetime.date(3933, 5, 27)}, 97: {-7859.232421875: datetime.date(9975, 5, 10), -1.2347807939681566e-29: datetime.date(4, 3, 1), -6.94501045215409e+30: datetime.date(8188, 10, 13)}, -70: {3.8530136295921416e-35: datetime.date(5059, 12, 3), -3978836736.0: datetime.date(4, 3, 1)}}, first(b)={-76: None}, last(b)={-18: {nan: datetime.date(7327, 10, 20), -3.4028234663852886e+38: datetime.date(8757, 1, 2), -4.270544615664754e+24: datetime.date(3933, 5, 27)}, 97: {-7859.232421875: datetime.date(9975, 5, 10), -1.2347807939681566e-29: datetime.date(4, 3, 1), -6.94501045215409e+30: datetime.date(8188, 10, 13)}, -70: {3.8530136295921416e-35: datetime.date(5059, 12, 3), -3978836736.0: datetime.date(4, 3, 1)}}), Row(a=5474254283901062774, first(b)={-114: {5.398984194661045e+20: datetime.date(106, 9, 16), 1.088165365106808e-12: datetime.date(293, 3, 18)}, 71: {-1.2920878702250077e-33: datetime.date(2488, 5, 5), 42646880.0: datetime.date(2000, 2, 29), 4.009176843825425e-38: datetime.date(4, 2, 29)}}, last(b)={-77: {1.1177407521629538e-33: datetime.date(7979, 6, 25), 1.0616722350880454e+24: datetime.date(4829, 4, 26)}, -82: {-9398011213905920.0: datetime.date(5614, 7, 31), -3.3140760084536704e+35: datetime.date(2044, 3, 10)}, 13: {}}, first(b)={-114: {5.398984194661045e+20: datetime.date(106, 9, 16), 1.088165365106808e-12: datetime.date(293, 3, 18)}, 71: {-1.2920878702250077e-33: datetime.date(2488, 5, 5), 42646880.0: datetime.date(2000, 2, 29), 4.009176843825425e-38: datetime.date(4, 2, 29)}}, last(b)={-77: {1.1177407521629538e-33: datetime.date(7979, 6, 25), 1.0616722350880454e+24: datetime.date(4829, 4, 26)}, -82: {-9398011213905920.0: datetime.date(5614, 7, 31), -3.3140760084536704e+35: datetime.date(2044, 3, 10)}, 13: {}}), Row(a=6180146290531704930, first(b)={-113: None}, last(b)={-18: {}, -46: {-5.620376838052133e-28: datetime.date(8911, 10, 12), -6.892488283760476e-39: datetime.date(2902, 6, 30)}}, first(b)={-113: None}, last(b)={-18: {}, -46: {-5.620376838052133e-28: datetime.date(8911, 10, 12), -6.892488283760476e-39: datetime.date(2902, 6, 30)}}), Row(a=6527092348415079311, first(b)={-60: None, -96: {}}, last(b)={}, first(b)={-60: None, -96: {}}, last(b)={}), Row(a=7521661924887948850, first(b)={113: None, 66: {1.4830456969204398e-32: datetime.date(6976, 8, 1), -3.201039176247058e-34: datetime.date(9598, 8, 9)}}, last(b)={-39: {7.366020908897205e+28: None}, -120: {3.4028234663852886e+38: datetime.date(6185, 1, 15), -1.5020861290904186e-11: datetime.date(9587, 1, 2), -1.9487220304944754e+35: datetime.date(6228, 11, 25)}}, first(b)={113: None, 66: {1.4830456969204398e-32: datetime.date(6976, 8, 1), -3.201039176247058e-34: datetime.date(9598, 8, 9)}}, last(b)={-39: {7.366020908897205e+28: None}, -120: {3.4028234663852886e+38: datetime.date(6185, 1, 15), -1.5020861290904186e-11: datetime.date(9587, 1, 2), -1.9487220304944754e+35: datetime.date(6228, 11, 25)}}), Row(a=8520568399957671882, first(b)={93: {-2.8736232143833362e-12: datetime.date(6060, 2, 4)}, -127: {-3.408862298984625e+19: datetime.date(5029, 7, 14)}}, last(b)={-73: {-inf: datetime.date(3205, 6, 27), 5.695935630427941e+35: datetime.date(7936, 12, 14)}, -16: {nan: datetime.date(4000, 2, 29), 9.416045500660477e-33: datetime.date(992, 8, 17), -1952832.125: datetime.date(6083, 1, 2)}}, first(b)={93: {-2.8736232143833362e-12: datetime.date(6060, 2, 4)}, -127: {-3.408862298984625e+19: datetime.date(5029, 7, 14)}}, last(b)={-73: {-inf: datetime.date(3205, 6, 27), 5.695935630427941e+35: datetime.date(7936, 12, 14)}, -16: {nan: datetime.date(4000, 2, 29), 9.416045500660477e-33: datetime.date(992, 8, 17), -1952832.125: datetime.date(6083, 1, 2)}}), Row(a=9218184769308444545, first(b)={125: {-2.632260980198466e+30: datetime.date(9058, 5, 25)}}, last(b)={}, first(b)={125: {-2.632260980198466e+30: datetime.date(9058, 5, 25)}}, last(b)={})]


CPU OUTPUT: [Row(a=None, first(b)=[], last(b)=[[32767, 11661, -3930, 19646, -7186, -28721, -1818, 10246], [-32048, None, -2105, -20658, -22593, -28101]], first(b)=[], last(b)=[[32767, 11661, -3930, 19646, -7186, -28721, -1818, 10246], [-32048, None, -2105, -20658, -22593, -28101]]), Row(a=-9223372036854775808, first(b)=[[], [28573, -11958, -11583, -20127, 5272, 22905, -32121, -13604, 256, 14962], [23426], [-18717, -19752, 6950, -9170, 26182, -19611, 29788, 16415, 6564], [28177, 29599, 10434, 23306, -17679], [10320, 29041, -23170, 28374, 17763, -6175, -24103, 15037, 1], [6843, 17615, -4156, 28022], [29492, None, -571, -12352, -26911, -20309, -19189, -19884, 1363, -21590], [-10941, 27691], [-6352, 19095, -20883, -15879, 12445, 32767]], last(b)=[[15818, -6199, 328, -2196], [1]], first(b)=[[], [28573, -11958, -11583, -20127, 5272, 22905, -32121, -13604, 256, 14962], [23426], [-18717, -19752, 6950, -9170, 26182, -19611, 29788, 16415, 6564], [28177, 29599, 10434, 23306, -17679], [10320, 29041, -23170, 28374, 17763, -6175, -24103, 15037, 1], [6843, 17615, -4156, 28022], [29492, None, -571, -12352, -26911, -20309, -19189, -19884, 1363, -21590], [-10941, 27691], [-6352, 19095, -20883, -15879, 12445, 32767]], last(b)=[[15818, -6199, 328, -2196], [1]]), Row(a=-8717103806774770614, first(b)=[[3799, 7861, 31376, 16557, 20022, -1, 13183], [25704, 19197], [-28988], [-17988, -1759, -841, 12266, -26750, None], [167, 19638, -25032, -3101, 11425, 32767, None, -27141], [21309, None, -19759, 4229, -27258], [29780, -5678, -26549, 4022, None]], last(b)=[[26289, 10301, 24841, 30561, -10204, -24652], [16526, 28212, 388, 30218, 25214, 22368, 0, -32768, -10704], [19596, 23979, -16029], [31693, 15194, 28872, -2765, 1700, -18403, 28932, -22976], [14392, 10813, -19765, -29110, -20725], []], first(b)=[[3799, 7861, 31376, 16557, 20022, -1, 13183], [25704, 19197], [-28988], [-17988, -1759, -841, 12266, -26750, None], [167, 19638, -25032, -3101, 11425, 32767, None, -27141], [21309, None, -19759, 4229, -27258], [29780, -5678, -26549, 4022, None]], last(b)=[[26289, 10301, 24841, 30561, -10204, -24652], [16526, 28212, 388, 30218, 25214, 22368, 0, -32768, -10704], [19596, 23979, -16029], [31693, 15194, 28872, -2765, 1700, -18403, 28932, -22976], [14392, 10813, -19765, -29110, -20725], []]), Row(a=-4969503509529324168, first(b)=[[-12367, 31116, None, -9835, -28198, None, 27372, -16856, 23226], [-32058, 9833, 32257, -5154, -29756], [6218, 8455], [-7294, -9950, 24085, -31333, -27516, 23619, -25562], [29557, -20651, 17380, -22241, -28588, -13711]], last(b)=[[29346, 14238, -32522], [26557], [-31345, 3369, -9877, 0, -6098, 31056, 10835], [6124], [], [-19475, 32751, None, 13012, -7482, 6440, -12802, -18244, 26752]], first(b)=[[-12367, 31116, None, -9835, -28198, None, 27372, -16856, 23226], [-32058, 9833, 32257, -5154, -29756], [6218, 8455], [-7294, -9950, 24085, -31333, -27516, 23619, -25562], [29557, -20651, 17380, -22241, -28588, -13711]], last(b)=[[29346, 14238, -32522], [26557], [-31345, 3369, -9877, 0, -6098, 31056, 10835], [6124], [], [-19475, 32751, None, 13012, -7482, 6440, -12802, -18244, 26752]]), Row(a=-4613498067146677133, first(b)=[[5168, 30502, None, -10259, 18735, 4004], []], last(b)=[[-20654, 31730, -13596], [-24825, -21469, -16034, -25966, 14139, 22969, 22239, 5060, 22268, -25051]], first(b)=[[5168, 30502, None, -10259, 18735, 4004], []], last(b)=[[-20654, 31730, -13596], [-24825, -21469, -16034, -25966, 14139, 22969, 22239, 5060, 22268, -25051]]), Row(a=-1721624821893985418, first(b)=[], last(b)=None, first(b)=[], last(b)=[[-32768], [830, -19641, -26663, 14646], [None, 28359, -17592, -28503, -1397], [-9983, 2474, 22005, 8879, 29084, -842, -17490, -2397, -13205], [-10981, 21541, None], [-2387, -8650, -7671], [27206, None, 3075, -13871, -32768, -9063, 8103], []]), Row(a=-801490471132516571, first(b)=[[None, 2170, 20425, -22252, 1873, 6295, -2957, 17660], [15418, 30189, 13553, 20149, 9137, -17138, 26599, -18857], [-4366, 25461, -23475, -29305, -26415, -23732, 31284], [18021, -30549, -10792, -14865, -5779, -1550, 8992], [-16011, 32321, 1, None, 4186], [-11052], [-29126, 15018, 12647]], last(b)=[[-30283, -21984, None, -25971], [-1307, 22907, 4802, -17241, -6062, 30686, 24674, -11435, -13231], None, [5057, 16377], [18708, -18353, -1, 24734], None, [2943, 31274, 26977, -4614, -22390]], first(b)=[[None, 2170, 20425, -22252, 1873, 6295, -2957, 17660], [15418, 30189, 13553, 20149, 9137, -17138, 26599, -18857], [-4366, 25461, -23475, -29305, -26415, -23732, 31284], [18021, -30549, -10792, -14865, -5779, -1550, 8992], [-16011, 32321, 1, None, 4186], [-11052], [-29126, 15018, 12647]], last(b)=[[-30283, -21984, None, -25971], [-1307, 22907, 4802, -17241, -6062, 30686, 24674, -11435, -13231], None, [5057, 16377], [18708, -18353, -1, 24734], None, [2943, 31274, 26977, -4614, -22390]]), Row(a=-373248622796468535, first(b)=[[-23210, -3145, -27841, -14379, -8178], [-28204, -18844, -30122, 2601, 29890], [19581, 32767, 23638], [13173, 16196, 28464], [956, -11556, 32767, -14917, -23611, 19284, -32768, 4382, 24743, -9091], [11237, 27511, -13095, -833, 11948, -6141, 16865, 29754, None], [5095, -4571, 1100, None, 32767, -23062, -8491, -27990, -6746], [-1330, 0, 9634, -32119, 24824, 10530, -3093, -31976, -26939, 24085]], last(b)=[[-23964], [-27734, -22612, -27877, 8485, -25831], None, [1584, None, -3024, 13217, -28229], [18345, 25986, -1182, 20494, -31789, -4223, -15630, -28001, -24164, -1260], [1678, -7229, 27453, 13612, -14864, -1783, 21430, -833, 24272], [-20017, 21250, -11087, 21951, -29985, 12850]], first(b)=[[-23210, -3145, -27841, -14379, -8178], [-28204, -18844, -30122, 2601, 29890], [19581, 32767, 23638], [13173, 16196, 28464], [956, -11556, 32767, -14917, -23611, 19284, -32768, 4382, 24743, -9091], [11237, 27511, -13095, -833, 11948, -6141, 16865, 29754, None], [5095, -4571, 1100, None, 32767, -23062, -8491, -27990, -6746], [-1330, 0, 9634, -32119, 24824, 10530, -3093, -31976, -26939, 24085]], last(b)=[[-23964], [-27734, -22612, -27877, 8485, -25831], None, [1584, None, -3024, 13217, -28229], [18345, 25986, -1182, 20494, -31789, -4223, -15630, -28001, -24164, -1260], [1678, -7229, 27453, 13612, -14864, -1783, 21430, -833, 24272], [-20017, 21250, -11087, 21951, -29985, 12850]]), Row(a=38134840438159058, first(b)=[[-26881, 22815, -24247], [1, -31708, 23699, -13713], [-25541, -21917, None], [-12436, -29910, -7676, -23511], [12406, 1, 17622, 2458, -7818], [-1498, -19636, 20168, 8817, 15895, -28589, 9330], [27000, -8255, 15409, 3676, -18216, 23810, -24171, 32762, -2997, -26255], [9843, -12461, None, 10385, -19826, -16255], [-32738, -10577, -5659, -18377, 31538, 19375], [5682, -3410, -29591]], last(b)=[[-11732, -1337, -30716, -28131, 8561, 32340, 10447, -15149], None, [-10513, -20295, 14030, -25389, -30128, None], [None]], first(b)=[[-26881, 22815, -24247], [1, -31708, 23699, -13713], [-25541, -21917, None], [-12436, -29910, -7676, -23511], [12406, 1, 17622, 2458, -7818], [-1498, -19636, 20168, 8817, 15895, -28589, 9330], [27000, -8255, 15409, 3676, -18216, 23810, -24171, 32762, -2997, -26255], [9843, -12461, None, 10385, -19826, -16255], [-32738, -10577, -5659, -18377, 31538, 19375], [5682, -3410, -29591]], last(b)=[[-11732, -1337, -30716, -28131, 8561, 32340, 10447, -15149], None, [-10513, -20295, 14030, -25389, -30128, None], [None]]), Row(a=219362441675995444, first(b)=[[], [-13722, None, 20057, 30789, -14336, -17187, 31807], [], [-23557, -5480, -22537, 22089, -16767, 20972, 1], [17721, 27214], [-1130, 23367, -363, -24065, 12849, 21819, -10841, -7461], [-16292, -10440, -3454, -27723, 16373, 15790, -2979, 27973, -19567], [None, -12956, -3171, 21040]], last(b)=[None, [-13762, 32767, -21076, -18575, 28236, -32195, 12056, -10876, -32768, -31881], [-15479, 9176, 16706, 25427, None, 26375, 13435], [19277, -7282, 481, 1333, -30355, 23478], [-23652, None, 25857, -29462, 21236, -10141, -13871, -7281, 17700], [], [20631, 1451, None, None, -17465], [-3873, -24680, 12650, -14327, None], [28115, 21229, -6592, 12182, 30290, -13379], [-542, -15585, -12165, 373, 4454]], first(b)=[[], [-13722, None, 20057, 30789, -14336, -17187, 31807], [], [-23557, -5480, -22537, 22089, -16767, 20972, 1], [17721, 27214], [-1130, 23367, -363, -24065, 12849, 21819, -10841, -7461], [-16292, -10440, -3454, -27723, 16373, 15790, -2979, 27973, -19567], [None, -12956, -3171, 21040]], last(b)=[None, [-13762, 32767, -21076, -18575, 28236, -32195, 12056, -10876, -32768, -31881], [-15479, 9176, 16706, 25427, None, 26375, 13435], [19277, -7282, 481, 1333, -30355, 23478], [-23652, None, 25857, -29462, 21236, -10141, -13871, -7281, 17700], [], [20631, 1451, None, None, -17465], [-3873, -24680, 12650, -14327, None], [28115, 21229, -6592, 12182, 30290, -13379], [-542, -15585, -12165, 373, 4454]]), Row(a=475054791535496755, first(b)=[[14681, -4452]], last(b)=[[-25710], [12595, 30198, 0, 29932, -8998, 9452, None], [27399, -16910, None, -12782, -5222, 8544]], first(b)=[[14681, -4452]], last(b)=[[-25710], [12595, 30198, 0, 29932, -8998, 9452, None], [27399, -16910, None, -12782, -5222, 8544]]), Row(a=1970144316115646685, first(b)=[[-2873, 29885, 16128, 28394], [2158, 15737, -8983, -13695, -7401, -22391, 10221], [16646, None, -9930, 154, 15781], [None, 23618]], last(b)=[[25474, -6628, 8092], [20905, -18711, -25559, -17726], [-19210, 8857]], first(b)=[[-2873, 29885, 16128, 28394], [2158, 15737, -8983, -13695, -7401, -22391, 10221], [16646, None, -9930, 154, 15781], [None, 23618]], last(b)=[[25474, -6628, 8092], [20905, -18711, -25559, -17726], [-19210, 8857]]), Row(a=5464225219094694383, first(b)=[[2815, -10422, -28944, 23300], [], [22034, 18222], [16788, -22978, 9595, 18100, 4502, 18153, -5283, 26672], [-22275, None], [-19869], [26205, 462, 27832, 9610, -1, -30095, -17111, 9327]], last(b)=[[-14878, 10875, None, -15762, 3745, -25282, 22749, -13605, 30234, -10403], [], [27066, 1985, 24397], [-13879, 7980, -10960, 23684, 15803, 29439, 20579, -25037], [3848, 23730, -28541, -32563, 1734, -32768], [-21877], [None, 32767, 4810, -22765, 30284]], first(b)=[[2815, -10422, -28944, 23300], [], [22034, 18222], [16788, -22978, 9595, 18100, 4502, 18153, -5283, 26672], [-22275, None], [-19869], [26205, 462, 27832, 9610, -1, -30095, -17111, 9327]], last(b)=[[-14878, 10875, None, -15762, 3745, -25282, 22749, -13605, 30234, -10403], [], [27066, 1985, 24397], [-13879, 7980, -10960, 23684, 15803, 29439, 20579, -25037], [3848, 23730, -28541, -32563, 1734, -32768], [-21877], [None, 32767, 4810, -22765, 30284]]), Row(a=5474254283901062774, first(b)=[[2191, 10176, -19400, 32519, 8259], [-18134], [19679, 23388, 27967, 1, 4833, -5061, -29591, -22398, 22713, -25565], [-17530, 27794, 28758, 5230, 13257, -5535, -24684, -16554, -16792, -22179], [5272, -24637, -7582, 26536, -7057, 1, -11396, None], []], last(b)=[[-28834, -21322, -9400, -19646, -504, -1], [12071, 29601, -541, -469, None, -477, 13063, 30735, -8692]], first(b)=[[2191, 10176, -19400, 32519, 8259], [-18134], [19679, 23388, 27967, 1, 4833, -5061, -29591, -22398, 22713, -25565], [-17530, 27794, 28758, 5230, 13257, -5535, -24684, -16554, -16792, -22179], [5272, -24637, -7582, 26536, -7057, 1, -11396, None], []], last(b)=[[-28834, -21322, -9400, -19646, -504, -1], [12071, 29601, -541, -469, None, -477, 13063, 30735, -8692]]), Row(a=6180146290531704930, first(b)=[[-9712, 20880], []], last(b)=[[-25020, -23390, -31363, 9459, 1838, -2956, None, 7257, -9287], [-31685, -30900, -12969, -18584, -7284, 32017], [1975, -1979, 4992], [19907], [27007, 3895, 25572, 9403, 16740, -21175, 790], [0, -8861, -20428]], first(b)=[[-9712, 20880], []], last(b)=[[-25020, -23390, -31363, 9459, 1838, -2956, None, 7257, -9287], [-31685, -30900, -12969, -18584, -7284, 32017], [1975, -1979, 4992], [19907], [27007, 3895, 25572, 9403, 16740, -21175, 790], [0, -8861, -20428]]), Row(a=6527092348415079311, first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[[28977, 32675, 29626, None, 18795, 26069, 29838], [-3968, 11419, -3221, 19691, -1879], [-19511, -11128, 0, 28014, -19863, 27658, -11514], [22779, 26191, -19770]], first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[[28977, 32675, 29626, None, 18795, 26069, 29838], [-3968, 11419, -3221, 19691, -1879], [-19511, -11128, 0, 28014, -19863, 27658, -11514], [22779, 26191, -19770]]), Row(a=7521661924887948850, first(b)=[[-3096, 31745, None, -15276, -7986], [-25639, None, -7706, 21337, -12112, None], None, [-1, 16170, -2711, 9118, 17830], [-15297, -20377], [4892, 19887], [-19629, 9148], [32767, 18779, 28289, 0, -25369, -17756, -8880, 8936, -13535, -10195]], last(b)=[[-16913, 20353, 30102, -14261, 1, -6441, -1416, 8131, -10487, -9550], [17517, 17624], [9196, None, -11277, -16844], [-18534, -27447, -32495, 24489, 7694, -12931, 27940, 23438, 3770, 6975]], first(b)=[[-3096, 31745, None, -15276, -7986], [-25639, None, -7706, 21337, -12112, None], None, [-1, 16170, -2711, 9118, 17830], [-15297, -20377], [4892, 19887], [-19629, 9148], [32767, 18779, 28289, 0, -25369, -17756, -8880, 8936, -13535, -10195]], last(b)=[[-16913, 20353, 30102, -14261, 1, -6441, -1416, 8131, -10487, -9550], [17517, 17624], [9196, None, -11277, -16844], [-18534, -27447, -32495, 24489, 7694, -12931, 27940, 23438, 3770, 6975]]), Row(a=8520568399957671882, first(b)=[[-29635, -14274, -17818], [20921, 12610, 16299, -26415, 29012], [-26741, 32554, -17843, -28600, 25374], [-30635, 872, 1, 7235, 15976, 11878, 21282, 3812], [-21262, -19886, -26238, -27735, -6515, 7126, -4085, -22250, 2042, 26277], [2870, 22667, -28877, -10447, -12861, -12959, -31831, 21604, 29528, 32767], [-30590, -32535, -15424, 1, 30971, -19012], [3151, -15847, -14977, -16034], [None, 19191, -3287], [26878, 29445, -4201, -5461]], last(b)=[[31046, 1072, 22866, -30688, None], [25062, 21528, 12528, -10822, -25984, 22564], [6497, -25019, 24467, -14211, 23629], [21451, -5211, 1095, -25896], [21185, -10276, None, 26288, -18708, -26715, 21408], [], [15414], [24896, 1742, 31075, -16722, 12839, -29435, -8816, 25911, 18590, -2982], [11855, -32768, 25545, -3504, -21579]], first(b)=[[-29635, -14274, -17818], [20921, 12610, 16299, -26415, 29012], [-26741, 32554, -17843, -28600, 25374], [-30635, 872, 1, 7235, 15976, 11878, 21282, 3812], [-21262, -19886, -26238, -27735, -6515, 7126, -4085, -22250, 2042, 26277], [2870, 22667, -28877, -10447, -12861, -12959, -31831, 21604, 29528, 32767], [-30590, -32535, -15424, 1, 30971, -19012], [3151, -15847, -14977, -16034], [None, 19191, -3287], [26878, 29445, -4201, -5461]], last(b)=[[31046, 1072, 22866, -30688, None], [25062, 21528, 12528, -10822, -25984, 22564], [6497, -25019, 24467, -14211, 23629], [21451, -5211, 1095, -25896], [21185, -10276, None, 26288, -18708, -26715, 21408], [], [15414], [24896, 1742, 31075, -16722, 12839, -29435, -8816, 25911, 18590, -2982], [11855, -32768, 25545, -3504, -21579]]), Row(a=9218184769308444545, first(b)=[[], None, [-18145, 17784], [18685, -32768, -24133, 25889, -7513, 2958, -14172], [0, 11120, 1928]], last(b)=[[370, -12691, -32271, 8679, 16887, -24032, 27252, 17346]], first(b)=[[], None, [-18145, 17784], [18685, -32768, -24133, 25889, -7513, 2958, -14172], [0, 11120, 1928]], last(b)=[[370, -12691, -32271, 8679, 16887, -24032, 27252, 17346]])]
GPU OUTPUT: [Row(a=None, first(b)=[], last(b)=[[32767, 11661, -3930, 19646, -7186, -28721, -1818, 10246], [-32048, None, -2105, -20658, -22593, -28101]], first(b)=[], last(b)=[[32767, 11661, -3930, 19646, -7186, -28721, -1818, 10246], [-32048, None, -2105, -20658, -22593, -28101]]), Row(a=-9223372036854775808, first(b)=None, last(b)=[[15818, -6199, 328, -2196], [1]], first(b)=[[-21082, -26101, 22528], None, [-19246, 22233], [-17217, -1, -9301, -26520, -21340, -16543, 5799, 32500, -17544], [30040, 17873, -6397, 997, 5058, -4637], [11414], [-19287, 12698, None, 32767, 24936, -19562, 3219, -479, -15703, 20672], [-25110, -13258, None, 30165, 2235, 32605, 28907, -9679, -9018]], last(b)=[[15818, -6199, 328, -2196], [1]]), Row(a=-8717103806774770614, first(b)=[[-27523, 22415, 26333, -1125, -19290, 16813, 5770], [29754, -5556, -27575, 5970, 9207, 8294, -24355, None], [], [32767, 32767, -4563, 28694, 1190, -5527], [-475, 4035], [25939, 11650, None, 7442, -8283, 6921, -19537, -20704, -30098, 19893], [-23473], [-29949, 5350, 14311, -12560, 10235, -10061, -13165, 1], [9146, 5700], [-5671, -28606, -5842, 23938, -26404, -355]], last(b)=[[26289, 10301, 24841, 30561, -10204, -24652], [16526, 28212, 388, 30218, 25214, 22368, 0, -32768, -10704], [19596, 23979, -16029], [31693, 15194, 28872, -2765, 1700, -18403, 28932, -22976], [14392, 10813, -19765, -29110, -20725], []], first(b)=[[-27523, 22415, 26333, -1125, -19290, 16813, 5770], [29754, -5556, -27575, 5970, 9207, 8294, -24355, None], [], [32767, 32767, -4563, 28694, 1190, -5527], [-475, 4035], [25939, 11650, None, 7442, -8283, 6921, -19537, -20704, -30098, 19893], [-23473], [-29949, 5350, 14311, -12560, 10235, -10061, -13165, 1], [9146, 5700], [-5671, -28606, -5842, 23938, -26404, -355]], last(b)=[[26289, 10301, 24841, 30561, -10204, -24652], [16526, 28212, 388, 30218, 25214, 22368, 0, -32768, -10704], [19596, 23979, -16029], [31693, 15194, 28872, -2765, 1700, -18403, 28932, -22976], [14392, 10813, -19765, -29110, -20725], []]), Row(a=-4969503509529324168, first(b)=[[31758, 16719, -32261, -1, -6701, 1, 20835, None], [7253, 26134, -6900], [], [-32307, 23051, 32767, -23889, -311], [5359, 20578, -12310], [19309, -9418, -31441, 1911, 21120, 7034], [1225, 28456, 2728, 22622, -23987], []], last(b)=[[29346, 14238, -32522], [26557], [-31345, 3369, -9877, 0, -6098, 31056, 10835], [6124], [], [-19475, 32751, None, 13012, -7482, 6440, -12802, -18244, 26752]], first(b)=[[31758, 16719, -32261, -1, -6701, 1, 20835, None], [7253, 26134, -6900], [], [-32307, 23051, 32767, -23889, -311], [5359, 20578, -12310], [19309, -9418, -31441, 1911, 21120, 7034], [1225, 28456, 2728, 22622, -23987], []], last(b)=[[29346, 14238, -32522], [26557], [-31345, 3369, -9877, 0, -6098, 31056, 10835], [6124], [], [-19475, 32751, None, 13012, -7482, 6440, -12802, -18244, 26752]]), Row(a=-4613498067146677133, first(b)=[[], [-18227, None, -1, -32083], [9119], [4877, None], [-12810]], last(b)=[[-20654, 31730, -13596], [-24825, -21469, -16034, -25966, 14139, 22969, 22239, 5060, 22268, -25051]], first(b)=[[], [-18227, None, -1, -32083], [9119], [4877, None], [-12810]], last(b)=[[-20654, 31730, -13596], [-24825, -21469, -16034, -25966, 14139, 22969, 22239, 5060, 22268, -25051]]), Row(a=-1721624821893985418, first(b)=[], last(b)=None, first(b)=[], last(b)=[[-32768], [830, -19641, -26663, 14646], [None, 28359, -17592, -28503, -1397], [-9983, 2474, 22005, 8879, 29084, -842, -17490, -2397, -13205], [-10981, 21541, None], [-2387, -8650, -7671], [27206, None, 3075, -13871, -32768, -9063, 8103], []]), Row(a=-801490471132516571, first(b)=[[], [8216, -28419, -15965, 25701, 2620], [9884, -28287, -25145], [8284, 1350, -17415, 7044], [-605, -5845, 11621, 18493, -32768, -19047, 26032, -28801], None], last(b)=[[-30283, -21984, None, -25971], [-1307, 22907, 4802, -17241, -6062, 30686, 24674, -11435, -13231], None, [5057, 16377], [18708, -18353, -1, 24734], None, [2943, 31274, 26977, -4614, -22390]], first(b)=[[], [8216, -28419, -15965, 25701, 2620], [9884, -28287, -25145], [8284, 1350, -17415, 7044], [-605, -5845, 11621, 18493, -32768, -19047, 26032, -28801], None], last(b)=[[-30283, -21984, None, -25971], [-1307, 22907, 4802, -17241, -6062, 30686, 24674, -11435, -13231], None, [5057, 16377], [18708, -18353, -1, 24734], None, [2943, 31274, 26977, -4614, -22390]]), Row(a=-373248622796468535, first(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]], last(b)=[[-23964], [-27734, -22612, -27877, 8485, -25831], None, [1584, None, -3024, 13217, -28229], [18345, 25986, -1182, 20494, -31789, -4223, -15630, -28001, -24164, -1260], [1678, -7229, 27453, 13612, -14864, -1783, 21430, -833, 24272], [-20017, 21250, -11087, 21951, -29985, 12850]], first(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]], last(b)=[[-23964], [-27734, -22612, -27877, 8485, -25831], None, [1584, None, -3024, 13217, -28229], [18345, 25986, -1182, 20494, -31789, -4223, -15630, -28001, -24164, -1260], [1678, -7229, 27453, 13612, -14864, -1783, 21430, -833, 24272], [-20017, 21250, -11087, 21951, -29985, 12850]]), Row(a=38134840438159058, first(b)=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]], last(b)=[[-11732, -1337, -30716, -28131, 8561, 32340, 10447, -15149], None, [-10513, -20295, 14030, -25389, -30128, None], [None]], first(b)=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]], last(b)=[[-11732, -1337, -30716, -28131, 8561, 32340, 10447, -15149], None, [-10513, -20295, 14030, -25389, -30128, None], [None]]), Row(a=219362441675995444, first(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]], last(b)=[None, [-13762, 32767, -21076, -18575, 28236, -32195, 12056, -10876, -32768, -31881], [-15479, 9176, 16706, 25427, None, 26375, 13435], [19277, -7282, 481, 1333, -30355, 23478], [-23652, None, 25857, -29462, 21236, -10141, -13871, -7281, 17700], [], [20631, 1451, None, None, -17465], [-3873, -24680, 12650, -14327, None], [28115, 21229, -6592, 12182, 30290, -13379], [-542, -15585, -12165, 373, 4454]], first(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]], last(b)=[None, [-13762, 32767, -21076, -18575, 28236, -32195, 12056, -10876, -32768, -31881], [-15479, 9176, 16706, 25427, None, 26375, 13435], [19277, -7282, 481, 1333, -30355, 23478], [-23652, None, 25857, -29462, 21236, -10141, -13871, -7281, 17700], [], [20631, 1451, None, None, -17465], [-3873, -24680, 12650, -14327, None], [28115, 21229, -6592, 12182, 30290, -13379], [-542, -15585, -12165, 373, 4454]]), Row(a=475054791535496755, first(b)=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]], last(b)=[[-25710], [12595, 30198, 0, 29932, -8998, 9452, None], [27399, -16910, None, -12782, -5222, 8544]], first(b)=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]], last(b)=[[-25710], [12595, 30198, 0, 29932, -8998, 9452, None], [27399, -16910, None, -12782, -5222, 8544]]), Row(a=1970144316115646685, first(b)=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]], last(b)=[[25474, -6628, 8092], [20905, -18711, -25559, -17726], [-19210, 8857]], first(b)=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]], last(b)=[[25474, -6628, 8092], [20905, -18711, -25559, -17726], [-19210, 8857]]), Row(a=5464225219094694383, first(b)=[[-28776, -13740, -25282, 546], [27903, 6999], [-28119, -15870, 3092, 23921, -29148, -15688, -7612, 18311, 2355, 32767], [-906, -9795, -24799, 21318, 22822, None, 2240], [-23294, -20111, -6115, -26883, -20812, None, 15761]], last(b)=[[-14878, 10875, None, -15762, 3745, -25282, 22749, -13605, 30234, -10403], [], [27066, 1985, 24397], [-13879, 7980, -10960, 23684, 15803, 29439, 20579, -25037], [3848, 23730, -28541, -32563, 1734, -32768], [-21877], [None, 32767, 4810, -22765, 30284]], first(b)=[[-28776, -13740, -25282, 546], [27903, 6999], [-28119, -15870, 3092, 23921, -29148, -15688, -7612, 18311, 2355, 32767], [-906, -9795, -24799, 21318, 22822, None, 2240], [-23294, -20111, -6115, -26883, -20812, None, 15761]], last(b)=[[-14878, 10875, None, -15762, 3745, -25282, 22749, -13605, 30234, -10403], [], [27066, 1985, 24397], [-13879, 7980, -10960, 23684, 15803, 29439, 20579, -25037], [3848, 23730, -28541, -32563, 1734, -32768], [-21877], [None, 32767, 4810, -22765, 30284]]), Row(a=5474254283901062774, first(b)=[[-30181, -11584, 19912, 3381, -5389, -1674, 2499, 15493, -26249], [2590, -2345, 19623, 1248, 10439], [], [1149, 32767, -28766, 20001, 23824, None, 2502, -11059, 25372, -13346], [1570, -11465, -14668, 24992, 19759, -5743, 7273, -2934, 31766], [None], [-32768, -29717, -4384, 32041], [25203, 3221, -10134, 19622, 26190, -10670, 0, 4409, 18296, 1032]], last(b)=[[-28834, -21322, -9400, -19646, -504, -1], [12071, 29601, -541, -469, None, -477, 13063, 30735, -8692]], first(b)=[[-30181, -11584, 19912, 3381, -5389, -1674, 2499, 15493, -26249], [2590, -2345, 19623, 1248, 10439], [], [1149, 32767, -28766, 20001, 23824, None, 2502, -11059, 25372, -13346], [1570, -11465, -14668, 24992, 19759, -5743, 7273, -2934, 31766], [None], [-32768, -29717, -4384, 32041], [25203, 3221, -10134, 19622, 26190, -10670, 0, 4409, 18296, 1032]], last(b)=[[-28834, -21322, -9400, -19646, -504, -1], [12071, 29601, -541, -469, None, -477, 13063, 30735, -8692]]), Row(a=6180146290531704930, first(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]], last(b)=[[-25020, -23390, -31363, 9459, 1838, -2956, None, 7257, -9287], [-31685, -30900, -12969, -18584, -7284, 32017], [1975, -1979, 4992], [19907], [27007, 3895, 25572, 9403, 16740, -21175, 790], [0, -8861, -20428]], first(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]], last(b)=[[-25020, -23390, -31363, 9459, 1838, -2956, None, 7257, -9287], [-31685, -30900, -12969, -18584, -7284, 32017], [1975, -1979, 4992], [19907], [27007, 3895, 25572, 9403, 16740, -21175, 790], [0, -8861, -20428]]), Row(a=6527092348415079311, first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[[28977, 32675, 29626, None, 18795, 26069, 29838], [-3968, 11419, -3221, 19691, -1879], [-19511, -11128, 0, 28014, -19863, 27658, -11514], [22779, 26191, -19770]], first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[[28977, 32675, 29626, None, 18795, 26069, 29838], [-3968, 11419, -3221, 19691, -1879], [-19511, -11128, 0, 28014, -19863, 27658, -11514], [22779, 26191, -19770]]), Row(a=7521661924887948850, first(b)=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []], last(b)=[[-16913, 20353, 30102, -14261, 1, -6441, -1416, 8131, -10487, -9550], [17517, 17624], [9196, None, -11277, -16844], [-18534, -27447, -32495, 24489, 7694, -12931, 27940, 23438, 3770, 6975]], first(b)=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []], last(b)=[[-16913, 20353, 30102, -14261, 1, -6441, -1416, 8131, -10487, -9550], [17517, 17624], [9196, None, -11277, -16844], [-18534, -27447, -32495, 24489, 7694, -12931, 27940, 23438, 3770, 6975]]), Row(a=8520568399957671882, first(b)=[], last(b)=[[31046, 1072, 22866, -30688, None], [25062, 21528, 12528, -10822, -25984, 22564], [6497, -25019, 24467, -14211, 23629], [21451, -5211, 1095, -25896], [21185, -10276, None, 26288, -18708, -26715, 21408], [], [15414], [24896, 1742, 31075, -16722, 12839, -29435, -8816, 25911, 18590, -2982], [11855, -32768, 25545, -3504, -21579]], first(b)=[], last(b)=[[31046, 1072, 22866, -30688, None], [25062, 21528, 12528, -10822, -25984, 22564], [6497, -25019, 24467, -14211, 23629], [21451, -5211, 1095, -25896], [21185, -10276, None, 26288, -18708, -26715, 21408], [], [15414], [24896, 1742, 31075, -16722, 12839, -29435, -8816, 25911, 18590, -2982], [11855, -32768, 25545, -3504, -21579]]), Row(a=9218184769308444545, first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[370, -12691, -32271, 8679, 16887, -24032, 27252, 17346]], first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[370, -12691, -32271, 8679, 16887, -24032, 27252, 17346]])]

CPU OUTPUT: [Row(a=None, b=[]), Row(a=None, b=[]), Row(a=None, b=[[-27523, 22415, 26333, -1125, -19290, 16813, 5770], [29754, -5556, -27575, 5970, 9207, 8294, -24355, None], [], [32767, 32767, -4563, 28694, 1190, -5527], [-475, 4035], [25939, 11650, None, 7442, -8283, 6921, -19537, -20704, -30098, 19893], [-23473], [-29949, 5350, 14311, -12560, 10235, -10061, -13165, 1], [9146, 5700], [-5671, -28606, -5842, 23938, -26404, -355]]), Row(a=None, b=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]]), Row(a=-9223372036854775808, b=None), Row(a=-9223372036854775808, b=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]]), Row(a=-9223372036854775808, b=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]]), Row(a=-9223372036854775808, b=[[-30181, -11584, 19912, 3381, -5389, -1674, 2499, 15493, -26249], [2590, -2345, 19623, 1248, 10439], [], [1149, 32767, -28766, 20001, 23824, None, 2502, -11059, 25372, -13346], [1570, -11465, -14668, 24992, 19759, -5743, 7273, -2934, 31766], [None], [-32768, -29717, -4384, 32041], [25203, 3221, -10134, 19622, 26190, -10670, 0, 4409, 18296, 1032]]), Row(a=1970144316115646685, b=[[-28776, -13740, -25282, 546], [27903, 6999], [-28119, -15870, 3092, 23921, -29148, -15688, -7612, 18311, 2355, 32767], [-906, -9795, -24799, 21318, 22822, None, 2240], [-23294, -20111, -6115, -26883, -20812, None, 15761]]), Row(a=1970144316115646685, b=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]]), Row(a=1970144316115646685, b=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]]), Row(a=1970144316115646685, b=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]]), Row(a=6527092348415079311, b=[]), Row(a=6527092348415079311, b=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []]), Row(a=6527092348415079311, b=[[], [-18227, None, -1, -32083], [9119], [4877, None], [-12810]]), Row(a=6527092348415079311, b=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []]), Row(a=9218184769308444545, b=[[], [8216, -28419, -15965, 25701, 2620], [9884, -28287, -25145], [8284, 1350, -17415, 7044], [-605, -5845, 11621, 18493, -32768, -19047, 26032, -28801], None]), Row(a=9218184769308444545, b=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]]), Row(a=9218184769308444545, b=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []]), Row(a=9218184769308444545, b=[[31758, 16719, -32261, -1, -6701, 1, 20835, None], [7253, 26134, -6900], [], [-32307, 23051, 32767, -23889, -311], [5359, 20578, -12310], [19309, -9418, -31441, 1911, 21120, 7034], [1225, 28456, 2728, 22622, -23987], []])]
GPU OUTPUT: [
    
Row(a=None, b=[]), 
Row(a=None, b=[]), 
Row(a=None, b=[[-27523, 22415, 26333, -1125, -19290, 16813, 5770], [29754, -5556, -27575, 5970, 9207, 8294, -24355, None], [], [32767, 32767, -4563, 28694, 1190, -5527], [-475, 4035], [25939, 11650, None, 7442, -8283, 6921, -19537, -20704, -30098, 19893], [-23473], [-29949, 5350, 14311, -12560, 10235, -10061, -13165, 1], [9146, 5700], [-5671, -28606, -5842, 23938, -26404, -355]]), 
Row(a=None, b=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]]), 
Row(a=-9223372036854775808, b=None), 
Row(a=-9223372036854775808, b=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]]), 
Row(a=-9223372036854775808, b=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]]), 
Row(a=-9223372036854775808, b=[[-30181, -11584, 19912, 3381, -5389, -1674, 2499, 15493, -26249], [2590, -2345, 19623, 1248, 10439], [], [1149, 32767, -28766, 20001, 23824, None, 2502, -11059, 25372, -13346], [1570, -11465, -14668, 24992, 19759, -5743, 7273, -2934, 31766], [None], [-32768, -29717, -4384, 32041], [25203, 3221, -10134, 19622, 26190, -10670, 0, 4409, 18296, 1032]]), 
Row(a=1970144316115646685, b=[[-28776, -13740, -25282, 546], [27903, 6999], [-28119, -15870, 3092, 23921, -29148, -15688, -7612, 18311, 2355, 32767], [-906, -9795, -24799, 21318, 22822, None, 2240], [-23294, -20111, -6115, -26883, -20812, None, 15761]]),
Row(a=1970144316115646685, b=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]]),
Row(a=1970144316115646685, b=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]]),
Row(a=1970144316115646685, b=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]]),
Row(a=6527092348415079311, b=[]),
Row(a=6527092348415079311, b=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []]),
Row(a=6527092348415079311, b=[[], [-18227, None, -1, -32083], [9119], [4877, None], [-12810]]),
Row(a=6527092348415079311, b=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []]),
Row(a=9218184769308444545, b=[[], [8216, -28419, -15965, 25701, 2620], [9884, -28287, -25145], [8284, 1350, -17415, 7044], [-605, -5845, 11621, 18493, -32768, -19047, 26032, -28801], None]),
Row(a=9218184769308444545, b=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]]),
Row(a=9218184769308444545, b=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []]),
Row(a=9218184769308444545, b=[[31758, 16719, -32261, -1, -6701, 1, 20835, None], [7253, 26134, -6900], [], [-32307, 23051, 32767, -23889, -311], [5359, 20578, -12310], [19309, -9418, -31441, 1911, 21120, 7034], [1225, 28456, 2728, 22622, -23987], []])]


CPU OUTPUT: [Row(a=None, first(b)=[], last(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]], first(b)=[], last(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]]), 
Row(a=-9223372036854775808, first(b)=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]], last(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]], first(b)=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]], last(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]]), Row(a=1970144316115646685, first(b)=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]], last(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]], first(b)=[[3306, 32767, -23390, 15556, -6050, 6496, 15940, 28151], [-16615, 16672, 78, -25935, 18822, 12842, -11168, -27433], [-20919, -19524, -21795, -32768, -22020, -1181, 32767, 23975], [9891, 31190, -32768, 20738, None, 3627, -32243, -32768, -30011], [-1018, -5688, -13316, 3044], [115, 25742, -10751, 31563, -16804, 17466, -18594, -29603, -31036], None, [-14865, 16217, 8028, 14000, 9658, 25207, 13135, 19582]], last(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]]), Row(a=6527092348415079311, first(b)=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []], last(b)=[], first(b)=[[], [-24326, 25781, 28, 26648], [11622, 30904, 21847, 0, 13755, -16368, 3527, 19802, -21071], [-31788, 8813, 24683, None, -3182, 32122], [-3269, 11396], []], last(b)=[]), Row(a=9218184769308444545, first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []], first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []])]
GPU OUTPUT: [Row(a=None, first(b)=[], last(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]], first(b)=[], last(b)=[[-8019, -23240, 859, -31683, 17133, 31074, 23015, 27322], [6468, -32047, 6901, 8592, 32767, 4260]]), 
Row(a=-9223372036854775808, first(b)=None, last(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]], first(b)=[[], [-22749, 6275, 21780, -15678, -27799, -4248, -32768, -10287], [-27863], [12704, 23979, 31765, 18358], [32741, 19965, -30397, 10189, -15055], [-4846, -20132, 12301, None, 30736, -2014, -27473, -10526], [-4854, 10778, 693, 11833, -1942, 31299], [-19101, 20525, -13458, 11914, 16782, -3446, 2192, 5970, -17785, 3562], [-26772, -31146, -30862, -17682]], last(b)=[None, [], [5416, -6557, 9728, 12501, -24267, 8342], [9017, 9868], [-31640, -13271, 9905, -23745, 3881, 14963, None, 32767], [-22523, None, -15129, 31742, 251, 11619, 15746, 28124], [11855, -10775, 16, -15283, -8573, -26201, 2061, -5985, -22480, -4276], [-10045, 23866, 15480, 31021, 4423, -6504, -1938, 15356]]), Row(a=1970144316115646685, first(b)=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]], last(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]], first(b)=[[-4092, 5214, None, -19661, 6080, 10839], [], [22558, -7885, 32684, 18789], [-28243, 20222, -10092], [16345], [], [-18622, 18776, -28892, 7671, 18821, -10671, -31156, -2337, 12297, None], [27411, None, -32020, -15828, -5835, -25412], [15038, -6575, None, 13997, -32561, 10634], [-29102, -9541, -9073, 693, -23534, -30581, 4089, -18418]], last(b)=[[20748, 7570, -15605, -14376, -11408], [-31509, -1, -28017, 19941, -30366, -20968]]), Row(a=6527092348415079311, first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[], first(b)=[[-24497], [32169, 29130, -5249, -29053, 18325, -32492, 2140], [-2784, -19369, -28759, -31562, None, -4378, 32767], [-3711, 32219, 12543], []], last(b)=[]), Row(a=9218184769308444545, first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []], first(b)=[[-8571, -23657, 683, -10729, 5831, 9437, -17801], [17898, -8122, 453, -5363, 32767, -30040, 19308, -11767], [23155, -3854, 0], [26325, -28745, 9338, 23107, 6370, -4964, 7390]], last(b)=[[17487, 2878, 16073, 30332], [18148, -17497, -13803], [-30388, -1, 15435, 4868], [None], [4885, 3103, 30906, 31637], [None, 22953, -15799, -13160, -29343, -12359], [-19799, -8201], []])]